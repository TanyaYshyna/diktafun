//    console.log("üëÄ renderSentenceCounter –≤—ã–∑–≤–∞–Ω–∞");
const circleBtn = document.getElementById('btn-circle-number');
const inputField = document.getElementById('userInput');
const checkNextDiv = document.getElementById('checkNext');
const checkPreviosDiv = document.getElementById('checkPrevios');
const correctAnswerDiv = document.getElementById('correctAnswer');
const translationDiv = document.getElementById('translation');
const audio = document.getElementById('audio');
const audio_tr = document.getElementById('audio_tr');
const rawJson = document.getElementById("sentences-data").textContent;
const sentences = JSON.parse(rawJson);

const playSequenceStart = "oto";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
const playSequenceTypo = "o";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
const successSequence = "ot"; // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "o" –∏–ª–∏ "to")

/**
 * @typedef {Object} Sentence
 * @property {string} key
 * @property {string} text_original
 * @property {string} text_translation
 * @property {string} audio_original
 * @property {string} audio_translation
 * @property {number} text_check        // -1 –Ω–µ –Ω–∞–±—Ä–∞–Ω–æ; 0 —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞; 1,2,.. —Å –æ—à–∏–±–∫–∞–º–∏ (–ø–ª–∞–Ω–∏—Ä—É—é —É–±—Ä–∞—Ç—å -- —Å–ª–∏—à–∫–æ–º –ú–£–¢–ù–û)
 * @property {number} audio_check       // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å (—É–±–µ—Ä—É)
 * @property {number} circle            // 1,2,.. –∫—Ä—É–≥–∏ –ø–æ –¥–∏–∫—Ç–∞–Ω—Ç—É (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º "—Å –Ω–∞—á–∞–ª–∞" –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Ö–∞ –≤–µ—Ä–Ω–æ)
 * @property {0|1}    perfect           // 1 ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
 * @property {0|1}    corrected         // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ
 * @property {0|1}    audio_status      // 1 ‚Äî –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∏–∫—Ç–æ–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã
 * @property {number} audio_count       // —Å–∫–æ–ª—å–∫–æ –¥–∏–∫—Ç–æ–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å 
 */

/** @type {Sentence[]} */
let allSentences = sentences; // ‚Üê –∏–∑ JSON
let currentSentenceIndex = 0;

let currentDictation = {
    id: '', // ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç—É
    language_original: '',
    language_translation: '',
    dictationStartTime: null, // –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É
    dictationTimerInterval: null // —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    // circle_number: 0
    // phrases_total: 0, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—Ä–∞–∑ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫—Ä—É–∑—ñ
    // phrases_perfect: 0, // —Å–∫—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫—Ä—É–∑—ñ –∑—Ä–æ–±–ª–µ–Ω–æ –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏
    // phrases_corrected: 0, // —Å–∫—ñ–ª—å–∫–∏ —Ñ—Ä–∞–∑ –∑—Ä–æ–±–ª–µ–Ω–æ –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±
    // phrases_corrected_audio: 0, // —Å–∫—ñ–ª—å–∫–∏ —Ñ—Ä–∞–∑ –¥–ª—è —è–∫–∏—Ö –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞—É–¥—ñ–æ
    // phrases_audio_counter: 0 // —Å–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤ –∞—É–¥—ñ–æ —â–æ–± –≤–æ–Ω–æ –±—É–ª–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let first_pass_new_sentences = true;
let circle_number = 1;
let counterTabloIndex = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
let isAudioLoaded = false;
const startModal = document.getElementById('startModal');
const confirmStartBtn = document.getElementById('confirmStartBtn');

// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
const count_perfect = document.getElementById('count_perfect');
const count_corrected = document.getElementById('count_corrected');
const count_audio = document.getElementById('count_audio');
const count_total = document.getElementById('count_total');

const openUserAudioModalBtn = document.getElementById('openUserAudioModalBtn');
const userAudioModal = document.getElementById('userAudioModal');
const closeUserAudioBtn = document.querySelector('.close-user-audio');
const userCancelBtn = document.getElementById('userCancelButton');
const userConfirmBtn = document.getElementById('userConfirmButton');
const userRecordBtn = document.getElementById('userRecordButton');
const userAudioStatusText = document.getElementById('userAudioStatusText');
// const userAudioTranscript = document.getElementById('userAudioTranscript');
const userAudioVisualizer = document.getElementById('userAudioVisualizer');

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏–æ =====
// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
// –ñ–∏–≤–æ–π –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (final + interim)
const count_percent = document.getElementById('count_percent');
const recordButton = document.getElementById('recordButton');
const recordStateIcon = document.getElementById('recordStateIcon'); // –∑–∞–ø–∏—Å—å/–ø–∞—É–∑–∞
const AUTO_STOP_ENABLED = true;
const AUTO_STOP_THRESHOLD = 80;     // 95%
const AUTO_STOP_STABLE_MS = 400;      // –¥–µ—Ä–∂–∏–º –ø–æ—Ä–æ–≥ ‚â•95% —Ö–æ—Ç—è –±—ã 0.4s
let srLiveText = '';
let isRecording = false;     // –∏–¥—ë—Ç –ª–∏ –∑–∞–ø–∏—Å—å (–¥–ª—è onresult)
let autoStopTimer = null;
let isStopping = false;        // –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ç–æ–ø–∞ (–∞–≤—Ç–æ + –∫–ª–∏–∫)
let lastStopCause = 'manual';  // 'manual' | 'auto'
const VIS_BAR_COLOR =
    getComputedStyle(document.documentElement)
        .getPropertyValue('--color-button-text-purple')
        .trim() || '#8BBFFF';



const audioVisualizer = document.getElementById('audioVisualizer');
// === –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–±—â–∏–µ —Å—Å—ã–ª–∫–∏) ===
let vizAC = null;        // AudioContext
let vizAnalyser = null;  // AnalyserNode
let vizSource = null;    // MediaStreamAudioSourceNode
let vizRAF = null;       // requestAnimationFrame id
let vizActive = false;   // —Ñ–ª–∞–≥ "—Ä–∏—Å—É–µ–º —Å–µ–π—á–∞—Å"

// const userAudioElement = document.getElementById('audio_user');
// const userAudioAnswer = document.getElementById('userAudioAnswer');

let mediaRecorder, audioChunks = [];
let languageCodes = {};
let recognition = null;
let textAttemptCount = 0;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞ ===
const MIN_MATCH_PERCENT = 80;      // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É
const REQUIRED_PASSED_COUNT = 3;   // —Å–∫–æ–ª—å–∫–æ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–¥–∞—á–∏ —É—Ä–æ–∫–∞

// –°–ª—É–∂–µ–±–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
let passedAudioCount = 0;

// –£–¥–æ–±–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ DOM
const attemptsTable = document.getElementById('sentences-table');

// ===== 
// let phrases_total = 0; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—Ä–∞–∑ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫—Ä—É–∑—ñ
// let phrases_perfect = 0; // —Å–∫—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫—Ä—É–∑—ñ –∑—Ä–æ–±–ª–µ–Ω–æ –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏
// let phrases_corrected = 0; // —Å–∫—ñ–ª—å–∫–∏ —Ñ—Ä–∞–∑ –∑—Ä–æ–±–ª–µ–Ω–æ –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±


// --- helpers: –ª—è–º–±–¥–∞-–≤–µ—Ä—Å–∏–∏ (–ù–û–í–´–ô –ë–õ–û–ö, –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ) -----------------------------------------------

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ
// (1)
function isPendingInCurrentCircle(s) {
    return s.circle === circle_number && s.perfect !== 1 && s.corrected !== 1;
}

/**
 * –ü–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫—Ä—É–≥–µ.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç.
 * (–î–µ–ª–∞—é function-declaration, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –≤—ã—à–µ –ø–æ –∫–æ–¥—É.)
 */
function firstPendingIndex(circle = circle_number) {          // [+]
    for (let i = 0; i < allSentences.length; i++) {                              // [+]
        const s = allSentences[i];                                                 // [+]
        if (s.circle === circle && s.perfect !== 1 && s.corrected !== 1) return i; // [+]
    }                                                                            // [+]
    return -1;                                                                   // [+]
}                                                                              // [+]

function goToFirstPending(circle = circle_number) {           // [+]
    const idx = firstPendingIndex(circle);                                       // [+]
    currentSentenceIndex = idx >= 0 ? idx : 0;                                   // [+]
    showCurrentSentence(currentSentenceIndex);                                   // [+]
}




const countBy = (pred, circle = null) =>
    allSentences.reduce(
        (n, s) => n + ((circle == null || s.circle === circle) && pred(s) ? 1 : 0),
        0
    );

const statsLite = (circle = null) => ({
    perfect: countBy(s => s.perfect === 1, circle),
    corrected: countBy(s => s.corrected === 1, circle),
    total: countBy(() => true, circle),
    audio_status: countBy(s => s.audio_status === 1, circle),
});

const setText = (id, val) => {
    const el = document.getElementById(id);
    if (el) el.textContent = val;
};

const updateStatsUIFor = (circle = null) => {
    const s = statsLite(circle);
    // console.debug('(5) decreaseAudioCounter() circle = ', circle);
    // console.debug('(5) decreaseAudioCounter() s = ', s);
    setText('count_perfect', s.perfect);
    setText('count_corrected', s.corrected);
    setText('count_total', s.total);
    setText('count_audio', s.audio_status);
    return s;
};

let showAllStats = false; // —Ä–µ–∂–∏–º –ø–æ–∫–∞–∑–∞: ALL –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥

const getStatsScope = () => (showAllStats ? null : circle_number);
const updateStats = () => updateStatsUIFor(getStatsScope());

const syncCircleButton = () => {
    // const btn = document.querySelector('.stat-btn.circle');
    const span = document.getElementById('circle-number');
    circleBtn.className = ''; // —à–∞–º–∞–Ω—Å–∫–∏–µ –≤–µ—â–∏ –±–µ–∑ –Ω–∏—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Å
    circleBtn.classList.value = ''; // –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —à–∞–º–∞–Ω—Å—Ç–≤–∞

    if (showAllStats) {
        circleBtn.innerHTML = `<i data-lucide="slack"></i>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫—Ä—É–≥—É.';
        circleBtn.classList.add('all-scope');
    } else {
        circleBtn.innerHTML = `<i data-lucide="iteration-cw"></i><span class="audio-counter">${circle_number}</span>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä—É–≥–∞. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä—É–≥–∏.';
        circleBtn.classList.remove('all-scope');
    }
    lucide.createIcons();
    // —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º perfect/corrected/audio/total
    updateStats();
};


document.addEventListener('DOMContentLoaded', () => {

    if (!circleBtn) return;

    // –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ circleBtn
    if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');
    circleBtn.addEventListener('click', () => {
        showAllStats = !showAllStats; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º ALL ‚Üî –∫—Ä—É–≥
        syncCircleButton();            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ü–∏—Ñ—Ä—ã
    });

    syncCircleButton();              // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
});


// --------------- timer ---------------------------------
let timerInterval = null;
const timerElement = document.getElementById("timer");

function startTimer() {
    currentDictation.dictationStartTime = Date.now();
    timerInterval = setInterval(() => {
        currentDictation.dictationTimerInterval = Date.now() - currentDictation.dictationStartTime;
        updateDictationTimerDisplay(currentDictation.dictationTimerInterval);
    }, 1000);
}

function updateDictationTimerDisplay(elapsed) {
    let s = elapsed / 1000;
    let d = Math.floor(s / 86400);
    s = s - d * 86400;
    let h = Math.floor(s / 3600);
    s = s - h * 3600;
    let m = Math.floor(s / 60);
    s = Math.floor(s % 60);
    //s = s - m * 60;
    let time_text = `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
    if (d > 0) {
        time_text = `${d}:` + time_text;
    }
    if (timerElement) {
        timerElement.textContent = time_text;
    }
    // const hours = Math.floor(elapsed / 1440000);
    // const minutes = Math.floor(elapsed / 60000);
    // const seconds = Math.floor((elapsed % 60000) / 1000);

    // const timerElement = document.getElementById("timer");
    // if (timerElement) {
    //     timerElement.textContent =
    //         `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    // }
}

function timeDisplay(ms) {
    if (!Number.isFinite(ms) || ms < 0) ms = 0;
    const totalSec = Math.floor(ms / 1000);
    const hours = Math.floor(totalSec / 3600);
    const minutes = Math.floor((totalSec % 3600) / 60);
    const seconds = totalSec % 60;
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}

function stopTimer() {
    clearInterval(timerInterval);
}

// –æ–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Ç–∞–±–ª–æ –ø—ñ–ª –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–º
function updateRoundStats(perfect = '', corrected = '', total = '', audio = '') {

    if (perfect !== '') {
        // —Ä–µ—á–µ–Ω–Ω—è –Ω–ø–∏—Å–∞–ª–∏ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É –±–µ–∑ –ø–æ–º–∏–ª–æ–∫
        count_perfect.textContent = perfect;
    }
    if (corrected !== '') {
        // –±—É–ª–∏ –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∞–ø–∏—Å—ñ (—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∞–∂–ª–∏–≤–æ)
        count_corrected.textContent = corrected;
    }
    if (audio !== '') {
        // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞ —Ü—å–æ–º—É –∫–æ–ª—ñ
        count_audio.textContent = audio;
    }
    if (total !== '') {
        // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞ —Ü—å–æ–º—É –∫–æ–ª—ñ
        document.getElementById("count_total").textContent = total;
    }


}

// -------------------------------------------------------
async function loadLanguageCodes() {
    const response = await fetch(LANGUAGE_CODES_URL);
    languageCodes = await response.json();
    initSpeechRecognition();
}

// ===== –¢–∞–±–ª–æ —Ñ—É–Ω–∫—Ü–∏–π ========
function initTabloSentenceCounter(maxVisible = 9) {
    const container = document.getElementById("sentenceCounter");
    container.innerHTML = "";
    const total = allSentences.length;

    // –∑–∞–≥–∞–ª—å–Ω–∏–π –±–æ–∫—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const boxWrapper = document.createElement("div");
    boxWrapper.classList.add("sentence-box-wrapper");

    window.sentenceButtons = [];
    counterTabloIndex = 0;

    if (total <= maxVisible) {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow");
        for (let i = 1; i < total; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
    } else {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow");
        for (let i = 1; i < maxVisible - 2; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
        newTabloBtn(boxWrapper, "...", maxVisible - 2, "button-color-shadow-transparent");
        newTabloBtn(boxWrapper, total, maxVisible - 1, "button-color-transparent");
    }

    container.appendChild(boxWrapper);
}

function newTabloBtn(boxWrapper, lable, index, className) {
    const btn = document.createElement("button");
    //btn.classList.add("sentence-box");
    btn.dataset.position = index;
    btn.textContent = lable;
    btn.classList.add("button-32-32", className);
    btn.onclick = () => {
        const btn_old = window.sentenceButtons[counterTabloIndex];
        btn_old.className = '';
        btn_old.classList.value = '';
        btn_old.classList.add("button-32-32", "button-color-transparent");

        const num = parseInt(btn.textContent);
        if (!isNaN(num)) {
            btn.className = '';
            btn.classList.value = '';
            btn.classList.add("button-32-32", "button-color-yellow");
            currentSentenceIndex = num - 1;
            counterTabloIndex = btn.dataset.position;
            showCurrentSentence(currentSentenceIndex);
        }
    };
    boxWrapper.appendChild(btn);
    window.sentenceButtons.push(btn);
}

function applyStatusClass(btn, sentence, isCurrent = false) {
    // btn.classList.value = '';
    if (isCurrent) {
        // –ø–æ—Ç–æ—á–Ω–µ —Ä–µ—á–µ–Ω–Ω—è
        btn.className = '';
        btn.classList.value = '';
        btn.classList.add("button-32-32", "button-color-yellow");
    } else if (sentence.perfect === 1) {
        // —ñ–¥–µ–∞–ª—å–Ω—ñ (–∑—ñ—Ä–∫–∞)
        btn.className = '';
        btn.classList.value = '';
        btn.classList.add("button-32-32", "button-color-mint");
    } else if (sentence.circle === circle_number && sentence.corrected === 1) {
        // –≤–∏–∫–æ–Ω–∞–Ω—ñ –∞–ª–µ –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ (–ø—ñ–≤ –∑—ñ—Ä–∫–∏)
        btn.className = '';
        btn.classList.value = '';
        btn.classList.add("button-32-32", "button-color-lightgreen");
    } else {
        // –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ
        btn.className = '';
        btn.classList.value = '';
        btn.classList.add("button-32-32", "button-color-transparent");
    }
}

function updateTabloSentenceCounter(currentIndex, maxVisible = 9) {
    const total = allSentences.length;
    const buttons = window.sentenceButtons;
    if (!buttons || buttons.length === 0) return;

    const currentLabel = currentIndex + 1;
    const visibleLabels = buttons.map(btn => btn.textContent);

    // [1] –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    if (visibleLabels.includes(String(currentLabel))) {
        const btn_old = window.sentenceButtons[counterTabloIndex];
        btn_old.className = '';
        btn_old.classList.value = '';
        btn_old.classList.add("button-32-32", "button-color-transparent");

        counterTabloIndex = visibleLabels.indexOf(String(currentLabel));
        const btn = window.sentenceButtons[counterTabloIndex];
        btn.className = '';
        btn.classList.value = '';
        btn.classList.add("button-32-32", "button-color-yellow");

    } else {
        // [2] –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ –∫–Ω–æ–ø–∫–∏
        let visibleIndices = [];

        if (currentIndex < maxVisible - 2) {
            visibleIndices.push(0);
            for (let i = 1; i < maxVisible - 2; i++) visibleIndices.push(i);
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        } else if (currentIndex > total - (maxVisible - 2)) {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = total - maxVisible + 2; i < total; i++) visibleIndices.push(i);
        } else {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = currentIndex; i < currentIndex + (maxVisible - 4); i++) {
                visibleIndices.push(i);
            }
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        }

        buttons.forEach((btn, i) => {
            const value = visibleIndices[i];
            if (value === "...") {
                btn.textContent = "...";
                btn.className = "button-32-32 button-color-shadow-transparent";
                btn.disabled = true;
                btn.removeAttribute("data-position");
            } else {
                const sentence = allSentences[value];
                btn.textContent = value + 1;
                btn.dataset.position = value;
                btn.disabled = false;

                if (value === currentIndex) {
                    applyStatusClass(btn, sentence, true);
                    counterTabloIndex = i;
                } else {
                    applyStatusClass(btn, sentence, false);
                }
            }
        });
    }
}



// ===== –ø—Ä–æ–π—à–ª–∏ –∫–æ–ª–æ =========
function checkIfAllCompleted() {

    // –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ?
    // if (isPendingInCurrentCircle(s)) { showCurrentSentence(nextIndex); return; }   // [+]


    if (!hasUnfinished) {
        const s = statsLite(c); // —Å—á–∏—Ç–∞–µ–º perfect/corrected/total/audioDone –Ω–∞ –¢–ï–ö–£–©–ï–ú –∫—Ä—É–≥–µ

        document.getElementById("finish_modal_timer").textContent =
            timeDisplay(currentDictation.dictationTimerInterval);
        stopTimer();

        // –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ß–ò–°–õ–ê –≤ –º–æ–¥–∞–ª–∫—É
        setText('finish_modal_circle_number', String(c));
        setText('finish_modal_count_perfect', s.perfect);
        setText('finish_modal_count_corrected', s.corrected);
        setText('finish_modal_count_total', s.total);
        setText('finish_modal_count_audio', s.audio_status);
        // document.getElementById("finish_modal_circle_number").textContent = String(c);
        // document.getElementById("finish_modal_count_perfect").textContent = s.perfect;
        // document.getElementById("finish_modal_count_corrected").textContent = s.corrected;
        // document.getElementById("finish_modal_count_audio").textContent = s.audioDone; // –±—ã–ª–æ –æ—à–∏–±–æ—á–Ω–æ: phrases_corrected
        // document.getElementById("finish_modal_count_total").textContent = s.total;

        document.getElementById("finishModal").style.display = "flex";
    }
}



// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª =====

// ====== –ó–∞–ø–∏—Å—å ==============
document.getElementById('recordButton').addEventListener('click', () => {
    const box = document.querySelector('.custom-audio-player[data-audio-id="audio_user"]');
    if (box) box.style.display = 'flex';
}, { once: true });


// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏: 'square' ‚Üî 'pause'   setRecordStateIcon('square');
function setRecordStateIcon(name) {
    const el = document.getElementById('recordStateIcon');
    if (!el) return;

    // —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å, —á—Ç–æ –±—ã –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ
    const sentence = allSentences[currentSentenceIndex];
    const _audio_count = sentence.audio_count;


    document.querySelector('.grupp-audio').style.display = 'block';

    if (_audio_count === 0) {
        recordButton.innerHTML = '<i data-lucide="mic"></i> <i data-lucide="check"></i>';
        lucide.createIcons();
        audioVisualizer.style.display = 'none';
        count_percent.style.display = 'none';
        userAudioAnswer.style.display = 'none';
        // —Å–¥–µ–ª–∞—Ç—å –Ω–µ –≤–∏–¥–∏–º—ã–º–∏ –∫–Ω–æ–ø–∫–∏ % –∫–∞–Ω–≤–∞—Å –∏ –∑–∞–ø–∏—Å—å 
        // document.querySelector('.grupp-audio').style.display = 'none';
        // document.querySelector('.audio-user-panel').style.display = 'none';
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Å—á–µ—Ç—á–∏–∫–æ–º
    let iconHtml = '';
    if (window.lucide && window.lucide.icons && window.lucide.icons[name]) {
        iconHtml = window.lucide.icons[name].toSvg({ width: 18, height: 18 });
    } else {
        iconHtml = `<i data-lucide="${name}"></i>`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π
    el.innerHTML = `${iconHtml}<span class="audio-counter">${_audio_count}</span>`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (window.lucide && window.lucide.createIcons) {
        window.lucide.createIcons();
    }

}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
function decreaseAudioCounter() {
    const sentence = allSentences[currentSentenceIndex];
    // console.debug('(1) decreaseAudioCounter() allSentences =', allSentences);
    // console.debug('(2) decreaseAudioCounter() sentence=', sentence);
    if (sentence.audio_count > 0) {
        sentence.audio_count--;
        // console.debug('(3) decreaseAudioCounter() sentence.audio_count=', sentence.audio_count);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        setRecordStateIcon('square'); // –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è, –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (sentence.audio_count === 0) {
            sentence.audio_status = 1;
            const recordButton = document.getElementById('recordButton');
            if (recordButton) {
                recordButton.disabled = true;
                recordButton.classList.add('disabled');
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
            console.debug('(4) decreaseAudioCounter() 563');
            updateStats();
        }

        return true;
    }
    return false;
}

// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º stopRecording
function stopRecording(cause = 'manual') {
    if (isStopping) return;
    isStopping = true;
    lastStopCause = cause;

    // –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—à–∞–µ–º –≤ onresult:
    isRecording = false;

    // –°–±—Ä–æ—Å –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞, –µ—Å–ª–∏ –≤–∏—Å–∏—Ç
    if (autoStopTimer) {
        clearTimeout(autoStopTimer);
        autoStopTimer = null;
    }

    // –ú—è–≥–∫–æ –≥–∞—Å–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ "aborted")
    if (typeof recognition !== 'undefined' && recognition) {
        try { recognition.stop(); } catch (_) { }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å ‚Äî onstop —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç saveRecording()
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        try { mediaRecorder.stop(); } catch (_) { }
    } else {
        // –£–∂–µ –Ω–µ –ø–∏—à–µ–º ‚Äî —Å–Ω–∏–º–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        isStopping = false;
    }

    // –ü–æ–≥–∞—Å–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –≤–µ—Ä–Ω—ë–º –∫–≤–∞–¥—Ä–∞—Ç
    stopVisualization();
    if (typeof setRecordStateIcon === 'function') setRecordStateIcon('square');
}

async function startRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: false,
                noiseSuppression: false,
                autoGainControl: false
            }
        });

        isRecording = true;     // —Ç–µ–ø–µ—Ä—å onresult –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        isStopping = false;    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–æ–ø–∞
        lastStopCause = 'manual';
        srLiveText = '';        // –æ—á–∏—â–∞–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        const options = {
            mimeType: getSupportedMimeType()
        };

        mediaRecorder = new MediaRecorder(stream, options);
        setupVisualizer(stream);

        mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
        // mediaRecorder.onstop = saveRecording;
        mediaRecorder.onstop = () => {
            try { saveRecording({ cause: lastStopCause }); }
            finally {
                isRecording = false;   // ‚Üê –≤–∞–∂–Ω–æ!
                isStopping = false;   // ‚Üê –≤–∞–∂–Ω–æ!
            }
            console.debug('[onstop] ‚Üí saveRecording', lastStopCause);
        };

        audioChunks = [];
        // mediaRecorder.start(100); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100–º—Å
        mediaRecorder.start(); // –æ–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π chunk ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è audio/mp4 –≤ Safari


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
        if (recognition) {
            try {
                recognition.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
            }
            initSpeechRecognition(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        }

        userAudioAnswer.innerHTML = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
        if (recognition) {
            try {
                recognition.start();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                initSpeechRecognition();
                recognition.start();
            }
        }

        recordButton.classList.add('recording');
        setRecordStateIcon('pause');    // –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—É–∑—É
        // if (recordIconSquare) recordIconSquare.hidden = true;

        // recordButtonText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
        userAudioAnswer.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
}

async function toggleRecording() {
    if (mediaRecorder?.state === 'recording') {
        stopRecording('manual');
    } else {
        startRecording();
    }
}

function getSupportedMimeType() {
    const types = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC (–ª—É—á—à–∏–π –¥–ª—è Safari)
        'audio/webm; codecs=opus',        // Opus (–¥–ª—è Chrome/Firefox)
        'audio/webm'                      // Fallback
    ];

    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';
}

function saveRecording() {
    console.debug('[saveRecording] adding row‚Ä¶');
    if (!audioChunks.length) {
        console.warn("–ù–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    const blobType = mediaRecorder.mimeType?.includes('mp4')
        ? 'audio/mp4'
        : 'audio/webm';

    const audioBlob = new Blob(audioChunks, { type: blobType });

    // –ü—Ä–∏–≤—è–∂–µ–º ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π¬ª –ø–ª–µ–µ—Ä, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –Ω—É–∂–µ–Ω)
    const audioUrl = URL.createObjectURL(audioBlob);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalText = allSentences?.[currentSentenceIndex]?.text ?? '';
    const spokenText =
        (srLiveText && srLiveText.trim()) ? srLiveText.trim()
            : (recognition && recognition.finalTranscript ? recognition.finalTranscript : '');

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: —Å—á–∏—Ç–∞–µ–º % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const percent = computeMatchPercent(originalText, spokenText);
    console.debug('[row] percent(final) =', percent, ' text =', spokenText);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–∑–∞—á—Ç–µ–Ω–æ¬ª
    const isPassed = percent >= MIN_MATCH_PERCENT;
    if (isPassed) {
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞—á—Ç–µ–Ω–∞
        decreaseAudioCounter();
    }

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –Ω–∞–π–¥—ë–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (0-—è, 1-—è, ...)
    const tbody = attemptsTable?.querySelector('tbody');
    const nextIndex = tbody ? tbody.children.length : 0;

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: —Ä–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫—É
    addUserAudioAttemptRow({
        index: nextIndex,
        text: spokenText || '(—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ)',
        audioBlob,
        matchPercent: percent,
        passed: isPassed
    });

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±–Ω–æ–≤–∏–º ¬´–∑–Ω–∞—á–æ–∫¬ª —É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —á–∏—Å–ª–µ –∑–∞—á—Ç—ë–Ω–Ω—ã—Ö
    updateLessonPassedMark();

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    srLiveText = '';
}

function fallbackComputeMatchPercent(a, b) {
    const norm = s => s
        ?.toLowerCase()
        .replace(/[^\p{L}\p{N}\s]/gu, ' ')
        .split(/\s+/)
        .filter(Boolean) || [];
    const A = norm(a);
    const B = norm(b);
    if (!A.length) return 0;
    const setB = new Set(B);
    const hits = A.filter(w => setB.has(w)).length;
    return hits / A.length; // –¥–æ–ª—è ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª —Å–ª–æ–≤
}

function initSpeechRecognition() {
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        console.error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition');
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = languageCodes[LANGUAGE_ORIGINAL] || 'en-US';
    recognition.interimResults = true;
    recognition.continuous = true; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

    // Web Speech: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∞—á–∫–∞–º–∏ (final + interim)
    recognition.onresult = (event) => {
        // 1) –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–≤–∞–∂–Ω–æ!)
        if (!isRecording) return;

        // 2) –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const res = event.results[i];
            const t = res[0].transcript;
            if (res.isFinal) finalTranscript += t + ' ';
            else interimTranscript += t + ' ';
        }

        // 3) –û–±–Ω–æ–≤–ª—è–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä –∏ last-final
        recognition.finalTranscript = finalTranscript.trim();
        srLiveText = (finalTranscript + ' ' + interimTranscript).trim();

        // 4) –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫)
        userAudioAnswer.innerHTML =
            `<span class="final">${finalTranscript}</span><span class="interim">${interimTranscript}</span>`;

        // 5) –ê–≤—Ç–æ-—Å—Ç–æ–ø –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        const expectedText = allSentences?.[currentSentenceIndex]?.text ?? '';
        const currentPercent = computeMatchPercent(expectedText, srLiveText); // 0..100
        count_percent.textContent = currentPercent;
        // console.debug('[auto-stop check] currentPercent =', currentPercent);

        if (AUTO_STOP_ENABLED && currentPercent >= AUTO_STOP_THRESHOLD) {
            if (!autoStopTimer) {
                autoStopTimer = setTimeout(() => {
                    autoStopTimer = null;
                    stopRecording('auto');       // ‚Üê –∏–¥—ë–º —Ç–µ–º –∂–µ –ø—É—Ç—ë–º, —á—Ç–æ –∏ —Ä—É—á–Ω–æ–π —Å—Ç–æ–ø
                }, AUTO_STOP_STABLE_MS);
            }
        } else if (autoStopTimer) {
            clearTimeout(autoStopTimer);
            autoStopTimer = null;
        }
    };


    recognition.onerror = (event) => {
        const code = event?.error;
        if (code === 'aborted' || code === 'no-speech' || code === 'audio-capture') {
            console.debug('SpeechRecognition notice:', code);
            return; // –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–∞–º–∏
        }
        console.error('SpeechRecognition error:', code);
        userAudioAnswer.textContent = `–û—à–∏–±–∫–∞: ${code}`;
    };

    recognition.onend = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (mediaRecorder?.state !== 'recording') {
            return;
        }

        const original = allSentences[currentSentenceIndex].text.toLowerCase().trim();
        const spoken = recognition.finalTranscript.toLowerCase().trim();

        if (simplifyText(original) === simplifyText(spoken)) {
            updateCheckResult(allSentences[currentSentenceIndex].key, "audio_check", 0);
            disableRecordButton(false);

            const nextBtn = document.getElementById('checkNext');
            if (nextBtn) nextBtn.focus();
        } else {
            console.log("–ì–æ–ª–æ—Å –Ω–µ —Å–æ–≤–ø–∞–ª —Å —Ç–µ–∫—Å—Ç–æ–º.");
            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –∏–¥–µ—Ç
            if (mediaRecorder?.state === 'recording') {
                try {
                    recognition.start();
                } catch (e) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
                }
            }
        }
    };
}

function disableRecordButton(active) {
    const recordBtn = document.getElementById('recordBtn');

    if (recordBtn) {
        if (active) {
            recordBtn.disabled = false;
            recordBtn.innerHTML = '<img src="/static/icons/record0.svg" alt="–ó–∞–ø–∏—Å—å">';
        } else {
            recordBtn.disabled = true;
            recordBtn.innerHTML = '<img src="/static/icons/test1.svg" alt="–ì–∞–ª–æ—á–∫–∞">';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
recordButton.addEventListener('click', toggleRecording);


function setupVisualizer(stream) {
    const canvas = audioVisualizer;               // —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –ø–æ id
    if (!canvas) return;

    const ctx = canvas.getContext('2d');

    // –ú–∞—Å—à—Ç–∞–± –ø–æ–¥ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º—ã–ª–∞
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();
    canvas.width = Math.max(1, Math.floor(rect.width * dpr));
    canvas.height = Math.max(1, Math.floor(rect.height * dpr));
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏
    const AC = window.AudioContext || window.webkitAudioContext;
    if (!vizAC) vizAC = new AC();
    if (vizAC.state === 'suspended') {
        vizAC.resume().catch(() => { });
    }

    // –£–∑–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    vizAnalyser = vizAC.createAnalyser();
    vizAnalyser.fftSize = 256;

    vizSource = vizAC.createMediaStreamSource(stream);
    vizSource.connect(vizAnalyser);

    const bufferLength = vizAnalyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    vizActive = true;

    const draw = () => {
        if (!vizActive) return;
        vizRAF = requestAnimationFrame(draw);

        vizAnalyser.getByteFrequencyData(dataArray);

        const w = canvas.width / dpr;
        const h = canvas.height / dpr;

        ctx.clearRect(0, 0, w, h);

        // —à–∏—Ä–∏–Ω–∞ –∏ –∑–∞–∑–æ—Ä —Å—Ç–æ–ª–±–∏–∫–æ–≤
        const barWidth = Math.max((w / bufferLength) * 1.6, 2);

        // –¶–í–ï–¢ –°–¢–û–õ–ë–ò–ö–û–í ‚Äî –º–µ–Ω—è–π –∑–¥–µ—Å—å (—Ä–∞–Ω—å—à–µ —É —Ç–µ–±—è –±—ã–ª–æ rgb(100, 150, 255))
        ctx.fillStyle = VIS_BAR_COLOR;

        let x = 0;
        for (let i = 0; i < bufferLength; i++) {
            const v = dataArray[i] / 255;
            const barHeight = v * (h - 4);
            ctx.fillRect(x, h - barHeight, barWidth, barHeight);
            x += barWidth + 1;
        }
    };

    draw();
}

function stopVisualization() {
    vizActive = false;

    if (vizRAF) {
        cancelAnimationFrame(vizRAF);
        vizRAF = null;
    }

    // –†–∞–∑—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    try { vizSource && vizSource.disconnect(); } catch (_) { }
    try { vizAnalyser && vizAnalyser.disconnect(); } catch (_) { }
    vizSource = null;
    vizAnalyser = null;

    // –£—Å—ã–ø–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±—ã—Å—Ç—Ä—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç, –±–µ–∑ ¬´—Ç–∏—à–∏–Ω—ã¬ª –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
    if (vizAC && vizAC.state === 'running') {
        vizAC.suspend().catch(() => { });
    }

    // –ü–æ—á–∏—Å—Ç–∏–º –∫–∞–Ω–≤—É –≤–∏–∑—É–∞–ª—å–Ω–æ
    if (audioVisualizer) {
        const ctx = audioVisualizer.getContext('2d');
        ctx.clearRect(0, 0, audioVisualizer.width, audioVisualizer.height);
    }
}

// –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
function renumberAttemptRows(tbody) {
    const rows = tbody.querySelectorAll('tr');
    rows.forEach((tr, i) => {
        const cell = tr.querySelector('td'); // –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞
        if (cell) cell.textContent = String(i); // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å 1: String(i+1)
    });
}

function renumberAttemptRows() {
    const tbody =
        document.querySelector('#attemptsTable tbody') ||
        document.querySelector('table.attempts tbody'); // –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π id/–∫–ª–∞—Å—Å

    if (!tbody) return;

    [...tbody.querySelectorAll('tr')].forEach((tr, i) => {
        const firstCell = tr.querySelector('td'); // –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ "‚Ññ"
        if (firstCell) firstCell.textContent = String(i); // –∏–ª–∏ String(i+1), –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å 1
    });
}

// –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É (0-—è, 1-—è, ...), —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—Å—Ç, –∫–Ω–æ–ø–∫—É play –∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
function addUserAudioAttemptRow({ index, text, audioBlob, matchPercent, passed }) {
    if (!attemptsTable) return;

    const tbody = attemptsTable.querySelector('tbody');
    if (!tbody) return;

    // —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç URL –ø–æ–¥ —ç—Ç–æ –∞—É–¥–∏–æ
    const blobType = audioBlob.type || 'audio/webm';
    const audioUrl = URL.createObjectURL(audioBlob);

    // –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    const tr = document.createElement('tr');

    // ‚Ññ (–Ω—É–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
    const tdIndex = document.createElement('td');
    tdIndex.textContent = index.toString();

    // –¢–µ–∫—Å—Ç
    const tdText = document.createElement('td');
    tdText.textContent = text;

    // –ê—É–¥–∏–æ (–∫–Ω–æ–ø–∫–∞ play + —Å–∫—Ä—ã—Ç—ã–π <audio>)
    const tdAudio = document.createElement('td');
    const playBtn = document.createElement('button');
    playBtn.className = 'table-audio-play'; // —Å—Ç–∏–ª–∏–∑—É–µ—à—å –∫–∞–∫ —Ö–æ—á–µ—à—å
    playBtn.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å';
    playBtn.innerHTML = '<i data-lucide="play"></i>'; // —Ç–≤–æ–π –Ω–∞–±–æ—Ä –∏–∫–æ–Ω–æ–∫

    const rowAudio = document.createElement('audio');
    rowAudio.src = audioUrl;
    rowAudio.preload = 'metadata'; // –±–µ–∑ –ª–∏—à–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    rowAudio.style.display = 'none';
    rowAudio.onerror = () => {
        console.error('Row audio load error:', rowAudio.error);
    };
    rowAudio.load(); // –ø–æ–ø—Ä–æ—Å–∏–º Safari –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    // rowAudio.type = blobType;

    playBtn.addEventListener('click', () => {
        // –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ play/pause
        if (rowAudio.paused) {
            rowAudio.play();
        } else {
            rowAudio.pause();
        }
    });

    tdAudio.appendChild(playBtn);
    tdAudio.appendChild(rowAudio);

    // % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const tdPercent = document.createElement('td');
    tdPercent.textContent = `${matchPercent}%`;

    // –ó–∞—á—Ç–µ–Ω–æ (–≥–∞–ª–æ—á–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ)
    const tdPassed = document.createElement('td');
    tdPassed.textContent = passed ? '‚úì' : '';

    tr.appendChild(tdIndex);
    tr.appendChild(tdText);
    tr.appendChild(tdAudio);
    tr.appendChild(tdPercent);
    tr.appendChild(tdPassed);

    // tbody.appendChild(tr);
    tbody.prepend(tr); // –∏–ª–∏ 
    renumberAttemptRows(tbody); // –ø–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏

    // –û–±–Ω–æ–≤–∏–º –∏–∫–æ–Ω–∫–∏ Lucide –Ω–∞ —Å–≤–µ–∂–µ—Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º, –∫–æ–≥–¥–∞ lesson —Å–¥–∞–Ω
function updateLessonPassedMark() {
    const tbody =
        document.querySelector('#attemptsTable tbody') ||
        document.querySelector('table.attempts tbody');
    if (!tbody) return;

    const sentence = allSentences[currentSentenceIndex];

    const micButton = document.getElementById('recordButton');
    if (!micButton) return;

    let mark = document.getElementById('recordPassedMark');
    if (!mark) {
        mark = document.createElement('span');
        mark.id = 'recordPassedMark';
        mark.className = 'passed-mark'; // —Å—Ç–∏–ª–∏–∑—É–µ—à—å –≤ CSS
        mark.style.marginLeft = '8px';
        micButton.insertAdjacentElement('afterend', mark);
    }


    // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –ø–æ—Ä–æ–≥ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–≤—É (–ø–æ—Å—Ç–∞–≤–∏–ª "A" –∫–∞–∫ –º–∞—Ä–∫–µ—Ä, —Ç—ã –∑–∞–º–µ–Ω–∏—à—å)
    // if (passedAudioCount >= REQUIRED_PASSED_COUNT) {
    //     // mark.textContent = 'A';
    //     ++currentDictation.phrases_corrected_audio;
    //     updateRoundStats('', '', '', currentDictation.phrases_corrected_audio);
    //     mark.style.display = 'inline';
    // } else {
    //     mark.textContent = '';
    //     mark.style.display = 'none';
    // }

    if (sentence.audio_count > 0) {
        mark.textContent = '';
        mark.style.display = 'none';
    }


}

// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–û–ù–ï–¶ =====


// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ ===== 
function initializeDictation() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
    startModal.style.display = 'flex';
    confirmStartBtn.setAttribute('aria-disabled', 'false');
    confirmStartBtn.focus();

    initTabloSentenceCounter();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    const firstSentence = allSentences[0];
    audio.src = firstSentence.audio;
    audio_tr.src = firstSentence.audio_tr;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    const checkReady = setInterval(() => {
        if (audio.readyState > 3 && audio_tr.readyState > 3) {
            clearInterval(checkReady);
            isAudioLoaded = true;
            confirmStartBtn.disabled = false;
        }
    }, 100);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function startNewGame() {
    if (!isAudioLoaded) return;

    // –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫
    startTimer();

    // –ø–µ—Ä—à–µ –∫–æ–ª–æ
    circle_number = 1;

    // –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—Ä—É–≥ –≤—Å–µ–º –ù–ï perfect, –æ–±–Ω—É–ª—è–µ–º corrected                                   // [+]
    allSentences.forEach(s => {                                                             // [+]
        s.circle = 1;
        s.perfect = 0;
        s.corrected = 0;
        s.audio_status = 0;
        s.audio_count = REQUIRED_PASSED_COUNT;
    });


    if (typeof syncCircleButton === 'function') syncCircleButton();
    else if (typeof updateStats === 'function') updateStats();

    currentSentenceIndex = 0;
    showCurrentSentence(0);

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å OTO –∫–∞–∫ –∏ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å
    playMultipleAudios(playSequenceStart); // "oto"

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    inputField.focus();
}


confirmStartBtn.addEventListener('click', () => {

    // –ó–∞—á–∏–Ω—è—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    startModal.style.display = 'none';

    startNewGame();
});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function initializeSentences() {                                                // [~]
    allSentences = allSentences.map(s => ({                                       // [~]
        ...s,                                                                       // [~]
        // —É–±–∏—Ä–∞–µ–º –Ω–∞—Å–ª–µ–¥–∏–µ: text_check / audio_check –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã          // [~]
        perfect: s.perfect ?? 0,                                              // [+]
        corrected: 0,                                                              // [+]
        audio_status: s.audio_status ?? 0,                                              // [+]
        audio_count: typeof s.audio_count === 'number' ? s.audio_count : REQUIRED_PASSED_COUNT, // [+]
        circle: s.circle ?? 0,                                              // [+]
    }));                                                                          // [+]
}


function updateCheckResult(key, type, value) {
    const sentence = allSentences.find(s => s.key === key);
    if (sentence) {
        sentence[type] = value;
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function clearAttemptsTable() {
    if (!attemptsTable) return;

    const tbody = attemptsTable.querySelector('tbody');
    if (!tbody) return;

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞—É–¥–∏–æ-—Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
    const audioElements = tbody.querySelectorAll('audio');
    audioElements.forEach(audio => {
        URL.revokeObjectURL(audio.src); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        audio.src = ''; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    });

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
    if (tbody.children.length === 0) {
        attemptsTable.style.display = 'none';
    }
}

function showCurrentSentence(showIndex) {
    currentSentenceIndex = showIndex;
    updateTabloSentenceCounter(showIndex);
    const sentence = allSentences[currentSentenceIndex];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞
    userAudioAnswer.innerHTML = '';

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    disableCheckButton(2); // –∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
    disableRecordButton(true);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ
    audio.src = sentence.audio;
    audio_tr.src = sentence.audio_tr;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
    setRecordStateIcon('square');

    // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞
    const recordButton = document.getElementById('recordButton');
    if (recordButton) {
        setRecordStateIcon('square');
        if (sentence.audio_count === 0) {
            recordButton.disabled = true;
            recordButton.classList.add('disabled');
        } else {
            recordButton.disabled = false;
            recordButton.classList.remove('disabled');
        }
    }


    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    updateLessonPassedMark();

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    console.log("üëÄ (1) ------------ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ");
    clearAttemptsTable();

    console.log("üëÄ (2) ------------ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∞–º");
    audioVisualizer.style.display = 'block';
    count_percent.style.display = 'block';
    userAudioAnswer.style.display = 'block—ã';

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ ===== 
    document.getElementById("correctAnswer").innerHTML = sentence.text;
    document.getElementById("correctAnswer").style.display = "none";
    document.getElementById("translation").innerHTML = sentence.translation;
    document.getElementById("translation").style.display = "none";


    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    inputField.innerHTML = "";
    inputField.contentEditable = "true"; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    setTimeout(() => {
        inputField.focus();
        // console.log("üëÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ–∫—É—Å –≤ inputField");
    }, 0);
    inputField.focus();
    textAttemptCount = 0;


    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    let audioLoaded = 0;
    const totalAudio = 2; // –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥


    function checkAndPlay() {
        audioLoaded++;
        if (audioLoaded === totalAudio) {
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => playMultipleAudios(playSequenceStart), 300);
        }
    }

    audio.oncanplaythrough = checkAndPlay;
    audio_tr.oncanplaythrough = checkAndPlay;

    // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (audio.readyState > 3) checkAndPlay();
    if (audio_tr.readyState > 3) checkAndPlay();
}


// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function nextSentence() {
    const total = allSentences.length;
    let nextIndex = currentSentenceIndex + 1;

    while (nextIndex < total) {
        const sentence = allSentences[nextIndex];
        if (isPendingInCurrentCircle(sentence)) {
            showCurrentSentence(nextIndex);//—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            return;
        }
        nextIndex++;
    }
    checkIfAllCompleted();
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ª–∏–±–æ –≤ –∫–æ–Ω—Ü–µ, –ª–∏–±–æ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–æ–ø–µ—Ä–¥–Ω—å–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function previousSentence() {
    let prevIndex = currentSentenceIndex - 1;

    while (prevIndex >= 0) {
        const sentence = allSentences[prevIndex];
        if (isPendingInCurrentCircle(sentence)) {
            showCurrentSentence(prevIndex);
            return;
        }
    }

    prevIndex--;
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function clearText() {
    inputField.innerHTML = '';
    // correctAnswerDiv.innerHTML = '';
    // translationDiv.style.display = 'none';
    // audio.currentTime = 0;
    // audio.play();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
function recordAudio() {

}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
async function loadAudio() {
    // –í —Ñ—É–Ω–∫—Ü–∏–∏ loadAudio –¥–æ–±–∞–≤—å—Ç–µ:
    // console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ:', {
    //     original: audio.src,
    //     translation: audio_tr.src,
    //     originalReadyState: audio.readyState,
    //     translationReadyState: audio_tr.readyState
    // });
    try {
        audio.src = allSentences[currentSentenceIndex].audio;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }

    try {
        audio_tr.src = sentences[currentSentenceIndex].audio_tr;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio_tr.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ -------------------------------------------------------
document.addEventListener("DOMContentLoaded", function () {
    initializeSentences();
    initializeDictation();
    loadLanguageCodes();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
    //console.group("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤:");
    const formatsToCheck = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC
        'audio/webm; codecs=opus',       // Opus
        'audio/webm',                    // Fallback WebM
        'audio/wav'                      // WAV (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    ];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
    // console.log("–ë—Ä–∞—É–∑–µ—Ä:", navigator.userAgent);
    // console.log("–Ø–∑—ã–∫–æ–≤—ã–µ –∫–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", languageCodes);

    // --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫—Ä—É–≥–∞: ALL ‚Üî –Ω–æ–º–µ—Ä ---
    (function initCircleToggle() {
        const circleBtn = document.querySelector('.stat-btn.circle');
        if (!circleBtn) return;

        // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ HTML –≤–¥—Ä—É–≥ —Å disabled ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º
        if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');

        circleBtn.addEventListener('click', () => {
            showAllStats = !showAllStats;   // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            syncCircleButton();             // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã
        });

        syncCircleButton();               // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    })();

    setRecordStateIcon('square');  // ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ‚Äú–∫–≤–∞–¥—Ä–∞—Ç‚Äù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
});

inputField.addEventListener('input', function () {
    const plainText = inputField.innerText;
    if (inputField.innerHTML !== plainText) {
        const cursorPos = saveCursorPosition(inputField);
        inputField.innerHTML = plainText;
        restoreCursorPosition(inputField, cursorPos);
    }
});


// -----------–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º -----------------------------------------
function simplifyText(text) {
    return text
        .toLowerCase()
        // –£–¥–∞–ª—è–µ–º –í–°–ï –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, –∫–∞–≤—ã—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[\u0027\u2018\u2019\u0060\u00B4'‚Äò‚Äô`¬¥]/g, "")
        // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[-.,!‚Äî?;:‚Äî"¬´¬ª()]/g, "")
        .replace(/\s+/g, " ")
        .trim()
        .split(" ");
}

function findFirstErrorIndex(word1, word2) {
    const len = Math.min(word1.length, word2.length);
    for (let k = 0; k < len; k++) {
        if (word1[k] !== word2[k]) return k;
    }
    return len;
}

function renderResult(original, userVerified) {

    const correctLine = [];
    let foundError = false;
    let originalIndex = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            correctLine.push(`<span class="word-correct">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "missing") {
            correctLine.push(`<span class="word-missing">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "error") {
            const before = word.correctText.slice(0, word.errorIndex);
            const errorLetter = word.correctText[word.errorIndex] || "";
            const after = word.correctText.slice(word.errorIndex + 1);

            const correctHTML =
                `<span class="correct-line-word">` +
                `${before}<span class="correct-line-letter">${errorLetter}</span>${after}` +
                `</span> `;

            correctLine.push(correctHTML);
            originalIndex++;
            foundError = true;
        } else if (word.type === "raw_user") {
            // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        }
    });

    if (foundError) {
        const remainingWords = original.trim().split(/\s+/).slice(originalIndex);
        remainingWords.forEach(word => {
            correctLine.push(`<span>${word}</span> `);
        });
    }
    else {
        checkNextDiv.focus();
        // recordButton.focus();
    }

    correctAnswerDiv.innerHTML = correctLine.join("");
}

function renderToEditable(userVerified) {
    let html = "";
    let errorFound = false;
    let totalOffset = 0;
    let errorOffset = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "missing") {
            html += `<span class="word-missing">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "error") {
            const before = word.userText.slice(0, word.errorIndex);
            const wrongLetter = word.userText[word.errorIndex] || "";
            const after = word.userText.slice(word.errorIndex + 1);

            html += `<span class="word-error">${before}<span class="letter-error">${wrongLetter}</span>${after} </span>`;

            if (!errorFound) {
                errorOffset = totalOffset + before.length + 1;
                errorFound = true;
            }
            totalOffset += word.userText.length + 1;
        } else if (word.type === "raw_user") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        }
    });

    inputField.innerHTML = html.trim();
    setCursorAtOffset(inputField, errorFound ? errorOffset : totalOffset);
}

function setCursorAtOffset(root, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            if (currentOffset + node.length >= offset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            } else {
                currentOffset += node.length;
            }
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(root);
}

function saveCursorPosition(containerEl) {
    const sel = window.getSelection();
    if (!sel.rangeCount) return null;
    const range = sel.getRangeAt(0);
    const preRange = range.cloneRange();
    preRange.selectNodeContents(containerEl);
    preRange.setEnd(range.startContainer, range.startOffset);
    return preRange.toString().length;
}

function restoreCursorPosition(containerEl, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            const nextOffset = currentOffset + node.length;
            if (offset <= nextOffset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            }
            currentOffset = nextOffset;
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(containerEl);
}

function playMultipleAudios(sequence) {
    const steps = sequence.split(''); // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "oto" ‚Üí ["o", "t", "o"])
    let index = 0;

    function playNext() {
        if (index >= steps.length) return;

        const currentAudio = steps[index] === 'o' ? audio : audio_tr; // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        if (!currentAudio) {
            console.warn('–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —à–∞–≥–∞:', steps[index]);
            index++;
            return playNext();
        }

        currentAudio.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º
        currentAudio.play()
            .then(() => {
                currentAudio.onended = () => {
                    index++;
                    playNext(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                };
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                index++;
                playNext(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            });
    }

    playNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
}


function disableCheckButton(active) {
    // console.log("üëÄ ----------------disableCheckButton-----------------active = " + active);
    const checkBtn = document.getElementById('checkBtn');
    const userInput = document.getElementById('userInput');
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    checkBtn.classList.value = '';
    switch (active) {
        case 2:
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<i data-lucide="check"></i>';
            // playBtn.innerHTML = '<i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "false";
            checkBtn.classList.add('button-color-yellow');
            break;

        case 0:
            checkBtn.disabled = false;
            checkBtn.innerHTML = '<i data-lucide="star"></i> <i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-mint');
            break;

        case 1:
            checkBtn.disabled = false;
            checkBtn.innerHTML = '<i data-lucide="star-half"></i><i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-lightgreen');
            break;
    }
    lucide.createIcons();
}

function check(original, userInput, currentKey) {
    const simplOriginal = simplifyText(original);
    const simplUser = simplifyText(userInput);

    const originalWords = original.trim().split(/\s+/);
    const userWords = userInput.trim().split(/\s+/);

    const userVerified = [];
    let i = 0, j = 0;
    let foundError = false;

    while (i < simplOriginal.length || j < simplUser.length) {
        const wordOrig = simplOriginal[i];
        const wordUser = simplUser[j];
        const fullWordOrig = originalWords[i] || "";
        const fullWordUser = userWords[j] || "";

        if (foundError) {
            if (j < userWords.length) {
                userVerified.push({ type: "raw_user", text: userWords[j] });
                j++;
            } else {
                break;
            }
        } else if (wordOrig === wordUser) {
            userVerified.push({ type: "correct", text: fullWordOrig });
            i++; j++;
        } else if (simplOriginal[i + 1] === wordUser) {
            userVerified.push({ type: "missing", text: fullWordOrig });
            i++;
        } else {
            const errorIndex = findFirstErrorIndex(wordOrig, wordUser);
            userVerified.push({
                type: "error",
                userText: fullWordUser,
                correctText: fullWordOrig,
                errorIndex: errorIndex
            });
            i++; j++;
            foundError = true;
        }
    }

    // === ==
    if (!foundError) {

        const s = allSentences[currentSentenceIndex];
        if (textAttemptCount === 0) {
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–æ –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏
            // updateCheckResult(currentKey, "text_check", 0);
            s.perfect = 1;
            s.corrected = 0;
            // allSentences[currentSentenceIndex].perfect = 1;
            //     allSentences[currentSentenceIndex].corrected = 0;
            // updateRoundStats(currentDictation.phrases_perfect);
            // currentDictation.phrases_perfect++; // –¥–æ–¥–∞–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–¥–µ–∞–ª—å–Ω–∏—Ö
            // count_perfect.textContent = currentDictation.phrases_perfect;
            disableCheckButton(0);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–π –∑–≤–µ–∑–¥—É
            // —Ç—É—Ç –Ω–∞–¥–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        } else {
            if (s.perfect !== 1) s.corrected = 1;
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–ª–µ –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–±
            // updateCheckResult(currentKey, "text_check", textAttemptCount);
            // currentDictation.phrases_corrected++; // –¥–æ–¥–∞–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–¥ —è–∫–∏–º–∏ —â–µ –º–æ–∂–Ω–∞ –ø–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏
            // updateRoundStats('', currentDictation.phrases_corrected);
            disableCheckButton(1);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–ª –∑–≤–µ–∑–¥—ã –Ω–∞ –Ω–µ–π

            // —Ç—É—Ç –Ω–∞–¥–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        }

        // allSentences[currentSentenceIndex].text_check = textAttemptCount === 0 ? 0 : textAttemptCount;
        // updateCurrentButtonStatus(currentSentenceIndex, allSentences[currentSentenceIndex]);
        // updateTabloSentenceCounter(currentSentenceIndex);
        // disableCheckButton(false);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É

        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–æ –∏ —à–∞–ø–∫—É:
        if (typeof updateTabloSentenceCounter === 'function') updateTabloSentenceCounter(currentSentenceIndex);
        if (typeof syncCircleButton === 'function') syncCircleButton();
        else if (typeof updateStatsUIFor === 'function') updateStatsUIFor(circle_number);

        // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ–∫—É—Å
        recordButton.focus();
    } else {
        // –û—à–∏–±–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        textAttemptCount++;
    }

    return userVerified;
}

function checkText() {
    const original = allSentences[currentSentenceIndex].text;
    const translation = allSentences[currentSentenceIndex].translation;
    const userInput = inputField.innerText;
    const currentKey = allSentences[currentSentenceIndex].key;
    const result = check(original, userInput, currentKey);
    const currentSentence = allSentences[currentSentenceIndex];

    renderToEditable(result);
    renderResult(original, result);

    const allCorrect = result.every(word => word.type === "correct");

    // // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
    // if (first_pass_new_sentences) {
    //     first_pass_new_sentences = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    //     currentSentence.completed_correctly = allCorrect;
    // }

    correctAnswerDiv.style.display = "block";
    if (allCorrect) {
        translationDiv.style.display = "block";
        translationDiv.textContent = translation;
        setTimeout(() => playMultipleAudios(successSequence), 500); // "ot" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    } else {
        translationDiv.style.display = "none";
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è inputField
inputField.addEventListener('keydown', function (event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        checkText();
        return;
    }
});

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ
document.addEventListener('keydown', function (event) {
    if (event.ctrlKey) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ctrl –Ω–∞–∂–∞—Ç
        switch (event.key) {
            case '1':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                const audio = document.getElementById('audio');
                if (audio) audio.play();
                break;

            case '2':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
                const audio_tr = document.getElementById('audio_tr');
                if (audio_tr) audio_tr.play();
                break;

            case '4':
                // –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                // event.preventDefault();
                nextSentence();
                break;

            case '3':
                // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                // event.preventDefault();
                previousSentence();
                break;
        }
    }


});


document.getElementById("userInput").addEventListener("input", function () {
    if (document.getElementById("correctAnswer").style.display != "none") {
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å O, —Ç—É—Ç –º–æ–∂–µ—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç
        playMultipleAudios(playSequenceTypo); // "t"

        document.getElementById("correctAnswer").style.display = "none";
        document.getElementById("translation").style.display = "none";
    }
});

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Å–ª–æ–≤ —á–µ—Ä–µ–∑ LCS (Longest Common Subsequence) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0..100)
function computeMatchPercent(originalText, spokenText) {
    // simplifyText —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å: –æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
    const a = simplifyText(originalText);
    const b = simplifyText(spokenText);

    if (a.length === 0 && b.length === 0) return 100;
    if (a.length === 0 || b.length === 0) return 0;

    // –î–ü-—Ç–∞–±–ª–∏—Ü–∞ LCS: (a.length+1) x (b.length+1)
    const dp = Array.from({ length: a.length + 1 }, () => new Array(b.length + 1).fill(0));
    for (let i = 1; i <= a.length; i++) {
        for (let j = 1; j <= b.length; j++) {
            if (a[i - 1] === b[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    const lcs = dp[a.length][b.length];
    const percent = (2 * lcs) / (a.length + b.length) * 100;
    return Math.round(percent);
}

// –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–∫—ñ–Ω—Ü—ñ –¥–∏–∫—Ç–∞–Ω—Ç—É -----------------------------------
// (1) –ì—Ä–∞–π–º–æ –¥–∞–ª—ñ –∑ –ø–æ—á–∞—Ç–∫—É 
function clickBtnRestartAll() {

    // –ó–∞—á–∏–Ω—è—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    startModal.style.display = 'none';

    startNewGame();
}

// (2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"
function clickBtnRestartErrors() {
    const cur = circle_number;

    // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –±—ã–ª –Ω–∞ —ç—Ç–æ–º –∫—Ä—É–≥–µ, –Ω–µ perfect –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ corrected
    const toRepeat = allSentences.filter(s =>
        s.circle === cur && s.perfect !== 1 && s.corrected === 1
    );

    if (toRepeat.length === 0) {
        alert("–ù–∞ —ç—Ç–æ–º –∫—Ä—É–≥–µ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏."); // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å alert, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
        document.getElementById("finishModal").style.display = "none";
        return;
    }

    // –ù–æ–≤—ã–π –∫—Ä—É–≥
    circle_number += 1;

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ ¬´–æ—à–∏–±–æ—á–Ω—ã–µ¬ª —Å —ç—Ç–æ–≥–æ –∫—Ä—É–≥–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π –∏ –æ–±–Ω—É–ª—è–µ–º corrected
    allSentences.forEach(s => {
        if (s.circle === cur && s.perfect !== 1 && s.corrected === 1) {
            s.circle = circle_number;
            s.corrected = 0;
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫—Ä—É–≥–∞ –∏ —Å—á—ë—Ç—á–∏–∫–∏
    if (typeof syncCircleButton === 'function') syncCircleButton();
    else if (typeof updateStatsUIFor === 'function') updateStatsUIFor(circle_number);

    const idx = allSentences.findIndex(isPendingInCurrentCircle);
    currentSentenceIndex = idx >= 0 ? idx : 0;
    showCurrentSentence(currentSentenceIndex);

    // –ü—Ä—è—á–µ–º –º–æ–¥–∞–ª–∫—É
    document.getElementById("finishModal").style.display = "none";
}

// (3) –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
function clickBtnBackToList() {
    window.location.href = "/"; // –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
}



//  =============== –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ ===============================================
document.querySelectorAll(".custom-audio-player").forEach(player => {
    const audio = player.querySelector("audio.audio-element");
    const playBtn = player.querySelector(".play-btn");
    const progressBar = player.querySelector(".progress-bar");
    const currentTimeElem = player.querySelector(".current-time");
    const totalTimeElem = player.querySelector(".total-time");
    // const volumeWrapper = player.querySelector(".volume-wrapperÔ¨Å");
    const volumeSlider = player.querySelector('.volume-slider');
    const muteBtn = player.querySelector('.mute-btn');
    // const speedSelect = player.querySelector(".speed-select");


    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    const speedSelectWrapper = player.querySelector('.custom-speed-select');
    const speedSelectBtn = speedSelectWrapper?.querySelector('.speed-select-button');
    const speedSelected = speedSelectWrapper?.querySelector('.speed-selected');
    const speedOptions = speedSelectWrapper?.querySelector('.speed-options');
    const nativeSpeedSelect = player.querySelector(".speed-select");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ ------------------------------------------------------
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const updatePlaybackSpeed = (speed) => {
        audio.playbackRate = parseFloat(speed);
        if (speedSelected) speedSelected.textContent = `${speed}x`;
        if (nativeSpeedSelect) nativeSpeedSelect.value = speed;
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (speedSelectWrapper) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        speedSelectBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            speedSelectWrapper.classList.toggle('active');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speedOptions.querySelectorAll('li').forEach(option => {
            option.addEventListener('click', () => {
                const speed = option.dataset.value;
                updatePlaybackSpeed(speed);
                speedSelectWrapper.classList.remove('active');
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const initialSpeed = nativeSpeedSelect?.value || '1.0';
        updatePlaybackSpeed(initialSpeed);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º select
    if (nativeSpeedSelect) {
        nativeSpeedSelect.addEventListener('change', () => {
            updatePlaybackSpeed(nativeSpeedSelect.value);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ------------------------------------------------------
    audio.volume = 0.7; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
    volumeSlider.value = audio.volume;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
    playBtn.addEventListener("click", () => {
        if (audio.paused) {
            audio.play();
            //playBtn.textContent = "‚è∏";
            playBtn.innerHTML = '<i data-lucide="pause"></i>';
        } else {
            audio.pause();
            playBtn.innerHTML = '<i data-lucide="play"></i>';
            // playBtn.textContent = "‚ñ∂";
        }
        lucide.createIcons();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    volumeSlider.addEventListener('input', () => {
        audio.volume = volumeSlider.value;
        updateVolumeIcon(audio.volume, muteBtn);
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ mute
    muteBtn.addEventListener('click', () => {
        if (audio.volume > 0) {
            audio.volume = 0;
            volumeSlider.value = 0;
        } else {
            audio.volume = volumeSlider.dataset.lastVolume || 0.7;
            volumeSlider.value = audio.volume;
        }
        updateVolumeIcon(audio.volume, muteBtn);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ mute
    volumeSlider.addEventListener('mousedown', () => {
        if (audio.volume > 0) {
            volumeSlider.dataset.lastVolume = audio.volume;
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    audio.addEventListener("timeupdate", () => {
        const current = audio.currentTime;
        const duration = audio.duration;
        progressBar.value = (current / duration) * 100 || 0;
        currentTimeElem.textContent = formatTime(current);
        totalTimeElem.textContent = formatTime(duration || 0);
    });

    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progressBar.addEventListener("input", () => {
        audio.currentTime = (progressBar.value / 100) * audio.duration;
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateVolumeIcon(audio.volume, muteBtn);


});


// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
document.addEventListener('click', (e) => {
    if (!e.target.closest('.custom-speed-select')) {
        document.querySelectorAll('.custom-speed-select').forEach(select => {
            select.classList.remove('active');
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function updateVolumeIcon(volume, muteBtn) {
    let icon;
    if (volume === 0) {
        icon = 'volume-x';
    } else if (volume < 0.3) {
        icon = 'volume';
    } else if (volume < 0.6) {
        icon = 'volume-1';
    } else {
        icon = 'volume-2';
    }
    muteBtn.innerHTML = `<i data-lucide="${icon}"></i>`;
    lucide.createIcons();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(sec) {
    const m = Math.floor(sec / 60);
    const s = Math.floor(sec % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
}
// console.log("üëÄ renderSentenceCounter –≤—ã–∑–≤–∞–Ω–∞");
// checkNextDiv.focus();
// recordButton.focus();
const circleBtn = document.getElementById('btn-circle-number');
const inputField = document.getElementById('userInput');
const checkNextDiv = document.getElementById('checkNext');
const checkPreviosDiv = document.getElementById('checkPrevios');
const correctAnswerDiv = document.getElementById('correctAnswer');
const translationDiv = document.getElementById('translation');
const audio = document.getElementById('audio');
const audio_tr = document.getElementById('audio_tr');

const playSequenceStart = "oto";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
const playSequenceTypo = "o";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
const successSequence = "ot"; // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "o" –∏–ª–∏ "to")

/**
 * @typedef {Object} Sentence
 * @property {number} serial_number
 * @property {string} key
 * @property {string} text_original
 * @property {string} text_translation
 * @property {string} audio_original
 * @property {string} audio_translation
 * @property {number} text_check        // -1 –Ω–µ –Ω–∞–±—Ä–∞–Ω–æ; 0 —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞; 1,2,.. —Å –æ—à–∏–±–∫–∞–º–∏ (–ø–ª–∞–Ω–∏—Ä—É—é —É–±—Ä–∞—Ç—å -- —Å–ª–∏—à–∫–æ–º –ú–£–¢–ù–û)
 * @property {number} audio_check       // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å (—É–±–µ—Ä—É)
 * @property {number} circle            // 1,2,.. –∫—Ä—É–≥–∏ –ø–æ –¥–∏–∫—Ç–∞–Ω—Ç—É (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º "—Å –Ω–∞—á–∞–ª–∞" –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Ö–∞ –≤–µ—Ä–Ω–æ)
 * @property {0|1}    perfect           // 1 ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
 * @property {0|1}    corrected         // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ
 * @property {0|1}    audio_status      // 1 ‚Äî –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∏–∫—Ç–æ–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã
 * @property {number} audio_count       // —Å–∫–æ–ª—å–∫–æ –¥–∏–∫—Ç–æ–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å 
 */

/** @type {Sentence[]} */

const rawJson = document.getElementById("sentences-data").textContent;
let allSentences = JSON.parse(rawJson); // –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ (—Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π)

// —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∏–∑ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω–∏–π –ø–æ —á–µ–∫–∞—É—Ç—É 
// (—É–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω allSentences –ø–æ —Ä–∞–∑–º–µ—Ä—É)
let selectedSentences = [];
let currentSentenceIndex = 0;// –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ —á–∞–∫–∞—É—Ç—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
let currentSentence = 0;   // —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ allSentences —Å kay = selectedSentences—Ö[currentSentenceIndex]

// –∏–Ω–¥–µ–∫—Å—ã 9—Ç–∏ –∫–Ω–æ–ø–æ–∫  (
// —É–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω selectedSentences –ø–æ —Ä–∞–∑–º–µ—Ä—É, 
// –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ id="sentenceCounter">)
let counterTabloBtn; // –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let counterTabloIndex = 0; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let counterTabloIndex_old = 0; // –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let buttonsTablo = [];

// –Ω–æ–º–µ—Ä –∫—Ä—É–≥–∞
let circle_number = 1;

const START_TABLE_ID = 'sentences-table';
const FINISH_TABLE_ID = 'finish_modal_sentences_table';

let currentDictation = {
    id: '', // ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç—É
    language_original: '',
    language_translation: '',
    dictationStartTime: null, // –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É
    dictationTimerInterval: null // —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
let isAudioLoaded = false;
const startModal = document.getElementById('startModal');
const confirmStartBtn = document.getElementById('confirmStartBtn');

// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
const count_perfect = document.getElementById('count_perfect');
const count_corrected = document.getElementById('count_corrected');
const count_audio = document.getElementById('count_audio');
const count_total = document.getElementById('count_total');

const openUserAudioModalBtn = document.getElementById('openUserAudioModalBtn');
const userAudioModal = document.getElementById('userAudioModal');
const closeUserAudioBtn = document.querySelector('.close-user-audio');
const userCancelBtn = document.getElementById('userCancelButton');
const userConfirmBtn = document.getElementById('userConfirmButton');
const userRecordBtn = document.getElementById('userRecordButton');
const userAudioStatusText = document.getElementById('userAudioStatusText');
// const userAudioTranscript = document.getElementById('userAudioTranscript');
const userAudioVisualizer = document.getElementById('userAudioVisualizer');

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏–æ =====
// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
// –ñ–∏–≤–æ–π –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (final + interim)
const count_percent = document.getElementById('count_percent');
const recordButton = document.getElementById('recordButton');
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
recordButton.addEventListener('click', toggleRecording);

const recordStateIcon = document.getElementById('recordStateIcon'); // –∑–∞–ø–∏—Å—å/–ø–∞—É–∑–∞
const AUTO_STOP_ENABLED = true;
const AUTO_STOP_THRESHOLD = 80;     // 95%
const AUTO_STOP_STABLE_MS = 400;      // –¥–µ—Ä–∂–∏–º –ø–æ—Ä–æ–≥ ‚â•95% —Ö–æ—Ç—è –±—ã 0.4s
let srLiveText = '';
let isRecording = false;     // –∏–¥—ë—Ç –ª–∏ –∑–∞–ø–∏—Å—å (–¥–ª—è onresult)
let autoStopTimer = null;
let isStopping = false;        // –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ç–æ–ø–∞ (–∞–≤—Ç–æ + –∫–ª–∏–∫)
let lastStopCause = 'manual';  // 'manual' | 'auto'
const VIS_BAR_COLOR =
    getComputedStyle(document.documentElement)
        .getPropertyValue('--color-button-text-purple')
        .trim() || '#8BBFFF';



const audioVisualizer = document.getElementById('audioVisualizer');
// === –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–±—â–∏–µ —Å—Å—ã–ª–∫–∏) ===
let vizAC = null;        // AudioContext
let vizAnalyser = null;  // AnalyserNode
let vizSource = null;    // MediaStreamAudioSourceNode
let vizRAF = null;       // requestAnimationFrame id
let vizActive = false;   // —Ñ–ª–∞–≥ "—Ä–∏—Å—É–µ–º —Å–µ–π—á–∞—Å"

// const userAudioElement = document.getElementById('audio_user');
// const userAudioAnswer = document.getElementById('userAudioAnswer');

let mediaRecorder, audioChunks = [];
let languageCodes = {};
let recognition = null;
let textAttemptCount = 0;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞ ===
const MIN_MATCH_PERCENT = 80;      // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É
const REQUIRED_PASSED_COUNT = 3;   // —Å–∫–æ–ª—å–∫–æ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–¥–∞—á–∏ —É—Ä–æ–∫–∞

// –°–ª—É–∂–µ–±–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
let passedAudioCount = 0;

let userAudioElement = null;        // –æ–¥–∏–Ω –æ–±—â–∏–π Audio()
let userAudioObjectUrl = null;      // —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏
let userPlayInited = false;         // —á—Ç–æ–±—ã –Ω–µ –≤–µ—à–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ

// --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∏–∫—Ç–∞–Ω—Ç–æ–º –≤ –º–æ–¥–∞–ª—å–≥–æ–º –æ–∫–Ω–µ -----------------------------------------------
// ====== –ü—Ä–æ—Å—Ç—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ======
const qs = (sel, root = document) => root.querySelector(sel);
const qsa = (sel, root = document) => Array.from(root.querySelectorAll(sel));

/**
 * –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:
 * - allSentences: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏–∑ —Ç–≤–æ–µ–≥–æ JSON/—Å–æ—Å—Ç–æ—è–Ω–∏—è),
 *   –≥–¥–µ —É –∫–∞–∂–¥–æ–≥–æ { key, text, ... } –∏ –ª—é–±—ã–µ —Ç–≤–æ–∏ –ø–æ–ª—è (text_check, audio_check –∏ —Ç.–¥.)
 * - list_Sentences: –ú–ê–°–°–ò–í –°–¢–†–û–ö –∫–ª—é—á–µ–π (['000','001',...]) ‚Äî –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
 *
 * –í —ç—Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç –º—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ–ø–∏—à–µ–º:
 * - serial_number: –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ list_Sentences (1..N)
 * - circle: –Ω–æ–º–µ—Ä –∫—Ä—É–≥–∞ currentDictation.circle_number (–µ—Å–ª–∏ –æ–Ω —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)
 * - audio_count(audio_required): —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞–¥–æ (–≤–æ–∑—å–º—ë–º –∏–∑ currentDictation.audio_required || 1)
 */

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø. –ø–æ–ª–µ–π
function ensureField(obj, field, fallback) {
    if (obj[field] === undefined) obj[field] = fallback;
    return obj[field];
}

// –¢–≤–æ–π –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ç–µ–±—è —É–∂–µ –≥–¥–µ-—Ç–æ):
// let allSentences = [...]; // <- –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
// let currentDictation = { circle_number: 1, audio_required: 1, ... }; // <- —Ç–æ–∂–µ —É–∂–µ –µ—Å—Ç—å
// let circle_number
// const REQUIRED_PASSED_COUNT = 3; (audio_required)

// –ë—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –∫–ª—é—á—É:
function makeByKeyMap(arr) {
    const m = new Map();
    arr.forEach(s => m.set(s.key, s));
    return m;
}

// ====== 2.1 –†–µ–Ω–¥–µ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ======
/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * @param {Object} opts
 * @param {string} opts.tableId - id —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 'sentences-table')
 * @param {Array}  opts.sentences - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ–±—ã—á–Ω–æ allSentences)
 * @param {"start"|"results"} opts.mode - —Ä–µ–∂–∏–º:
 *    "start"   => —á–µ–∫–±–æ–∫—Å—ã –í–°–ï –≤–∫–ª—é—á–µ–Ω—ã
 *    "results" => —á–µ–∫–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ù–ï –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—É—é –∑–≤–µ–∑–¥—É
 *                 (–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî —Å–º. shouldBeCheckedInResults)
 */
function renderSelectionTable(containerId, showResults = false) {
    const table = document.querySelector(`#${containerId} tbody`);
    if (!table) return;

    table.innerHTML = '';

    allSentences.forEach((s, index) => {
        const row = document.createElement('tr');

        let unavailable = false;
        if (s.perfect + s.audio_status === 2) {
            // –∑–Ω–∞—á–∏—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫—Ä—É–≥–µ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å–¥–µ–ª–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º
            // –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–Ω–æ–≤–æ –≤–µ—Å—å –¥–∏–∫—Ç–∞–Ω—Ç
            unavailable = true;
        }
        // –ö–æ–ª–æ–Ω–∫–∞ –≤—ã–±–æ—Ä–∞
        const selectCell = document.createElement('td');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = unavailable ? false : true;
        checkbox.dataset.key = s.key;
        if (!unavailable) {
            checkbox.style.color = 'var(--color-button-lightgreen)';
            checkbox.addEventListener('change', (e) => {
                if (e.target.checked) {
                    if (!selectedSentences.includes(s.key)) {
                        selectedSentences.push(s.key);
                    }
                } else {
                    selectedSentences = selectedSentences.filter(key => key !== s.key);
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                updateSelectedCount();
            });
        } else {
            checkbox.disabled = true;
            checkbox.style.color = 'var(--color-button-gray)';
        }
        selectCell.appendChild(checkbox);

        // –ö–æ–ª–æ–Ω–∫–∞ –∫–æ–¥–∞
        const codeCell = document.createElement('td');
        codeCell.textContent = s.key;
        codeCell.style.fontFamily = 'monospace';
        codeCell.style.fontSize = '12px';

        // –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        const textStatusCell = document.createElement('td');
        textStatusCell.style.textAlign = 'center';
        if (showResults) {
            if (unavailable) {
                textStatusCell.innerHTML = '<i data-lucide="star" style="color: var(--color-button-gray);"></i>';
            } else if (s.perfect === 1) {
                textStatusCell.innerHTML = '<i data-lucide="star" style="color: var(--color-button-mint);"></i>';
            } else if (s.corrected === 1) {
                textStatusCell.innerHTML = '<i data-lucide="star-half" style="color: var(--color-button-lightgreen);"></i>';
            } else {
                textStatusCell.innerHTML = '<i data-lucide="x" style="color: var(--color-button-gray);"></i>';
            }
            // } else {
            //     textStatusCell.innerHTML = '<i data-lucide="minus" style="color: #ccc;"></i>';
        }

        // –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        const audioStatusCell = document.createElement('td');
        audioStatusCell.style.textAlign = 'center';
        if (showResults) {
            if (unavailable) {
                audioStatusCell.innerHTML = '<i data-lucide="mic" style="color: var(--color-button-gray);></i>';
            } else if (s.audio_status === 1) {
                audioStatusCell.innerHTML = '<i data-lucide="mic" style="color: var(--color-button-purple);"></i>';
            } else {
                audioStatusCell.innerHTML = '<i data-lucide="x" style="color: var(--color-button-gray);></i>';
            }
        }

        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        const tdText = document.createElement('td');
        tdText.textContent = s.text;
        if (unavailable) {
            tdText.style.color = 'var(--color-button-gray)';
        }

        row.appendChild(selectCell);
        row.appendChild(codeCell);
        if (showResults) {
            row.appendChild(textStatusCell);
            row.appendChild(audioStatusCell);
        }
        row.appendChild(tdText);

        table.appendChild(row);
        // selectedSentences.add(s.key);
        selectedSentences.push(s.key);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    updateSelectedCount();

    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function updateSelectedCount() {
    const countElement = document.getElementById('selectedCount');
    if (countElement) {
        // countElement.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedSentences.size} –∏–∑ ${allSentences.length}`;
        countElement.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedSentences.length} –∏–∑ ${allSentences.length}`;
    }
}
/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞: –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 * –¢—É—Ç –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è: —Å—á–∏—Ç–∞–µ–º ¬´–ø–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞¬ª = text_check === 2 –ò –∞—É–¥–∏–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (audio_check == 1).
 * –í—Å—ë, —á—Ç–æ –ù–ï ¬´–ø–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞¬ª, –ø–æ–º–µ—á–∞–µ–º –≥–∞–ª–æ—á–∫–æ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞.
 * –ü–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.
 */
function shouldBeCheckedInResults(s) {
    const textOk = +ensureField(s, "text_check", 0) === 2; // 2 = –ø–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞
    const audioOk = +ensureField(s, "audio_check", 0) === 1 || +ensureField(s, "check_mik", 0) === 1;
    return !(textOk && audioOk);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function getSelectedKeys() {
    const selectedCheckboxes = document.querySelectorAll('#sentences-table input[type="checkbox"]:checked');
    const selectedIds = Array.from(selectedCheckboxes).map(checkbox => {
        const row = checkbox.closest('tr');
        return row ? parseInt(row.dataset.id) : null;
    }).filter(id => id !== null);

    // console.log('Selected IDs:', selectedIds);
    return selectedIds;
}

// ====== 2.3 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º "–ù–∞—á–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç" ======
/**
 * –°—Ç—Ä–æ–∏—Ç list_Sentences (–º–∞—Å—Å–∏–≤ key) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç allSentences:
 * - s.serial_number = –ø–æ–∑–∏—Ü–∏—è –≤ list_Sentences (1..N)
 * - s.circle        = currentDictation.circle_number (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * - s.audio_required= currentDictation.audio_required (–∏–ª–∏ 1)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º list_Sentences.
 */
function prepareGameFromTable(tableId) {
    const mix = !!qs("#mixCheckbox")?.checked;
    // let list_s = getSelectedKeys(tableId); // –º–∞—Å—Å–∏–≤ key

    if (mix) {
        // shuffleInPlace(list_Sentences);
        shuffleInPlace(selectedSentences);
    }

    // –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –≤ allSentences
    const byKey = makeByKeyMap(allSentences);
    const circleNum = ensureField(currentDictation, "circle_number", 1);
    // const audioReq = ensureField(currentDictation, "audio_required", 1);

    selectedSentences.forEach((key, idx) => {
        const s = byKey.get(key);
        if (!s) return;
        s.serial_number = idx + 1;  // –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ (—Ä–∏—Å—É–µ–º —ç—Ç–æ —á–∏—Å–ª–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ)
        s.circle = circle_number;       // –Ω–æ–º–µ—Ä –∫—Ä—É–≥–∞
        s.audio_count = REQUIRED_PASSED_COUNT; // —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞–¥–æ
    });

    // —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞ ‚Äî —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ –ø–æ ¬´–ø–æ—Ä—è–¥–∫—É¬ª
    //list_Sentences = list_s;
    currentDictation.currentIndex = 0; // –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ

    return selectedSentences;
}

// –£—Å–ª–æ–≤–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –º–æ–¥–∞–ª–∞
function tryOpenFinishModalIfComplete() {
    // ¬´–≤–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –∏–∑ —Ç–∞–±–ª–æ —Å—Ç–æ—è—Ç –∑–≤–µ–∑–¥—ã –∏ –ø–æ–ª—É–∑–≤–µ–∑–¥—ã –∏ –∞—É–¥–∏–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ¬ª
    // –Ø–≤–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ list_Sentences:
    const list = selectedSentences || [];
    const byKey = makeByKeyMap(allSentences);

    const allDone = list.every(key => {
        const s = byKey.get(key);
        if (!s) return false;
        const textOk = +ensureField(s, "text_check", 0) >= 1; // 1=–ø–æ–ª—É–∑–≤–µ–∑–¥–∞, 2=–∑–≤–µ–∑–¥–∞
        const audioOk = +ensureField(s, "audio_check", 0) === 1 || +ensureField(s, "check_mik", 0) === 1;
        return textOk && audioOk;
    });

    if (allDone) {
        openFinishModal(); // <- —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
    }
}

// ====== 2.5 –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç" ======
(function wireConfirmStart() {
    const btn = document.getElementById("confirmStartBtn");
    if (!btn) return;

    btn.addEventListener("click", () => {
        // —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        prepareGameFromTable("sentences-table");

        if (!selectedSentences.length) {
            alert("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
            return;
        }

        // –¢–∞–±–ª–æ/—Å—á—ë—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ—è—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ list_Sentences  makeByKeyMap(allSentences).get(selectedSentences[0])
        initTabloSentenceCounter();
        showCurrentSentence(0, 0);//—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        // –ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–æ–¥–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        startModal.style.display = 'none';
    });
})();

// –ö–Ω–æ–ø–∫–∏:
// 1) ¬´–ü–æ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π –∫—Ä—É–≥¬ª ‚Äî —Å–æ–±–µ—Ä–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π list_Sentences, —É–≤–µ–ª–∏—á—å –Ω–æ–º–µ—Ä –∫—Ä—É–≥–∞:
function startNextCircle() {
    circle_number = (currentDictation.circle_number || 1) + 1;
    prepareGameFromTable("sentences-table"); // –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –º–æ–¥–∞–ª–∞
    if (!selectedSentences.length) {
        alert("–ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å: –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ.");
        return;
    }
    // console.log("üëÄ 418 function startNextCircle()", selectedSentences);
    initTabloSentenceCounter();
    const firstKey = getCurrentKey();
    showSentenceByKey(firstKey);
    closeFinishModal?.();
}

// 2) ¬´–í—ã–π—Ç–∏¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª/–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
function exitDictation() {
    closeFinishModal?.();
    // ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
}


// 1) –°—á–∏—Ç–∞—Ç—å JSON –∏–∑ <script id="sentences-data">
function loadSentencesFromJSON() {
    const el = document.getElementById('sentences-data');
    if (!el) return [];
    try {
        const raw = (el.textContent || '').trim();
        const data = JSON.parse(raw || '[]');
        // –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º sentences
        return Array.isArray(data) ? data : (Array.isArray(data.sentences) ? data.sentences : []);
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å sentences-data:', e);
        return [];
    }
}

// 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥ –Ω–∞—à–∏ –ø–æ–ª—è (–º–∏–Ω–∏–º—É–º: key –∏ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
function normalizeSentences(arr) {
    return arr.map(s => ({
        key: s.key ?? s.id ?? s.code ?? String(s.key ?? ''),
        text: s.text ?? s.original ?? s.sentence ?? '',
        // —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0/–ø—É—Å—Ç–æ
        check_text: s.check_text ?? 0,
        check_mik: s.check_mik ?? s.audio_check ?? 0,
    })).filter(s => s.key);
}







// --- –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–µ–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ #userPlay -----------------------------------------------
function ensureUserPlayButton() {
    const btn = document.getElementById('userPlay');
    if (!btn || userPlayInited) return;

    // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
    btn.disabled = true;

    btn.addEventListener('click', () => {
        if (!userAudioElement) return;
        if (userAudioElement.paused) {
            userAudioElement.play().catch(console.error);
        } else {
            userAudioElement.pause();
        }
    });

    userPlayInited = true;
}

function setUserAudioBlob(blob) {
    const btn = document.getElementById('userPlay');
    if (!blob || !btn) return;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    if (userAudioElement) {
        try { userAudioElement.pause(); } catch { }
        userAudioElement.src = '';
    }
    if (userAudioObjectUrl) {
        URL.revokeObjectURL(userAudioObjectUrl);
        userAudioObjectUrl = null;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç–Ω—ã–π URL –∏ –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º –µ–≥–æ Audio()
    userAudioObjectUrl = URL.createObjectURL(blob);
    if (!userAudioElement) {
        userAudioElement = new Audio();
        userAudioElement.preload = 'metadata';
        userAudioElement.addEventListener('ended', () => {
            // –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∏–∫–æ–Ω–∫—É play (–µ—Å–ª–∏ –¥–µ–ª–∞–µ—à—å toggle –∏–∫–æ–Ω–æ–∫)
        });
    }
    userAudioElement.src = userAudioObjectUrl;
    btn.disabled = false;
}

function clearUserAudio() {
    const btn = document.getElementById('userPlay');
    if (userAudioElement) {
        try { userAudioElement.pause(); } catch { }
        userAudioElement.src = '';
    }
    if (userAudioObjectUrl) {
        URL.revokeObjectURL(userAudioObjectUrl);
        userAudioObjectUrl = null;
    }
    if (btn) btn.disabled = true;
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ UI –ø–æ audio_count —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function refreshAudioUIForCurrentSentence() {
    const R = Number(REQUIRED_PASSED_COUNT ?? 0);

    const recordBtn = document.getElementById('recordButton');
    const percentWrap = document.getElementById('count_percent')?.parentElement; // stat-btn c –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
    const visual = document.getElementById('audioVisualizer');
    const playBtn = document.getElementById('userPlay');

    // –ï—Å–ª–∏ –∞—É–¥–∏–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–µ–Ω
    if (R === 0) {
        if (recordBtn) { recordBtn.disabled = true; recordBtn.classList.add('disabled'); }
        if (percentWrap) percentWrap.style.display = 'none';
        if (playBtn) playBtn.style.display = 'none';

        if (visual) {
            try { if (typeof stopVisualization === 'function') stopVisualization(); } catch { }
            const ctx = visual.getContext && visual.getContext('2d');
            if (ctx) ctx.clearRect(0, 0, visual.width, visual.height);
            visual.hidden = true; // ‚Üê –ø—Ä—è—á–µ–º –∂—ë—Å—Ç–∫–æ
        }
        return;
    }

    // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–ø—ã—Ç–æ–∫
    const c = Math.max(0, Math.min(R, Number(currentSentence?.audio_count ?? R)));
    const hasAttempts = c > 0;

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏: —Ç–æ–ª—å–∫–æ enable/disable
    if (recordBtn) {
        recordBtn.disabled = !hasAttempts;
        recordBtn.classList.toggle('disabled', !hasAttempts);
    }

    // % –∏ Play ‚Äî –æ–±—ã—á–Ω—ã–π display, –∞ –∫–∞–Ω–≤–∞—Å ‚Äî —á–µ—Ä–µ–∑ hidden + –æ—á–∏—Å—Ç–∫–∞
    if (percentWrap) percentWrap.style.display = hasAttempts ? '' : 'none';
    if (playBtn) playBtn.style.display = hasAttempts ? '' : 'none';

    if (visual) {
        if (hasAttempts) {
            visual.hidden = false;
        } else {
            try { if (typeof stopVisualization === 'function') stopVisualization(); } catch { }
            const ctx = visual.getContext && visual.getContext('2d');
            if (ctx) ctx.clearRect(0, 0, visual.width, visual.height);
            visual.hidden = true;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å ¬´–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª
    renderUserAudioTablo();
}


// --- helpers: ¬´–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª –≤ #userAudioTablo –ø–æ audio_count -----------------------------------------------

function renderUserAudioTablo() {
    const tablo = document.getElementById('userAudioTablo');
    if (!tablo) return;

    const R = Math.max(0, Math.min(9, REQUIRED_PASSED_COUNT));
    const c = Math.max(0, Math.min(R, Number(currentSentence.audio_count ?? R)));

    // –ï—Å–ª–∏ R==0 ‚Äî —Å–∞–º –±–ª–æ–∫ —Å–∫—Ä–æ–µ—Ç—Å—è –≤ updateAudioPanelVisibility()
    if (R === 0) {
        tablo.innerHTML = '';
        return;
    }

    const parts = [];
    for (let i = 0; i < c; i++) parts.push('<i data-lucide="mic"></i>');
    for (let i = 0; i < (R - c); i++) parts.push('<i data-lucide="check"></i>');

    tablo.innerHTML = parts.join('');

    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

function updateAudioPanelVisibility() {
    const panel = document.querySelector('.audio-user-panel'); // –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const group = document.querySelector('.grupp-audio');      // –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
    const visual = document.getElementById('audioVisualizer');
    const percent = document.getElementById('count_percent');
    const answer = document.getElementById('userAudioAnswer');

    const R = Number(REQUIRED_PASSED_COUNT ?? 0);

    const hide = (el) => { if (el) el.style.display = 'none'; };
    const show = (el) => { if (el) el.style.display = ''; };

    if (R === 0) {
        // –ü–æ–ª–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–≥–æ –∞—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        hide(panel);
        hide(group);
        hide(visual);
        hide(percent?.parentElement || percent);
        hide(answer);
    } else {
        show(panel);
        show(group);
        show(visual);
        show(percent?.parentElement || percent);
        show(answer);
    }
}


// --- helpers: –ª—è–º–±–¥–∞-–≤–µ—Ä—Å–∏–∏ -----------------------------------------------

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ
// (1)
function isPendingInCurrentCircle(s) {
    return s.circle === circle_number && s.perfect !== 1 && s.corrected !== 1;
}

/**
 * –ü–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫—Ä—É–≥–µ.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç.
 * (–î–µ–ª–∞—é function-declaration, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –≤—ã—à–µ –ø–æ –∫–æ–¥—É.)
 */
function firstPendingIndex(circle = circle_number) {
    for (let i = 0; i < allSentences.length; i++) {
        const s = allSentences[i];
        if (s.circle === circle && s.perfect !== 1 && s.corrected !== 1) return i;
    }
    return -1;
}




const countBy = (pred, circle = null) =>
    allSentences.reduce(
        (n, s) => n + ((circle == null || s.circle === circle) && pred(s) ? 1 : 0),
        0
    );

const statsLite = (circle = null) => ({
    perfect: countBy(s => s.perfect === 1, circle),
    corrected: countBy(s => s.corrected === 1, circle),
    total: countBy(() => true, circle),
    audio_status: countBy(s => s.audio_status === 1, circle),
});

const setText = (id, val) => {
    const el = document.getElementById(id);
    if (el) el.textContent = val;
};

const updateStatsUIFor = (circle = null) => {
    const s = statsLite(circle);
    setText('count_perfect', s.perfect);
    setText('count_corrected', s.corrected);
    setText('count_total', s.total);
    setText('count_audio', s.audio_status);
    return s;
};

let showAllStats = false; // —Ä–µ–∂–∏–º –ø–æ–∫–∞–∑–∞: ALL –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥

const getStatsScope = () => (showAllStats ? null : circle_number);
const updateStats = () => updateStatsUIFor(getStatsScope());

const syncCircleButton = () => {
    // const btn = document.querySelector('.stat-btn.circle');
    const span = document.getElementById('circle-number');
    circleBtn.className = ''; // —à–∞–º–∞–Ω—Å–∫–∏–µ –≤–µ—â–∏ –±–µ–∑ –Ω–∏—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Å
    circleBtn.classList.value = ''; // –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —à–∞–º–∞–Ω—Å—Ç–≤–∞

    if (showAllStats) {
        circleBtn.innerHTML = `<i data-lucide="slack"></i>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫—Ä—É–≥—É.';
        circleBtn.classList.add('all-scope');
    } else {
        circleBtn.innerHTML = `<i data-lucide="iteration-cw"></i><span class="audio-counter">${circle_number}</span>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä—É–≥–∞. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä—É–≥–∏.';
        circleBtn.classList.remove('all-scope');
    }
    lucide.createIcons();
    // —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º perfect/corrected/audio/total
    updateStats();
};


document.addEventListener('DOMContentLoaded', () => {

    if (!circleBtn) return;

    // –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ circleBtn
    if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');
    circleBtn.addEventListener('click', () => {
        showAllStats = !showAllStats; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º ALL ‚Üî –∫—Ä—É–≥
        syncCircleButton();            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ü–∏—Ñ—Ä—ã
    });

    syncCircleButton();              // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
});


// --------------- timer ---------------------------------
let timerInterval = null;
const timerElement = document.getElementById("timer");

function startTimer() {
    currentDictation.dictationStartTime = Date.now();
    timerInterval = setInterval(() => {
        currentDictation.dictationTimerInterval = Date.now() - currentDictation.dictationStartTime;
        updateDictationTimerDisplay(currentDictation.dictationTimerInterval);
    }, 1000);
}

function updateDictationTimerDisplay(elapsed) {
    let s = elapsed / 1000;
    let d = Math.floor(s / 86400);
    s = s - d * 86400;
    let h = Math.floor(s / 3600);
    s = s - h * 3600;
    let m = Math.floor(s / 60);
    s = Math.floor(s % 60);
    //s = s - m * 60;
    let time_text = `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
    if (d > 0) {
        time_text = `${d}:` + time_text;
    }
    if (timerElement) {
        timerElement.textContent = time_text;
    }

}

function timeDisplay(ms) {
    if (!Number.isFinite(ms) || ms < 0) ms = 0;
    const totalSec = Math.floor(ms / 1000);
    const hours = Math.floor(totalSec / 3600);
    const minutes = Math.floor((totalSec % 3600) / 60);
    const seconds = totalSec % 60;
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}

function stopTimer() {
    clearInterval(timerInterval);
}

// –æ–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Ç–∞–±–ª–æ –ø—ñ–ª –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–º
function updateRoundStats(perfect = '', corrected = '', total = '', audio = '') {

    if (perfect !== '') {
        // —Ä–µ—á–µ–Ω–Ω—è –Ω–ø–∏—Å–∞–ª–∏ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É –±–µ–∑ –ø–æ–º–∏–ª–æ–∫
        count_perfect.textContent = perfect;
    }
    if (corrected !== '') {
        // –±—É–ª–∏ –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∞–ø–∏—Å—ñ (—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∞–∂–ª–∏–≤–æ)
        count_corrected.textContent = corrected;
    }
    if (audio !== '') {
        // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞ —Ü—å–æ–º—É –∫–æ–ª—ñ
        count_audio.textContent = audio;
    }
    if (total !== '') {
        // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–π—Ç–∏ –Ω–∞ —Ü—å–æ–º—É –∫–æ–ª—ñ
        document.getElementById("count_total").textContent = total;
    }


}

// -------------------------------------------------------
async function loadLanguageCodes() {
    const response = await fetch(LANGUAGE_CODES_URL);
    languageCodes = await response.json();
    initSpeechRecognition();
}

// ===== –¢–∞–±–ª–æ —Ñ—É–Ω–∫—Ü–∏–π ========
function initTabloSentenceCounter(maxVisible = 9) {
    const container = document.getElementById("sentenceCounter");
    container.innerHTML = "";
    // const total = allSentences.length;
    const total = selectedSentences.length;

    // –∑–∞–≥–∞–ª—å–Ω–∏–π –±–æ–∫—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const boxWrapper = document.createElement("div");
    boxWrapper.classList.add("sentence-box-wrapper");

    // window.sentenceButtons = [];
    buttonsTablo = [];
    counterTabloIndex = 0;

    if (total <= maxVisible) {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow");
        for (let i = 1; i < total; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
    } else {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow");
        for (let i = 1; i < maxVisible - 2; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
        newTabloBtn(boxWrapper, "...", maxVisible - 2, "button-color-shadow-transparent");
        newTabloBtn(boxWrapper, total, maxVisible - 1, "button-color-transparent");
    }

    container.appendChild(boxWrapper);
}

// –æ–∫—Ä–µ–º–æ —Å—Ç–≤–æ—Ä—é—é—ç–º–æ 9 –∫–Ω–æ–ø–æ–∫. –ü–æ—Ç—ñ–º –ª–∏—à–µ –±—É–¥–µ–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É
function newTabloBtn(boxWrapper, lable, index, className) {
    const btn = document.createElement("button");
    btn.dataset.position = index;
    btn.textContent = lable;
    btn.classList.add("button-32-32", className);
    btn.onclick = () => {
        counterTabloIndex_old = counterTabloIndex;

        const s_old = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);
        const btn_old = buttonsTablo[counterTabloIndex_old];
        applyStatusClass(btn_old, s_old);
        // const btn_old = buttonsTablo[counterTabloIndex];
        // btn_old.className = '';
        // btn_old.classList.value = '';
        // btn_old.classList.add("button-32-32", "button-color-transparent");

        const num = parseInt(btn.textContent);
        if (!isNaN(num)) {
            btn.className = '';
            btn.classList.value = '';
            btn.classList.add("button-32-32", "button-color-yellow");
            currentSentenceIndex = num - 1;
            counterTabloIndex = parseInt(btn.dataset.position);
            counterTabloBtn = btn;
            showCurrentSentence(counterTabloIndex, currentSentenceIndex);
        }
    };
    boxWrapper.appendChild(btn);
    // window.sentenceButtons.push(btn);
    buttonsTablo.push(btn);
}

function applyStatusClass(btn, s, isCurrent = false) {
    btn.className = '';
    btn.classList.value = '';
    btn.innerHTML = s.serial_number;

    // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    btn.classList.add("button-32-32");

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏
    btn.querySelectorAll('.status-icon-corner').forEach(icon => icon.remove());

    // –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—Å—Ç–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    if (s.perfect === 1 || s.corrected === 1) {
        const textIcon = document.createElement('div');
        textIcon.classList.add('status-icon-corner');

        if (s.perfect === 1) {
            textIcon.classList.add('text-status-perfect');
            textIcon.innerHTML = '<i data-lucide="star" style="width: 12px; height: 12px;"></i>';
        } else {
            textIcon.classList.add('text-status-corrected');
            textIcon.innerHTML = '<i data-lucide="star-half" style="width: 12px; height: 12px;"></i>';
        }
        btn.appendChild(textIcon);
    }

    // –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
    if (s.audio_status === 1) {
        const audioIcon = document.createElement('div');
        audioIcon.classList.add('status-icon-corner');
        audioIcon.classList.add('audio-status-done');
        audioIcon.innerHTML = '<i data-lucide="check" style="width: 12px; height: 12px;"></i>';
        btn.appendChild(audioIcon);
    }

    // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    if (isCurrent) {
        btn.classList.add("button-active");
    } else if (s.perfect === 1) {
        btn.classList.add("button-color-mint");
    } else if (s.corrected === 1) {
        btn.classList.add("button-color-lightgreen");
    } else {
        btn.classList.add("button-color-transparent");
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    btn.style.display = 'flex';
    btn.style.alignItems = 'center';
    btn.style.justifyContent = 'center';
    btn.style.position = 'relative';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    setTimeout(() => {
        if (window.lucide?.createIcons) {
            lucide.createIcons();
        }
    }, 0);
}


function updateTabloSentenceCounter(newTabloIndex, newSentenceIndex, maxVisible = 9) {
    const total = selectedSentences.length;
    // const buttonsTablo = window.sentenceButtons;
    if (!buttonsTablo || buttonsTablo.length === 0) return;
    console.log("üëÄ [2] updateTabloSentenceCounter() -------- buttonsTablo ", buttonsTablo);
   console.log("üëÄ [2] updateTabloSentenceCounter() -------- newTabloIndex ", newTabloIndex);

    const visibleLabels = buttonsTablo.map(btn => btn.textContent);// —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω–æ –Ω–∞ –µ–∫—Ä–∞–Ω–µ —Å–µ–π—á–∞—Å
    const currentLabel = buttonsTablo[newTabloIndex].textContent;
    const b1 = buttonsTablo[1].textContent;
    const bn = buttonsTablo[maxVisible - 2].textContent;
    if (currentLabel === "...") {
        let visibleIndices = [];

        if (newSentenceIndex < maxVisible - 2) {
            visibleIndices.push(0);
            for (let i = 1; i < maxVisible - 2; i++) visibleIndices.push(i);
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        } else if (newSentenceIndex > total - (maxVisible - 2)) {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = total - maxVisible + 2; i < total; i++) visibleIndices.push(i);
        } else {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = newSentenceIndex; i < newSentenceIndex + (maxVisible - 4); i++) {
                visibleIndices.push(i);
            }
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        }

        buttonsTablo.forEach((btn, i) => {
            const value = visibleIndices[i];
            if (value === "...") {
                btn.textContent = "...";
                btn.className = "button-32-32 button-color-shadow-transparent";
                btn.disabled = true;
                btn.removeAttribute("data-position");
            } else {
                const s = makeByKeyMap(allSentences).get(selectedSentences[value]);
                btn.textContent = value + 1;
                btn.dataset.position = value;
                btn.disabled = false;

                if (value === newSentenceIndex) {
                    applyStatusClass(btn, s, true);
                    counterTabloIndex = i;
                    counterTabloBtn = btn;
                } else {
                    applyStatusClass(btn, s, false);
                }
            }
        });

    } else {
        // [1] –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚Äî —Ç–æ —Ç–µ–∫—É—â—É—é –ø—Ä–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–µ–∑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // –Ω–æ–≤—É—é –¥–µ–ª–∞–µ–º –ê–∫—Ç–∏–≤–Ω–æ–π
        counterTabloIndex = newTabloIndex;

        const s_old = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);
        const btn_old = buttonsTablo[counterTabloIndex_old];
        applyStatusClass(btn_old, s_old);

        const btn = buttonsTablo[newTabloIndex];
        counterTabloBtn = btn;
        const s = makeByKeyMap(allSentences).get(selectedSentences[newSentenceIndex]);
        applyStatusClass(btn, s, true);
    }
}



// ===== –ø—Ä–æ–π—à–ª–∏ –∫–æ–ª–æ =========
function checkIfAllCompleted() {
    const s = statsLite(circle_number); // —Å—á–∏—Ç–∞–µ–º perfect/corrected/total/audioDone –Ω–∞ –¢–ï–ö–£–©–ï–ú –∫—Ä—É–≥–µ

    selectedSentences = [];
    document.getElementById("finish_modal_timer").textContent =
        timeDisplay(currentDictation.dictationTimerInterval);
    stopTimer();

    // –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ß–ò–°–õ–ê –≤ –º–æ–¥–∞–ª–∫—É
    setText('finish_modal_circle_number', circle_number);
    setText('finish_modal_count_perfect', s.perfect);
    setText('finish_modal_count_corrected', s.corrected);
    setText('finish_modal_count_total', s.total);
    setText('finish_modal_count_audio', s.audio_status);

    renderSelectionTable('finish_modal_sentences_table', true);

    document.getElementById("finishModal").style.display = "flex";
}



// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª =====

// ====== –ó–∞–ø–∏—Å—å ==============
document.getElementById('recordButton').addEventListener('click', () => {
    const box = document.querySelector('.custom-audio-player[data-audio-id="audio_user"]');
    if (box) box.style.display = 'flex';
}, { once: true });


// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏: 'square' ‚Üî 'pause'   setRecordStateIcon('square');
function setRecordStateIcon(name) {
    const btn = document.getElementById('recordButton');
    if (!btn) return;

    // –∫–∞–∫–∞—è –∏–∫–æ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–ø–∏—Å–∏
    const stateIcon = (name === 'pause') ? 'pause' : 'square';

    // —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    // (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º REQUIRED_PASSED_COUNT –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö)
    let remaining = 0;
    try {
        const R = Math.max(0, Math.min(9, Number(REQUIRED_PASSED_COUNT ?? 0)));
        if (currentSentence && currentSentence.hasOwnProperty('audio_count')) {
            const c = Number(currentSentence.audio_count);
            remaining = Math.max(0, Math.min(9, Number.isFinite(c) ? c : R));
        } else {
            remaining = R;
        }
    } catch (e) {
        // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –Ω–µ –ª–æ–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        remaining = 0;
    }

    // —Ä–∏—Å—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –ö–ê–ñ–î–´–ô —Ä–∞–∑ —Ü–µ–ª–∏–∫–æ–º: mic + (pause|square) + —á–∏—Å–ª–æ
    if (remaining === 0) {
        btn.innerHTML = `
    <i data-lucide="mic"></i>
    <span id="recordStateIcon" class="state-icon">
      <i data-lucide="check"></i>
    </span>
  `;

    } else {
        btn.innerHTML = `
    <i data-lucide="mic"></i>
    <span id="recordStateIcon" class="state-icon">
      <i data-lucide="${stateIcon}"></i>
    </span>
    <span class="audio-counter">${remaining}</span>
  `;

    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º lucide-–∏–∫–æ–Ω–∫–∏
    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
function decreaseAudioCounter() {
    if (currentSentence.audio_count > 0) {
        currentSentence.audio_count--;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        setRecordStateIcon('square'); // –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        renderUserAudioTablo();

        // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è, –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (currentSentence.audio_count === 0) {
            currentSentence.audio_status = 1;
            const recordButton = document.getElementById('recordButton');
            if (recordButton) {
                recordButton.disabled = true;
                recordButton.classList.add('disabled');
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
            updateStats();

            // –ø–æ—Å—Ç–∞–≤–∏–º —Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é –ø—Ç–∏—á–∫—É —É "—Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –≤ "—Ç–∞–±–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
            const btn = buttonsTablo[counterTabloIndex];
            applyStatusClass(btn, currentSentence, true);
            //applyStatusClass(counterTabloBtn, currentSentence, true);

            // –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            checkNextDiv.focus();
        } else {
            // –Ω—É–ª—è –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ —Ñ–æ–∫—É—Å –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–π –∫–Ω–æ–ø–∫–µ
            recordButton.focus();
        }
        return true;
    }
    return false;
}

// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º stopRecording
function stopRecording(cause = 'manual') {
    if (isStopping) return;
    isStopping = true;
    lastStopCause = cause;

    // –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—à–∞–µ–º –≤ onresult:
    isRecording = false;

    // –°–±—Ä–æ—Å –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞, –µ—Å–ª–∏ –≤–∏—Å–∏—Ç
    if (autoStopTimer) {
        clearTimeout(autoStopTimer);
        autoStopTimer = null;
    }

    // –ú—è–≥–∫–æ –≥–∞—Å–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ "aborted")
    if (typeof recognition !== 'undefined' && recognition) {
        try { recognition.stop(); } catch (_) { }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å ‚Äî onstop —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç saveRecording()
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        try { mediaRecorder.stop(); } catch (_) { }
    } else {
        // –£–∂–µ –Ω–µ –ø–∏—à–µ–º ‚Äî —Å–Ω–∏–º–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        isStopping = false;
    }

    // –ü–æ–≥–∞—Å–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –≤–µ—Ä–Ω—ë–º –∫–≤–∞–¥—Ä–∞—Ç
    stopVisualization();
    if (typeof setRecordStateIcon === 'function') setRecordStateIcon('square');

    const rb = document.getElementById('recordButton');
    if (rb) rb.classList.remove('recording'); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω—è–ª–∏ –∫–ª–∞—Å—Å
}

async function startRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: false,
                noiseSuppression: false,
                autoGainControl: false
            }
        });

        isRecording = true;     // —Ç–µ–ø–µ—Ä—å onresult –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        isStopping = false;    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–æ–ø–∞
        lastStopCause = 'manual';
        srLiveText = '';        // –æ—á–∏—â–∞–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        const options = {
            mimeType: getSupportedMimeType()
        };

        mediaRecorder = new MediaRecorder(stream, options);
        setupVisualizer(stream);

        mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
        // mediaRecorder.onstop = saveRecording;
        mediaRecorder.onstop = () => {
            try { saveRecording(lastStopCause); }
            finally {
                isRecording = false;   // ‚Üê –≤–∞–∂–Ω–æ!
                isStopping = false;   // ‚Üê –≤–∞–∂–Ω–æ!
                const rb = document.getElementById('recordButton');
                if (rb) rb.classList.remove('recording');   // –¥—É–±–ª—å, –µ—Å–ª–∏ —Å—Ç–æ–ø –ø—Ä–∏—à—ë–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                setRecordStateIcon('square');
            }
        };

        audioChunks = [];
        // mediaRecorder.start(100); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100–º—Å
        mediaRecorder.start(); // –æ–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π chunk ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è audio/mp4 –≤ Safari


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
        if (recognition) {
            try {
                recognition.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
            }
            initSpeechRecognition(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        }

        userAudioAnswer.innerHTML = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
        if (recognition) {
            try {
                recognition.start();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                initSpeechRecognition();
                recognition.start();
            }
        }

        setRecordStateIcon('pause');    // –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—É–∑—É
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
        userAudioAnswer.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
}

async function toggleRecording() {
    if (mediaRecorder?.state === 'recording') {
        stopRecording('manual');
    } else {
        startRecording();
    }
}

function getSupportedMimeType() {
    const types = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC (–ª—É—á—à–∏–π –¥–ª—è Safari)
        'audio/webm; codecs=opus',        // Opus (–¥–ª—è Chrome/Firefox)
        'audio/webm'                      // Fallback
    ];

    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';
}

function saveRecording(cause = undefined) {
    if (!audioChunks.length) {
        console.warn("–ù–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    const blobType = mediaRecorder.mimeType?.includes('mp4')
        ? 'audio/mp4'
        : 'audio/webm';

    // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Blob –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä
    const audioBlob = new Blob(audioChunks, { type: blobType });
    audioChunks = [];

    // –°–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–∞ –∫–Ω–æ–ø–∫–µ #userPlay
    setUserAudioBlob(audioBlob);

    // –ü—Ä–∏–≤—è–∂–µ–º ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π¬ª –ø–ª–µ–µ—Ä, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –Ω—É–∂–µ–Ω)
    const audioUrl = URL.createObjectURL(audioBlob);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalText = currentSentence.text ?? '';
    const spokenText =
        (srLiveText && srLiveText.trim()) ? srLiveText.trim()
            : (recognition && recognition.finalTranscript ? recognition.finalTranscript : '');

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: —Å—á–∏—Ç–∞–µ–º % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const percent = computeMatchPercent(originalText, spokenText);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–∑–∞—á—Ç–µ–Ω–æ¬ª
    const isPassed = percent >= MIN_MATCH_PERCENT;
    if (isPassed) {
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞—á—Ç–µ–Ω–∞
        decreaseAudioCounter();
    }

    renderUserAudioTablo();

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±–Ω–æ–≤–∏–º ¬´–∑–Ω–∞—á–æ–∫¬ª —É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —á–∏—Å–ª–µ –∑–∞—á—Ç—ë–Ω–Ω—ã—Ö
    // updateLessonPassedMark();

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    srLiveText = '';
}

function fallbackComputeMatchPercent(a, b) {
    const norm = s => s
        ?.toLowerCase()
        .replace(/[^\p{L}\p{N}\s]/gu, ' ')
        .split(/\s+/)
        .filter(Boolean) || [];
    const A = norm(a);
    const B = norm(b);
    if (!A.length) return 0;
    const setB = new Set(B);
    const hits = A.filter(w => setB.has(w)).length;
    return hits / A.length; // –¥–æ–ª—è ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª —Å–ª–æ–≤
}

function initSpeechRecognition() {
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        console.error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition');
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = languageCodes[LANGUAGE_ORIGINAL] || 'en-US';
    recognition.interimResults = true;
    recognition.continuous = true; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

    // Web Speech: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∞—á–∫–∞–º–∏ (final + interim)
    recognition.onresult = (event) => {
        // 1) –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–≤–∞–∂–Ω–æ!)
        if (!isRecording) return;

        // 2) –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const res = event.results[i];
            const t = res[0].transcript;
            if (res.isFinal) finalTranscript += t + ' ';
            else interimTranscript += t + ' ';
        }

        // 3) –û–±–Ω–æ–≤–ª—è–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä –∏ last-final
        recognition.finalTranscript = finalTranscript.trim();
        srLiveText = (finalTranscript + ' ' + interimTranscript).trim();

        // 4) –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫)
        userAudioAnswer.innerHTML =
            `<span class="final">${finalTranscript}</span><span class="interim">${interimTranscript}</span>`;

        // 5) –ê–≤—Ç–æ-—Å—Ç–æ–ø –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        const expectedText = currentSentence.text ?? '';
        const currentPercent = computeMatchPercent(expectedText, srLiveText); // 0..100
        count_percent.textContent = currentPercent;
        // console.debug('[auto-stop check] currentPercent =', currentPercent);

        if (AUTO_STOP_ENABLED && currentPercent >= AUTO_STOP_THRESHOLD) {
            if (!autoStopTimer) {
                autoStopTimer = setTimeout(() => {
                    autoStopTimer = null;
                    stopRecording('auto');       // ‚Üê –∏–¥—ë–º —Ç–µ–º –∂–µ –ø—É—Ç—ë–º, —á—Ç–æ –∏ —Ä—É—á–Ω–æ–π —Å—Ç–æ–ø
                }, AUTO_STOP_STABLE_MS);
            }
        } else if (autoStopTimer) {
            clearTimeout(autoStopTimer);
            autoStopTimer = null;
        }
    };


    recognition.onerror = (event) => {
        const code = event?.error;
        if (code === 'aborted' || code === 'no-speech' || code === 'audio-capture') {
            console.debug('SpeechRecognition notice:', code);
            return; // –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–∞–º–∏
        }
        console.error('SpeechRecognition error:', code);
        userAudioAnswer.textContent = `–û—à–∏–±–∫–∞: ${code}`;
    };

    recognition.onend = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (mediaRecorder?.state !== 'recording') {
            return;
        }

        const original = currentSentence.text.toLowerCase().trim();
        const spoken = recognition.finalTranscript.toLowerCase().trim();

        if (simplifyText(original) === simplifyText(spoken)) {
            updateCheckResult(currentSentence.key, "audio_check", 0);
            disableRecordButton(false);

            const nextBtn = document.getElementById('checkNext');
            if (nextBtn) nextBtn.focus();
        } else {
            console.log("–ì–æ–ª–æ—Å –Ω–µ —Å–æ–≤–ø–∞–ª —Å —Ç–µ–∫—Å—Ç–æ–º.");
            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –∏–¥–µ—Ç
            if (mediaRecorder?.state === 'recording') {
                try {
                    recognition.start();
                } catch (e) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
                }
            }
        }
    };
}

function disableRecordButton(active) {
    const recordBtn = document.getElementById('recordButton');
    if (!recordBtn) return;

    // –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
    recordBtn.disabled = !active;
    recordBtn.classList.toggle('disabled', !active);

    // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –∑–∞—Ç–µ—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –µ—ë –æ–¥–∏–Ω —Ä–∞–∑
    if (!recordBtn.querySelector('#recordStateIcon')) {
        recordBtn.innerHTML = '<i data-lucide="mic"></i><span id="recordStateIcon" class="state-icon"></span>';
        if (window.lucide?.createIcons) lucide.createIcons();
    }

    // –í ¬´–Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç
    if (typeof setRecordStateIcon === 'function') {
        setRecordStateIcon('square');
    }
}

function setupVisualizer(stream) {
    const canvas = audioVisualizer;               // —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –ø–æ id
    if (!canvas) return;

    const ctx = canvas.getContext('2d');

    // –ú–∞—Å—à—Ç–∞–± –ø–æ–¥ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º—ã–ª–∞
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();
    canvas.width = Math.max(1, Math.floor(rect.width * dpr));
    canvas.height = Math.max(1, Math.floor(rect.height * dpr));
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏
    const AC = window.AudioContext || window.webkitAudioContext;
    if (!vizAC) vizAC = new AC();
    if (vizAC.state === 'suspended') {
        vizAC.resume().catch(() => { });
    }

    // –£–∑–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    vizAnalyser = vizAC.createAnalyser();
    vizAnalyser.fftSize = 256;

    vizSource = vizAC.createMediaStreamSource(stream);
    vizSource.connect(vizAnalyser);

    const bufferLength = vizAnalyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    vizActive = true;

    const draw = () => {
        if (!vizActive) return;
        vizRAF = requestAnimationFrame(draw);

        vizAnalyser.getByteFrequencyData(dataArray);

        const w = canvas.width / dpr;
        const h = canvas.height / dpr;

        ctx.clearRect(0, 0, w, h);

        // —à–∏—Ä–∏–Ω–∞ –∏ –∑–∞–∑–æ—Ä —Å—Ç–æ–ª–±–∏–∫–æ–≤
        const barWidth = Math.max((w / bufferLength) * 1.6, 2);

        // –¶–í–ï–¢ –°–¢–û–õ–ë–ò–ö–û–í ‚Äî –º–µ–Ω—è–π –∑–¥–µ—Å—å (—Ä–∞–Ω—å—à–µ —É —Ç–µ–±—è –±—ã–ª–æ rgb(100, 150, 255))
        ctx.fillStyle = VIS_BAR_COLOR;

        let x = 0;
        for (let i = 0; i < bufferLength; i++) {
            const v = dataArray[i] / 255;
            const barHeight = v * (h - 4);
            ctx.fillRect(x, h - barHeight, barWidth, barHeight);
            x += barWidth + 1;
        }
    };

    draw();
}

function stopVisualization() {
    vizActive = false;

    if (vizRAF) {
        cancelAnimationFrame(vizRAF);
        vizRAF = null;
    }

    // –†–∞–∑—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    try { vizSource && vizSource.disconnect(); } catch (_) { }
    try { vizAnalyser && vizAnalyser.disconnect(); } catch (_) { }
    vizSource = null;
    vizAnalyser = null;

    // –£—Å—ã–ø–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±—ã—Å—Ç—Ä—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç, –±–µ–∑ ¬´—Ç–∏—à–∏–Ω—ã¬ª –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
    if (vizAC && vizAC.state === 'running') {
        vizAC.suspend().catch(() => { });
    }

    // –ü–æ—á–∏—Å—Ç–∏–º –∫–∞–Ω–≤—É –≤–∏–∑—É–∞–ª—å–Ω–æ
    if (audioVisualizer) {
        const ctx = audioVisualizer.getContext('2d');
        ctx.clearRect(0, 0, audioVisualizer.width, audioVisualizer.height);
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º, –∫–æ–≥–¥–∞ lesson —Å–¥–∞–Ω
// —É–¥–∞–ª–∏—Ç—å? —É—Å—Ç–∞—Ä–µ–ª–∞
function updateLessonPassedMark() {
    const micButton = document.getElementById('recordButton');
    if (!micButton) return;

    let mark = document.getElementById('recordPassedMark');
    if (!mark) {
        mark = document.createElement('span');
        mark.id = 'recordPassedMark';
        mark.className = 'passed-mark'; // —Å—Ç–∏–ª–∏–∑—É–µ—à—å –≤ CSS
        mark.style.marginLeft = '8px';
        micButton.insertAdjacentElement('afterend', mark);
    }

    // –Ω–µ –ø–æ–Ω—è–ª–∞ —á—Ç–æ –æ–Ω–æ –¥–µ–ª–∞–µ—Ç
    if (currentSentence.audio_count > 0) {
        mark.textContent = '';
        mark.style.display = 'none';
    }
}

// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–û–ù–ï–¶ =====


// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ =================================================================== 
function initializeDictation() {
    // –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∞–∫, —á—Ç–æ–±—ã –í–°–Å –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ
    renderSelectionTable('sentences-table');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
    startModal.style.display = 'flex';
    confirmStartBtn.setAttribute('aria-disabled', 'false');
    confirmStartBtn.focus();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function startNewGame() {
    if (!isAudioLoaded) return;

    // –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫
    startTimer();
    // –ø–µ—Ä—à–µ –∫–æ–ª–æ
    circle_number = 1;

    // –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—Ä—É–≥ –≤—Å–µ–º –ù–ï perfect, –æ–±–Ω—É–ª—è–µ–º corrected                                   // [+]
    allSentences.forEach(s => {                                                             // [+]
        s.circle = 1;
        s.perfect = 0;
        s.corrected = 0;
        s.audio_status = 0;
        s.audio_count = REQUIRED_PASSED_COUNT;
    });


    if (typeof syncCircleButton === 'function') syncCircleButton();
    else if (typeof updateStats === 'function') updateStats();

    currentSentenceIndex = 0;
    showCurrentSentence(0, 0);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    inputField.focus();
}


confirmStartBtn.addEventListener('click', () => {

    // –ó–∞—á–∏–Ω—è—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    startModal.style.display = 'none';

    startNewGame();
});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function initializeSentences() {                                                // [~]
    allSentences = allSentences.map(s => ({                                       // [~]
        ...s,                                                                       // [~]
        // —É–±–∏—Ä–∞–µ–º –Ω–∞—Å–ª–µ–¥–∏–µ: text_check / audio_check –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã          // [~]
        perfect: s.perfect ?? 0,                                              // [+]
        corrected: 0,                                                              // [+]
        audio_status: s.audio_status ?? 0,                                              // [+]
        audio_count: typeof s.audio_count === 'number' ? s.audio_count : REQUIRED_PASSED_COUNT, // [+]
        circle: s.circle ?? 0,                                              // [+]
    }));                                                                          // [+]
}


function updateCheckResult(key, type, value) {
    const sentence = allSentences.find(s => s.key === key);
    if (sentence) {
        sentence[type] = value;
    }
}


function showCurrentSentence(showTabloIndex, showSentenceIndex) {
    currentSentenceIndex = showSentenceIndex;
    currentSentence = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);

    // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–± –ø–ª–µ–µ—Ä –Ω–µ —Ç–∞—â–∏–ª —Å—Ç–∞—Ä—ã–π blob) // NEW
    clearUserAudio();                                                                 // NEW


    // –û—á–∏—Å—Ç–∫–∞ ¬´–∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫¬ª (—Å–µ–π—á–∞—Å —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥–µ—Ç)
    // clearAttemptsTable();

    // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ –∞—É–¥–∏–æ (–Ω–∞ —Å–ª—É—á–∞–π R=0)
    updateAudioPanelVisibility();

    refreshAudioUIForCurrentSentence();


    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞
    userAudioAnswer.innerHTML = '';

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ
    audio.src = currentSentence.audio;
    audio_tr.src = currentSentence.audio_tr;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
    setRecordStateIcon('square');

    // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞
    const recordButton = document.getElementById('recordButton');
    if (recordButton) {
        setRecordStateIcon('square');
        if (currentSentence.audio_count === 0) {
            recordButton.disabled = true;
            recordButton.classList.add('disabled');
        } else {
            recordButton.disabled = false;
            recordButton.classList.remove('disabled');
        }
    }

    // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å ¬´–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    renderUserAudioTablo();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    // updateLessonPassedMark();

    audioVisualizer.style.display = 'block';
    count_percent.style.display = 'block';
    userAudioAnswer.style.display = 'block';

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ ===== 
    document.getElementById("correctAnswer").innerHTML = currentSentence.text;
    document.getElementById("correctAnswer").style.display = "none";
    document.getElementById("translation").innerHTML = currentSentence.translation;
    document.getElementById("translation").style.display = "none";


    // –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    if (currentSentence.perfect === 1) {
        inputField.innerHTML = currentSentence.text;
        // correctAnswerDiv.innerHTML = currentSentence.text_translation;
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = currentSentence.text_translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        disableCheckButton(0);
    } else if (currentSentence.corrected === 1) {
        inputField.innerHTML = currentSentence.text;
        // correctAnswerDiv.innerHTML = currentSentence.text_translation;
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = currentSentence.text_translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        disableCheckButton(1);
    } else {
        inputField.innerHTML = "";
        correctAnswerDiv.textContent = "";
        disableCheckButton(2);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    inputField.contentEditable = "true"; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    setTimeout(() => {
        inputField.focus();
    }, 0);
    inputField.focus();
    textAttemptCount = 0;


    disableRecordButton(true);


    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    let audioLoaded = 0;
    const totalAudio = 2; // –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥


    function checkAndPlay() {
        audioLoaded++;
        if (audioLoaded === totalAudio) {
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => playMultipleAudios(playSequenceStart), 300);
        }
    }

    audio.oncanplaythrough = checkAndPlay;
    audio_tr.oncanplaythrough = checkAndPlay;

    // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (audio.readyState > 3) checkAndPlay();
    if (audio_tr.readyState > 3) checkAndPlay();
}


// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function nextSentence() {
    console.log("üëÄ [1] nextSentence() -------- selectedSentences ", selectedSentences);
    console.log("üëÄ [1] nextSentence() -------- counterTabloIndex_old ", counterTabloIndex_old);
    console.log("üëÄ [1] nextSentence() -------- counterTabloIndex ", counterTabloIndex);
    const total = selectedSentences.length;
    counterTabloIndex_old = counterTabloIndex;
    let newTabloIndex = counterTabloIndex + 1; // –ø–æ –∫–Ω–æ–ø–∫–∞–º
    let newSentenceIndex = currentSentenceIndex + 1; // –ø–æ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–º –∫–ª—é—á–µ–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º

    if (newSentenceIndex < total) {
        updateTabloSentenceCounter(newTabloIndex, newSentenceIndex);
        showCurrentSentence(newTabloIndex, newSentenceIndex); // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    }

    const s = statsLite(circle_number);
    const sum = s.perfect + s.corrected;
    if (newSentenceIndex === total && sum === total) {
        checkIfAllCompleted();
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ª–∏–±–æ –≤ –∫–æ–Ω—Ü–µ, –ª–∏–±–æ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–æ–ø–µ—Ä–¥–Ω—å–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function previousSentence() {
    counterTabloIndex_old = counterTabloIndex;
    let newTabloIndex = counterTabloIndex - 1; // –ø–æ –∫–Ω–æ–ø–∫–∞–º
    let newSentenceIndex = currentSentenceIndex - 1; // –ø–æ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–º –∫–ª—é—á–µ–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º

    if (newSentenceIndex >= 0) {
        updateTabloSentenceCounter(newTabloIndex, newSentenceIndex);
        showCurrentSentence(newTabloIndex, newSentenceIndex);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function clearText() {
    inputField.innerHTML = '';
    // correctAnswerDiv.innerHTML = '';
    // translationDiv.style.display = 'none';
    // audio.currentTime = 0;
    // audio.play();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
function recordAudio() {

}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
async function loadAudio() {
    // –í —Ñ—É–Ω–∫—Ü–∏–∏ loadAudio –¥–æ–±–∞–≤—å—Ç–µ:
    // console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ:', {
    //     original: audio.src,
    //     translation: audio_tr.src,
    //     originalReadyState: audio.readyState,
    //     translationReadyState: audio_tr.readyState
    // });
    try {
        audio.src = currentSentence.audio;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }

    try {
        audio_tr.src = currentSentence.audio_tr;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio_tr.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ -------------------------------------------------------
document.addEventListener("DOMContentLoaded", function () {
    initializeSentences();
    initializeDictation();
    loadLanguageCodes();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
    //console.group("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤:");
    const formatsToCheck = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC
        'audio/webm; codecs=opus',       // Opus
        'audio/webm',                    // Fallback WebM
        'audio/wav'                      // WAV (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    ];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
    // console.log("–ë—Ä–∞—É–∑–µ—Ä:", navigator.userAgent);
    // console.log("–Ø–∑—ã–∫–æ–≤—ã–µ –∫–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", languageCodes);

    // --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫—Ä—É–≥–∞: ALL ‚Üî –Ω–æ–º–µ—Ä ---
    (function initCircleToggle() {
        const circleBtn = document.querySelector('.stat-btn.circle');
        if (!circleBtn) return;

        // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ HTML –≤–¥—Ä—É–≥ —Å disabled ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º
        if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');

        circleBtn.addEventListener('click', () => {
            showAllStats = !showAllStats;   // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            syncCircleButton();             // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã
        });

        syncCircleButton();               // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    })();

    ensureUserPlayButton();
    updateAudioPanelVisibility();
    renderUserAudioTablo();
    setRecordStateIcon('square');  // ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ‚Äú–∫–≤–∞–¥—Ä–∞—Ç‚Äù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    refreshAudioUIForCurrentSentence();
    startTimer();
});

inputField.addEventListener('input', function () {
    const plainText = inputField.innerText;
    if (inputField.innerHTML !== plainText) {
        const cursorPos = saveCursorPosition(inputField);
        inputField.innerHTML = plainText;
        restoreCursorPosition(inputField, cursorPos);
    }
});


// -----------–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º -----------------------------------------
function simplifyText(text) {
    return text
        .toLowerCase()
        // –£–¥–∞–ª—è–µ–º –í–°–ï –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, –∫–∞–≤—ã—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[\u0027\u2018\u2019\u0060\u00B4'‚Äò‚Äô`¬¥]/g, "")
        // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[-.,!‚Äî?;:‚Äî"¬´¬ª()]/g, "")
        .replace(/\s+/g, " ")
        .trim()
        .split(" ");
}

function findFirstErrorIndex(word1, word2) {
    const len = Math.min(word1.length, word2.length);
    for (let k = 0; k < len; k++) {
        if (word1[k] !== word2[k]) return k;
    }
    return len;
}

function renderResult(original, userVerified) {

    const correctLine = [];
    let foundError = false;
    let originalIndex = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            correctLine.push(`<span class="word-correct">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "missing") {
            correctLine.push(`<span class="word-missing">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "error") {
            const before = word.correctText.slice(0, word.errorIndex);
            const errorLetter = word.correctText[word.errorIndex] || "";
            const after = word.correctText.slice(word.errorIndex + 1);

            const correctHTML =
                `<span class="correct-line-word">` +
                `${before}<span class="correct-line-letter">${errorLetter}</span>${after}` +
                `</span> `;

            correctLine.push(correctHTML);
            originalIndex++;
            foundError = true;
        } else if (word.type === "raw_user") {
            // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
            // console.log("üëÄ function renderResult(...) ---------------- word.type = " + word.type, word);
        }
    });

    if (foundError) {
        const remainingWords = original.trim().split(/\s+/).slice(originalIndex);
        remainingWords.forEach(word => {
            correctLine.push(`<span>${word}</span> `);
        });
    }
    else {
        // checkNextDiv.focus();
        recordButton.focus();
        console.log("üëÄ 2122 recordButton.focus()");
    }

    correctAnswerDiv.innerHTML = correctLine.join("");
}

function renderToEditable(userVerified) {
    let html = "";
    let errorFound = false;
    let totalOffset = 0;
    let errorOffset = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "missing") {
            html += `<span class="word-missing">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "error") {
            const before = word.userText.slice(0, word.errorIndex);
            const wrongLetter = word.userText[word.errorIndex] || "";
            const after = word.userText.slice(word.errorIndex + 1);

            html += `<span class="word-error">${before}<span class="letter-error">${wrongLetter}</span>${after} </span>`;

            if (!errorFound) {
                errorOffset = totalOffset + before.length + 1;
                errorFound = true;
            }
            totalOffset += word.userText.length + 1;
        } else if (word.type === "raw_user") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        }
    });

    inputField.innerHTML = html.trim();
    setCursorAtOffset(inputField, errorFound ? errorOffset : totalOffset);
}

function setCursorAtOffset(root, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            if (currentOffset + node.length >= offset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            } else {
                currentOffset += node.length;
            }
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(root);
}

function saveCursorPosition(containerEl) {
    const sel = window.getSelection();
    if (!sel.rangeCount) return null;
    const range = sel.getRangeAt(0);
    const preRange = range.cloneRange();
    preRange.selectNodeContents(containerEl);
    preRange.setEnd(range.startContainer, range.startOffset);
    return preRange.toString().length;
}

function restoreCursorPosition(containerEl, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            const nextOffset = currentOffset + node.length;
            if (offset <= nextOffset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            }
            currentOffset = nextOffset;
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(containerEl);
}

function playMultipleAudios(sequence) {
    const steps = sequence.split(''); // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "oto" ‚Üí ["o", "t", "o"])
    let index = 0;

    function playNext() {
        if (index >= steps.length) return;

        const currentAudio = steps[index] === 'o' ? audio : audio_tr; // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        if (!currentAudio) {
            console.warn('–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —à–∞–≥–∞:', steps[index]);
            index++;
            return playNext();
        }

        currentAudio.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º
        currentAudio.play()
            .then(() => {
                currentAudio.onended = () => {
                    index++;
                    playNext(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                };
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                index++;
                playNext(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            });
    }

    playNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
}


function disableCheckButton(active) {
    // console.log("üëÄ  ----------------disableCheckButton-----------------active = " + active);
    const checkBtn = document.getElementById('checkBtn');
    const userInput = document.getElementById('userInput');
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    checkBtn.classList.value = '';
    switch (active) {
        case 2:
            checkBtn.disabled = false;
            checkBtn.innerHTML = '<i data-lucide="book-open-check"></i>';
            if (userInput) userInput.contentEditable = "false";
            checkBtn.classList.add('button-color-yellow');
            break;

        case 0:
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<i data-lucide="star"></i> <i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-mint');
            break;

        case 1:
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<i data-lucide="star-half"></i><i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-lightgreen');
            break;
    }
    lucide.createIcons();
}

function check(original, userInput, currentKey) {
    const simplOriginal = simplifyText(original);
    const simplUser = simplifyText(userInput);

    const originalWords = original.trim().split(/\s+/);
    const userWords = userInput.trim().split(/\s+/);

    const userVerified = [];
    let i = 0, j = 0;
    let foundError = false;

    while (i < simplOriginal.length || j < simplUser.length) {
        const wordOrig = simplOriginal[i];
        const wordUser = simplUser[j];
        const fullWordOrig = originalWords[i] || "";
        const fullWordUser = userWords[j] || "";

        if (foundError) {
            if (j < userWords.length) {
                userVerified.push({ type: "raw_user", text: userWords[j] });
                j++;
            } else {
                break;
            }
        } else if (wordOrig === wordUser) {
            userVerified.push({ type: "correct", text: fullWordOrig });
            i++; j++;
        } else if (simplOriginal[i + 1] === wordUser) {
            userVerified.push({ type: "missing", text: fullWordOrig });
            i++;
        } else {
            const errorIndex = findFirstErrorIndex(wordOrig, wordUser);
            userVerified.push({
                type: "error",
                userText: fullWordUser,
                correctText: fullWordOrig,
                errorIndex: errorIndex
            });
            i++; j++;
            foundError = true;
        }
    }

    // === ==
    if (!foundError) {

        // const s = allSentences[currentSentenceIndex];
        // const s = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);
        const s = currentSentence;
        if (textAttemptCount === 0) {
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–æ –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏
            s.perfect = 1;
            s.corrected = 0;
            disableCheckButton(0);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–π –∑–≤–µ–∑–¥—É
        } else {
            if (s.perfect !== 1) s.corrected = 1;
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–ª–µ –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–±
            disableCheckButton(1);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–ª –∑–≤–µ–∑–¥—ã –Ω–∞ –Ω–µ–π
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–æ –∏ —à–∞–ø–∫—É:
        // –ø–æ—Å—Ç–∞–≤–∏–º –∑–≤–µ–∑–¥–æ—á–∫—É –∏–ª–∏ –ø–æ–ª—É–∑–≤–∫–∑–¥–æ—á–∫—É —É "—Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –≤ "—Ç–∞–±–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        const btn = buttonsTablo[counterTabloIndex];
        applyStatusClass(btn, currentSentence, true);
        // applyStatusClass(counterTabloBtn, currentSentence, true);

        if (typeof syncCircleButton === 'function') syncCircleButton();
        else if (typeof updateStatsUIFor === 'function') updateStatsUIFor(circle_number);

        // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ–∫—É—Å
        recordButton.focus();
    } else {
        // –û—à–∏–±–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        textAttemptCount++;
    }

    return userVerified;
}

function checkText() {
    const original = currentSentence.text;
    const translation = currentSentence.translation;
    const userInput = inputField.innerText;
    const currentKey = currentSentence.key;
    const result = check(original, userInput, currentKey);

    renderToEditable(result);
    renderResult(original, result);

    const allCorrect = result.every(word => word.type === "correct");

    correctAnswerDiv.style.display = "block";
    if (allCorrect) {
        correctAnswerDiv
        // translationDiv.style.display = "block";
        // translationDiv.textContent = translation;
        // translationDiv.style.color = 'var(--color-button-text-gray)';
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        setTimeout(() => playMultipleAudios(successSequence), 500); // "ot" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    } else {
        translationDiv.style.display = "none";
    }


}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è inputField
inputField.addEventListener('keydown', function (event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        checkText();
        return;
    }
});

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ
document.addEventListener('keydown', function (event) {
    if (event.ctrlKey) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ctrl –Ω–∞–∂–∞—Ç
        switch (event.key) {
            case '1':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                const audio = document.getElementById('audio');
                if (audio) audio.play();
                break;

            case '2':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
                const audio_tr = document.getElementById('audio_tr');
                if (audio_tr) audio_tr.play();
                break;

            case '4':
                // –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                // event.preventDefault();
                nextSentence();
                break;

            case '3':
                // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                // event.preventDefault();
                previousSentence();
                break;
        }
    }


});


document.getElementById("userInput").addEventListener("input", function () {
    if (document.getElementById("correctAnswer").style.display != "none") {
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å O, —Ç—É—Ç –º–æ–∂–µ—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç
        playMultipleAudios(playSequenceTypo); // "t"

        document.getElementById("correctAnswer").style.display = "none";
        document.getElementById("translation").style.display = "none";
    }
});

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Å–ª–æ–≤ —á–µ—Ä–µ–∑ LCS (Longest Common Subsequence) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0..100)
function computeMatchPercent(originalText, spokenText) {
    // simplifyText —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å: –æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
    const a = simplifyText(originalText);
    const b = simplifyText(spokenText);

    if (a.length === 0 && b.length === 0) return 100;
    if (a.length === 0 || b.length === 0) return 0;

    // –î–ü-—Ç–∞–±–ª–∏—Ü–∞ LCS: (a.length+1) x (b.length+1)
    const dp = Array.from({ length: a.length + 1 }, () => new Array(b.length + 1).fill(0));
    for (let i = 1; i <= a.length; i++) {
        for (let j = 1; j <= b.length; j++) {
            if (a[i - 1] === b[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    const lcs = dp[a.length][b.length];
    const percent = (2 * lcs) / (a.length + b.length) * 100;
    return Math.round(percent);
}

// –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–∫—ñ–Ω—Ü—ñ –¥–∏–∫—Ç–∞–Ω—Ç—É -----------------------------------
// (1) –ì—Ä–∞–π–º–æ –¥–∞–ª—ñ –∑ –ø–æ—á–∞—Ç–∫—É 

// (2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"
function clickBtnRestart() {
    circle_number++;
    syncCircleButton();            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ü–∏—Ñ—Ä—ã;

    // —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
    prepareGameFromTable("finish_modal_sentences_table");

    // –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—Ä—É–≥ –≤—Å–µ–º –ù–ï perfect, –æ–±–Ω—É–ª—è–µ–º corrected                                   // [+]
    allSentences.forEach(s => {
        if (selectedSentences.includes(s.kay)) {                                                          // [+]
            s.circle = circle_number;
            s.corrected = 0;
        }
    });

    if (selectedSentences.length === 0) {
        alert("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.");
        return;
    }

    initTabloSentenceCounter();
    showCurrentSentence(0, 0);//—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    // –ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–æ–¥–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    startModal.style.display = 'none';

    // –ü—Ä—è—á–µ–º –º–æ–¥–∞–ª–∫—É
    document.getElementById("finishModal").style.display = "none";
    startTimer();
}

// (3) –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
function clickBtnBackToList() {
    window.location.href = "/"; // –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
}



//  =============== –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ ===============================================
document.querySelectorAll(".custom-audio-player").forEach(player => {
    const audio = player.querySelector("audio.audio-element");
    const playBtn = player.querySelector(".play-btn");
    const progressBar = player.querySelector(".progress-bar");
    const currentTimeElem = player.querySelector(".current-time");
    const totalTimeElem = player.querySelector(".total-time");
    // const volumeWrapper = player.querySelector(".volume-wrapperÔ¨Å");
    const volumeSlider = player.querySelector('.volume-slider');
    const muteBtn = player.querySelector('.mute-btn');
    // const speedSelect = player.querySelector(".speed-select");


    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    const speedSelectWrapper = player.querySelector('.custom-speed-select');
    const speedSelectBtn = speedSelectWrapper?.querySelector('.speed-select-button');
    const speedSelected = speedSelectWrapper?.querySelector('.speed-selected');
    const speedOptions = speedSelectWrapper?.querySelector('.speed-options');
    const nativeSpeedSelect = player.querySelector(".speed-select");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ ------------------------------------------------------
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const updatePlaybackSpeed = (speed) => {
        audio.playbackRate = parseFloat(speed);
        if (speedSelected) speedSelected.textContent = `${speed}x`;
        if (nativeSpeedSelect) nativeSpeedSelect.value = speed;
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (speedSelectWrapper) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        speedSelectBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            speedSelectWrapper.classList.toggle('active');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speedOptions.querySelectorAll('li').forEach(option => {
            option.addEventListener('click', () => {
                const speed = option.dataset.value;
                updatePlaybackSpeed(speed);
                speedSelectWrapper.classList.remove('active');
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const initialSpeed = nativeSpeedSelect?.value || '1.0';
        updatePlaybackSpeed(initialSpeed);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º select
    if (nativeSpeedSelect) {
        nativeSpeedSelect.addEventListener('change', () => {
            updatePlaybackSpeed(nativeSpeedSelect.value);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ------------------------------------------------------
    audio.volume = 0.7; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
    volumeSlider.value = audio.volume;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
    playBtn.addEventListener("click", () => {
        if (audio.paused) {
            audio.play();
            //playBtn.textContent = "‚è∏";
            playBtn.innerHTML = '<i data-lucide="pause"></i>';
        } else {
            audio.pause();
            playBtn.innerHTML = '<i data-lucide="play"></i>';
            // playBtn.textContent = "‚ñ∂";
        }
        lucide.createIcons();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    volumeSlider.addEventListener('input', () => {
        audio.volume = volumeSlider.value;
        updateVolumeIcon(audio.volume, muteBtn);
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ mute
    muteBtn.addEventListener('click', () => {
        if (audio.volume > 0) {
            audio.volume = 0;
            volumeSlider.value = 0;
        } else {
            audio.volume = volumeSlider.dataset.lastVolume || 0.7;
            volumeSlider.value = audio.volume;
        }
        updateVolumeIcon(audio.volume, muteBtn);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ mute
    volumeSlider.addEventListener('mousedown', () => {
        if (audio.volume > 0) {
            volumeSlider.dataset.lastVolume = audio.volume;
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    audio.addEventListener("timeupdate", () => {
        const current = audio.currentTime;
        const duration = audio.duration;
        progressBar.value = (current / duration) * 100 || 0;
        currentTimeElem.textContent = formatTime(current);
        totalTimeElem.textContent = formatTime(duration || 0);
    });

    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progressBar.addEventListener("input", () => {
        audio.currentTime = (progressBar.value / 100) * audio.duration;
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateVolumeIcon(audio.volume, muteBtn);


});


// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
document.addEventListener('click', (e) => {
    if (!e.target.closest('.custom-speed-select')) {
        document.querySelectorAll('.custom-speed-select').forEach(select => {
            select.classList.remove('active');
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function updateVolumeIcon(volume, muteBtn) {
    let icon;
    if (volume === 0) {
        icon = 'volume-x';
    } else if (volume < 0.3) {
        icon = 'volume';
    } else if (volume < 0.6) {
        icon = 'volume-1';
    } else {
        icon = 'volume-2';
    }
    muteBtn.innerHTML = `<i data-lucide="${icon}"></i>`;
    lucide.createIcons();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(sec) {
    const m = Math.floor(sec / 60);
    const s = Math.floor(sec % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
}
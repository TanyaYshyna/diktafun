const inputField = document.getElementById('userInput');
const checkNextDiv = document.getElementById('checkNext');
const checkPreviosDiv = document.getElementById('checkPrevios');
const correctAnswerDiv = document.getElementById('correctAnswer');
const translationDiv = document.getElementById('translation');
const audio = document.getElementById('audio');
const audio_tr = document.getElementById('audio_tr');
const rawJson = document.getElementById("sentences-data").textContent;
const sentences = JSON.parse(rawJson);
const playSequence = "oto";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
const successSequence = "ot"; // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "o" –∏–ª–∏ "to")

let allSentences = sentences; // ‚Üê –∏–∑ JSON
let currentSentenceIndex = 0;
// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let first_pass_new_sentences = true;
let currentCircle = 1;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
let isAudioLoaded = false;
const startModal = document.getElementById('startModal');
const confirmStartBtn = document.getElementById('confirmStartBtn');

// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
const openUserAudioModalBtn = document.getElementById('openUserAudioModalBtn');
const userAudioModal = document.getElementById('userAudioModal');
const closeUserAudioBtn = document.querySelector('.close-user-audio');
const userCancelBtn = document.getElementById('userCancelButton');
const userConfirmBtn = document.getElementById('userConfirmButton');
const userRecordBtn = document.getElementById('userRecordButton');
const userAudioStatusText = document.getElementById('userAudioStatusText');
const userAudioTranscript = document.getElementById('userAudioTranscript');
const userAudioVisualizer = document.getElementById('userAudioVisualizer');

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏–æ =====
// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
const recordButton = document.getElementById('recordButton');
const recordButtonText = document.getElementById('recordButtonText');
const audioVisualizer = document.getElementById('audioVisualizer');
const userAudioElement = document.getElementById('audio_user');
const userAudioAnswer = document.getElementById('userAudioAnswer');

let mediaRecorder, audioChunks = [];
let languageCodes = {};
let recognition = null;
let textAttemptCount = 0;

async function loadLanguageCodes() {
    const response = await fetch(LANGUAGE_CODES_URL);
    languageCodes = await response.json();
    initSpeechRecognition();
}

// ===== –¢–∞–±–ª–æ —Ñ—É–Ω–∫—Ü–∏–π ========
//    console.log("üëÄ renderSentenceCounter –≤—ã–∑–≤–∞–Ω–∞");
function initTabloSentenceCounter(maxVisible = 9) {
    const container = document.getElementById("sentenceCounter");
    container.innerHTML = "";
    const total = allSentences.length;

    const boxWrapper = document.createElement("div");
    boxWrapper.classList.add("sentence-box-wrapper");

    window.sentenceButtons = [];

    if (total <= maxVisible) {
        newTabloBtn(1, 0, "sentence-box box-current", boxWrapper);
        for (let i = 1; i < total; i++) {
            newTabloBtn(i + 1, i, "sentence-box box-default", boxWrapper);
        }
    } else {
        newTabloBtn(1, 0, "sentence-box box-current", boxWrapper);
        for (let i = 1; i < maxVisible - 2; i++) {
            newTabloBtn(i + 1, i, "sentence-box box-default", boxWrapper);
        }
        newTabloBtn("...", maxVisible - 2, "box-gap", boxWrapper);
        newTabloBtn(total, maxVisible - 1, "sentence-box box-default", boxWrapper);
    }

    container.appendChild(boxWrapper);
}

function newTabloBtn(lable, index, className, boxWrapper) {
    const btn = document.createElement("button");
    //btn.classList.add("sentence-box");
    btn.dataset.position = index;
    btn.textContent = lable;
    btn.className = className;
    btn.onclick = () => {
        console.log("üëÄ clicked", btn.textContent);
        const num = parseInt(btn.textContent);
        if (!isNaN(num)) {
            currentSentenceIndex = num - 1;
            showCurrentSentence(currentSentenceIndex);
        }
    };
    boxWrapper.appendChild(btn);
    window.sentenceButtons.push(btn);
}

function applyStatusClass(btn, sentence, isCurrent = false) {
    if (isCurrent) {
        btn.classList.add("box-current", "box-default");
    } else if (sentence.text_check === 0) {
        btn.classList.add("box-done");
    } else if (sentence.text_check > 0) {
        btn.classList.add("box-partial");
    } else {
        btn.classList.add("box-default");
    }
}

function updateTabloSentenceCounter(currentIndex, maxVisible = 9) {
    const total = allSentences.length;
    const buttons = window.sentenceButtons;
    if (!buttons || buttons.length === 0) return;

    const currentLabel = currentIndex + 1;
    const visibleLabels = buttons.map(btn => btn.textContent);

    // [1] –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    if (visibleLabels.includes(String(currentLabel))) {
        buttons.forEach(btn => {
            const num = parseInt(btn.textContent);
            if (isNaN(num)) return;

            const index = num - 1;
            btn.className = "sentence-box";

            if (index === currentIndex) {
                btn.classList.add("box-current", "box-default");
            } else {
                const sentence = allSentences[index];
                applyStatusClass(btn, sentence, false);
            }
        });
    } else {
        // [2] –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ –∫–Ω–æ–ø–∫–∏
        let visibleIndices = [];

        if (currentIndex < maxVisible - 2) {
            visibleIndices.push(0);
            for (let i = 1; i < maxVisible - 2; i++) visibleIndices.push(i);
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        } else if (currentIndex > total - (maxVisible - 2)) {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = total - maxVisible + 2; i < total; i++) visibleIndices.push(i);
        } else {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = currentIndex; i < currentIndex + (maxVisible - 4); i++) {
                visibleIndices.push(i);
            }
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        }

        buttons.forEach((btn, i) => {
            const value = visibleIndices[i];
            btn.className = "sentence-box";
            if (value === "...") {
                btn.textContent = "...";
                btn.classList.add("box-gap");
                btn.disabled = true;
                btn.removeAttribute("data-position");
            } else {
                const sentence = allSentences[value];
                btn.textContent = value + 1;
                btn.dataset.position = value;
                btn.disabled = false;

                if (value === currentIndex) {
                    btn.classList.add("box-current", "box-default");
                } else {
                    applyStatusClass(btn, sentence, false);
                }
            }
        });
    }
}












function checkIfAllCompleted() {
    const hasUnfinished = allSentences.some(s => s.text_check === -1);
    if (!hasUnfinished) {
        document.getElementById("finishModal").style.display = "flex";
    }
}

// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª =====
// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º stopRecording
function stopRecording() {
    if (mediaRecorder?.state === 'recording') {
        mediaRecorder.stop();
        mediaRecorder.stream.getTracks().forEach(track => track.stop());
        if (recognition) {
            try {
                recognition.abort();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
            }
        }
    }

    recordButton.classList.remove('recording');
    recordButtonText.textContent = '–ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ';
    stopVisualization();
}

async function startRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: false,
                noiseSuppression: false,
                autoGainControl: false
            }
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        const options = {
            mimeType: getSupportedMimeType()
        };
        console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:", options.mimeType);

        mediaRecorder = new MediaRecorder(stream, options);
        setupVisualizer(stream);

        mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
        mediaRecorder.onstop = saveRecording;

        audioChunks = [];
        mediaRecorder.start(100); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100–º—Å

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
        if (recognition) {
            try {
                recognition.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
            }
            initSpeechRecognition(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        }

        userAudioAnswer.innerHTML = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
        if (recognition) {
            try {
                recognition.start();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                initSpeechRecognition();
                recognition.start();
            }
        }

        recordButton.classList.add('recording');
        recordButtonText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
        userAudioAnswer.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
}

async function toggleRecording() {
    if (mediaRecorder?.state === 'recording') {
        stopRecording();
    } else {
        startRecording();
    }
}

function getSupportedMimeType() {
    const types = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC (–ª—É—á—à–∏–π –¥–ª—è Safari)
        'audio/webm; codecs=opus',        // Opus (–¥–ª—è Chrome/Firefox)
        'audio/webm'                      // Fallback
    ];

    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';
}

function saveRecording() {
    if (!audioChunks.length) {
        console.warn("–ù–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    const blobType = mediaRecorder.mimeType.includes('mp4')
        ? 'audio/mp4'
        : 'audio/webm';

    const audioBlob = new Blob(audioChunks, { type: blobType });
    const audioUrl = URL.createObjectURL(audioBlob);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π type –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ <audio>
    userAudioElement.src = audioUrl;
    userAudioElement.type = blobType;

    console.log(`–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${blobType}):`, audioUrl);
}

function initSpeechRecognition() {
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        console.error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition');
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = languageCodes[LANGUAGE_ORIGINAL] || 'en-US';
    recognition.interimResults = true;
    recognition.continuous = true; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

    recognition.onresult = (event) => {
        let interimTranscript = '';
        let finalTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }
        recognition.finalTranscript = finalTranscript;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        userAudioAnswer.innerHTML = `<span class="final">${finalTranscript}</span><span class="interim">${interimTranscript}</span>`;
    };

    recognition.onerror = (event) => {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É "aborted" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (event.error !== 'aborted') {
            userAudioAnswer.textContent = `–û—à–∏–±–∫–∞: ${event.error}`;
        }

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "aborted", –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
        if (event.error !== 'aborted' && mediaRecorder?.state === 'recording') {
            setTimeout(() => {
                try {
                    recognition.start();
                } catch (e) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
                }
            }, 500);
        }
    };

    recognition.onend = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (mediaRecorder?.state !== 'recording') {
            return;
        }

        const original = allSentences[currentSentenceIndex].text.toLowerCase().trim();
        const spoken = recognition.finalTranscript.toLowerCase().trim();

        if (simplifyText(original) === simplifyText(spoken)) {
            updateCheckResult(allSentences[currentSentenceIndex].key, "audio_check", 0);
            disableRecordButton(false);

            const nextBtn = document.getElementById('checkNext');
            if (nextBtn) nextBtn.focus();
        } else {
            console.log("–ì–æ–ª–æ—Å –Ω–µ —Å–æ–≤–ø–∞–ª —Å —Ç–µ–∫—Å—Ç–æ–º.");
            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –∏–¥–µ—Ç
            if (mediaRecorder?.state === 'recording') {
                try {
                    recognition.start();
                } catch (e) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
                }
            }
        }
    };
}

function disableRecordButton(active) {
    const recordBtn = document.getElementById('recordBtn');

    if (recordBtn) {
        if (active) {
            recordBtn.disabled = false;
            recordBtn.innerHTML = '<img src="/static/icons/record0.svg" alt="–ó–∞–ø–∏—Å—å">';
        } else {
            recordBtn.disabled = true;
            recordBtn.innerHTML = '<img src="/static/icons/test1.svg" alt="–ì–∞–ª–æ—á–∫–∞">';
        }
    }
}

function saveRecording() {
    try {
        if (!audioChunks.length) {
            console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }

        const blobType = mediaRecorder.mimeType.includes('mp4')
            ? 'audio/mp4'
            : 'audio/webm';

        const audioBlob = new Blob(audioChunks, { type: blobType });
        const audioUrl = URL.createObjectURL(audioBlob);

        userAudioElement.src = audioUrl;
        userAudioElement.type = blobType; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø

        console.log('–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', {
            format: blobType,
            size: (audioBlob.size / 1024).toFixed(2) + ' KB'
            // duration: mediaRecorder.duration.toFixed(2) + ' —Å–µ–∫'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
        userAudioAnswer.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
recordButton.addEventListener('click', toggleRecording);

function setupVisualizer(stream) {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const analyser = audioContext.createAnalyser();
    const source = audioContext.createMediaStreamSource(stream);
    source.connect(analyser);
    analyser.fftSize = 256;

    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);
    const canvas = audioVisualizer;
    const canvasCtx = canvas.getContext('2d');

    function draw() {
        requestAnimationFrame(draw);
        analyser.getByteFrequencyData(dataArray);

        canvasCtx.clearRect(0, 0, canvas.width, canvas.height);
        const barWidth = (canvas.width / bufferLength) * 2.5;
        let x = 0;

        for (let i = 0; i < bufferLength; i++) {
            const barHeight = dataArray[i] / 2;
            canvasCtx.fillStyle = `rgb(100, 150, 255)`;
            canvasCtx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
            x += barWidth + 1;
        }
    }

    draw();
}

function stopVisualization() {
    const canvas = audioVisualizer;
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
}


// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–û–ù–ï–¶ =====


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞
function initializeDictation() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
    startModal.style.display = 'flex';
    confirmStartBtn.setAttribute('aria-disabled', 'false');
    confirmStartBtn.focus();

    initTabloSentenceCounter();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    const firstSentence = allSentences[0];
    audio.src = firstSentence.audio;
    audio_tr.src = firstSentence.audio_tr;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    const checkReady = setInterval(() => {
        if (audio.readyState > 3 && audio_tr.readyState > 3) {
            clearInterval(checkReady);
            isAudioLoaded = true;
            confirmStartBtn.disabled = false;
        }
    }, 100);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞
confirmStartBtn.addEventListener('click', () => {
    if (!isAudioLoaded) return;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    startModal.style.display = 'none';

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å OTO –∫–∞–∫ –∏ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å
    playMultipleAudios(playSequence); // "oto"

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    inputField.focus();
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Enter –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:
confirmStartBtn.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && isAudioLoaded) {
        startModal.style.display = 'none';
        playMultipleAudios(playSequence);
        inputField.focus();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function initializeSentences() {
    allSentences.forEach(sentence => {
        sentence.text_check = -1;
        sentence.audio_check = -1;
    });
}

function updateCheckResult(key, type, value) {
    const sentence = allSentences.find(s => s.key === key);
    if (sentence) {
        sentence[type] = value;
    }
}

function startNewGame() {
    console.log("üëÄ startNewGame()");
    currentSentenceIndex = 0;
    // renderSentenceCounter(currentSentenceIndex, allSentences);

}

function showCurrentSentence(showIndex) {
    currentSentenceIndex = showIndex;
    updateTabloSentenceCounter(showIndex);
    //renderSentenceCounter(currentSentenceIndex, allSentences);
    const sentence = allSentences[currentSentenceIndex];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞
    userAudioAnswer.innerHTML = '';

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    disableCheckButton(true);
    disableRecordButton(true);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ
    audio.src = sentence.audio;
    audio_tr.src = sentence.audio_tr;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    document.getElementById("correctAnswer").innerHTML = sentence.text;
    document.getElementById("correctAnswer").style.display = "none";
    document.getElementById("translation").innerHTML = sentence.translation;
    document.getElementById("translation").style.display = "none";


    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    inputField.innerHTML = "";
    inputField.focus();
    textAttemptCount = 0;


    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    let audioLoaded = 0;
    const totalAudio = 2; // –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥


    function checkAndPlay() {
        audioLoaded++;
        if (audioLoaded === totalAudio) {
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => playMultipleAudios(playSequence), 300);
        }
    }

    audio.oncanplaythrough = checkAndPlay;
    audio_tr.oncanplaythrough = checkAndPlay;

    // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (audio.readyState > 3) checkAndPlay();
    if (audio_tr.readyState > 3) checkAndPlay();


}


// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
function nextSentence() {
    const total = allSentences.length;
    let nextIndex = currentSentenceIndex + 1;

    while (nextIndex < total) {
        const sentence = allSentences[nextIndex];
        if (sentence.text_check === -1) {
            showCurrentSentence(nextIndex); // ‚Üê –∏–ª–∏ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            return;
        }
        nextIndex++;
    }

    checkIfAllCompleted();
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ª–∏–±–æ –≤ –∫–æ–Ω—Ü–µ, –ª–∏–±–æ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    console.log("‚úÖ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö.");
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
function previousSentence() {
    let prevIndex = currentSentenceIndex - 1;

    while (prevIndex >= 0) {
        const sentence = allSentences[prevIndex];
        if (sentence.text_check === -1) {
            showCurrentSentence(prevIndex); // ‚Üê –∏–ª–∏ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            return;
        }
        prevIndex--;
    }

    checkIfAllCompleted();

    console.log("üö´ –†–∞–Ω–µ–µ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
function updateCounter() {
    console.log("üëÄ updateCounter()" + allSentences.length);
    //renderSentenceCounter(currentSentenceIndex, allSentences)
}


// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function clearText() {
    inputField.innerHTML = '';
    // correctAnswerDiv.innerHTML = '';
    // translationDiv.style.display = 'none';
    // audio.currentTime = 0;
    // audio.play();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
function recordAudio() {

}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
async function loadAudio() {

    try {
        audio.src = allSentences[currentSentenceIndex].audio;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }

    try {
        audio_tr.src = sentences[currentSentenceIndex].audio_tr;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio_tr.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", function () {
    initializeSentences();
    updateCounter();
    initializeDictation();
    loadLanguageCodes();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
    console.group("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤:");
    const formatsToCheck = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC
        'audio/webm; codecs=opus',       // Opus
        'audio/webm',                    // Fallback WebM
        'audio/wav'                      // WAV (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    ];

    formatsToCheck.forEach(format => {
        console.log(`${format}:`, MediaRecorder.isTypeSupported(format));
    });
    console.groupEnd();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
    console.log("–ë—Ä–∞—É–∑–µ—Ä:", navigator.userAgent);
    console.log("–Ø–∑—ã–∫–æ–≤—ã–µ –∫–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", languageCodes);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è inputField
inputField.addEventListener('keydown', function (event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        checkText();
    }
});

inputField.addEventListener('input', function () {
    const plainText = inputField.innerText;
    if (inputField.innerHTML !== plainText) {
        const cursorPos = saveCursorPosition(inputField);
        inputField.innerHTML = plainText;
        restoreCursorPosition(inputField, cursorPos);
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
function simplifyText(text) {
    return text
        .toLowerCase()
        // –£–¥–∞–ª—è–µ–º –í–°–ï –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, –∫–∞–≤—ã—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[\u0027\u2018\u2019\u0060\u00B4'‚Äò‚Äô`¬¥]/g, "")
        // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[.,!?;:"¬´¬ª()]/g, "")
        .replace(/\s+/g, " ")
        .trim()
        .split(" ");
}

function findFirstErrorIndex(word1, word2) {
    const len = Math.min(word1.length, word2.length);
    for (let k = 0; k < len; k++) {
        if (word1[k] !== word2[k]) return k;
    }
    return len;
}

function renderResult(original, userVerified) {

    const correctLine = [];
    let foundError = false;
    let originalIndex = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            correctLine.push(`<span class="word-correct">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "missing") {
            correctLine.push(`<span class="word-missing">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "error") {
            const before = word.correctText.slice(0, word.errorIndex);
            const errorLetter = word.correctText[word.errorIndex] || "";
            const after = word.correctText.slice(word.errorIndex + 1);

            const correctHTML =
                `<span class="correct-line-word">` +
                `${before}<span class="correct-line-letter">${errorLetter}</span>${after}` +
                `</span> `;

            correctLine.push(correctHTML);
            originalIndex++;
            foundError = true;
        } else if (word.type === "raw_user") {
            // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        }
    });

    if (foundError) {
        const remainingWords = original.trim().split(/\s+/).slice(originalIndex);
        remainingWords.forEach(word => {
            correctLine.push(`<span>${word}</span> `);
        });
    }
    else {
        // checkNextDiv.focus();
        recordButton.focus();
    }

    correctAnswerDiv.innerHTML = correctLine.join("");
}

function renderToEditable(userVerified) {
    let html = "";
    let errorFound = false;
    let totalOffset = 0;
    let errorOffset = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "missing") {
            html += `<span class="word-missing">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "error") {
            const before = word.userText.slice(0, word.errorIndex);
            const wrongLetter = word.userText[word.errorIndex] || "";
            const after = word.userText.slice(word.errorIndex + 1);

            html += `<span class="word-error">${before}<span class="letter-error">${wrongLetter}</span>${after} </span>`;

            if (!errorFound) {
                errorOffset = totalOffset + before.length + 1;
                errorFound = true;
            }
            totalOffset += word.userText.length + 1;
        } else if (word.type === "raw_user") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        }
    });

    inputField.innerHTML = html.trim();
    setCursorAtOffset(inputField, errorFound ? errorOffset : totalOffset);
}

function setCursorAtOffset(root, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            if (currentOffset + node.length >= offset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            } else {
                currentOffset += node.length;
            }
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(root);
}

function saveCursorPosition(containerEl) {
    const sel = window.getSelection();
    if (!sel.rangeCount) return null;
    const range = sel.getRangeAt(0);
    const preRange = range.cloneRange();
    preRange.selectNodeContents(containerEl);
    preRange.setEnd(range.startContainer, range.startOffset);
    return preRange.toString().length;
}

function restoreCursorPosition(containerEl, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            const nextOffset = currentOffset + node.length;
            if (offset <= nextOffset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            }
            currentOffset = nextOffset;
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(containerEl);
}

function playMultipleAudios(sequence) {
    const steps = sequence.split(''); // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "oto" ‚Üí ["o", "t", "o"])
    let index = 0;

    function playNext() {
        if (index >= steps.length) return;

        const currentAudio = steps[index] === 'o' ? audio : audio_tr; // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        if (!currentAudio) {
            console.warn('–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —à–∞–≥–∞:', steps[index]);
            index++;
            return playNext();
        }

        currentAudio.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º
        currentAudio.play()
            .then(() => {
                currentAudio.onended = () => {
                    index++;
                    playNext(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                };
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                index++;
                playNext(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            });
    }

    playNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
}

function disableCheckButton(active) {
    const checkBtn = document.getElementById('checkBtn');
    const userInput = document.getElementById('userInput');

    if (checkBtn) {
        if (active) {
            checkBtn.disabled = false;
            checkBtn.innerHTML = '<img src="/static/icons/test0.svg" alt="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å">';
            if (userInput) userInput.contentEditable = "true";
        } else {
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<img src="/static/icons/test1.svg" alt="–ì–∞–ª–æ—á–∫–∞">';
            if (userInput) userInput.contentEditable = "false";
        }
    }
}

function check(original, userInput, currentKey) {
    const simplOriginal = simplifyText(original);
    const simplUser = simplifyText(userInput);

    const originalWords = original.trim().split(/\s+/);
    const userWords = userInput.trim().split(/\s+/);

    const userVerified = [];
    let i = 0, j = 0;
    let foundError = false;

    while (i < simplOriginal.length || j < simplUser.length) {
        const wordOrig = simplOriginal[i];
        const wordUser = simplUser[j];
        const fullWordOrig = originalWords[i] || "";
        const fullWordUser = userWords[j] || "";

        if (foundError) {
            if (j < userWords.length) {
                userVerified.push({ type: "raw_user", text: userWords[j] });
                j++;
            } else {
                break;
            }
        } else if (wordOrig === wordUser) {
            userVerified.push({ type: "correct", text: fullWordOrig });
            i++; j++;
        } else if (simplOriginal[i + 1] === wordUser) {
            userVerified.push({ type: "missing", text: fullWordOrig });
            i++;
        } else {
            const errorIndex = findFirstErrorIndex(wordOrig, wordUser);
            userVerified.push({
                type: "error",
                userText: fullWordUser,
                correctText: fullWordOrig,
                errorIndex: errorIndex
            });
            i++; j++;
            foundError = true;
        }
    }

    // === [–í–°–¢–ê–í–¨ –≠–¢–û –ü–ï–†–ï–î –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –§–£–ù–ö–¶–ò–ò check()] ===
    if (!foundError) {
        // –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏?
        if (textAttemptCount === 0) {
            updateCheckResult(currentKey, "text_check", 0);
        } else {
            updateCheckResult(currentKey, "text_check", textAttemptCount);
        }

        allSentences[currentSentenceIndex].text_check = textAttemptCount === 0 ? 0 : textAttemptCount;
        // updateCurrentButtonStatus(currentSentenceIndex, allSentences[currentSentenceIndex]);
        updateTabloSentenceCounter(currentSentenceIndex)
        disableCheckButton(false);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É
        // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ–∫—É—Å
        recordButton.focus();
    } else {
        // –û—à–∏–±–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        textAttemptCount++;
    }

    return userVerified;
}

function checkText() {
    const original = allSentences[currentSentenceIndex].text;
    const userInput = inputField.innerText;
    const currentKey = allSentences[currentSentenceIndex].key;
    const result = check(original, userInput, currentKey);
    const currentSentence = allSentences[currentSentenceIndex];

    renderToEditable(result);
    renderResult(original, result);

    const allCorrect = result.every(word => word.type === "correct");

    // // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
    // if (first_pass_new_sentences) {
    //     first_pass_new_sentences = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    //     currentSentence.completed_correctly = allCorrect;
    // }

    correctAnswerDiv.style.display = "block";
    if (allCorrect) {
        translationDiv.style.display = "block";
        setTimeout(() => playMultipleAudios(successSequence), 500); // "ot" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    } else {
        translationDiv.style.display = "none";
    }
}

document.addEventListener('keydown', function (event) {
    if (event.ctrlKey && event.key === '1') {
        const audio = document.getElementById('audio');
        if (audio) {
            audio.play();
        }
    } else if (event.ctrlKey && event.key === '2') {
        const audio_tr = document.getElementById('audio_tr');
        if (audio_tr) {
            audio_tr.play();
        }
    }
});

document.getElementById("sentenceCounter").textContent =
    `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${currentSentenceIndex + 1} / ${sentences.length}`;

document.getElementById("userInput").addEventListener("input", function () {
    document.getElementById("correctAnswer").style.display = "none";
    document.getElementById("translation").style.display = "none";
});

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à script_dictation.js, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞


function clickBtnRestartAll() {
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    allSentences.forEach(sentence => {
        sentence.text_check = -1;
        sentence.audio_check = -1;
    });

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 
    currentSentenceIndex = 0;
    showCurrentSentence(currentSentenceIndex);

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById("finishModal").style.display = "none";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"
function clickBtnRestartErrors() {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ (text_check > 0)
    const errorSentences = allSentences.filter(sentence => sentence.text_check > 0);

    if (errorSentences.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏
        allSentences.forEach(sentence => {
            if (sentence.text_check > 0) {
                sentence.text_check = -1;
                sentence.audio_check = -1;
            }
        });
        currentSentenceIndex = 0;
        for (let i = 0; i < allSentences.length; i++) {
            if (allSentences[i].text_check = -1) {
                currentSentenceIndex = i;
                break;
            };
            showCurrentSentence(currentSentenceIndex);
        }
    } else {
        alert("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏!");
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById("finishModal").style.display = "none";
}

function clickBackToList() {
    window.location.href = "/"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
}
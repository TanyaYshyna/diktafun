document.addEventListener('DOMContentLoaded', function () {
    console.log('DOM loaded, starting language selector initialization...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const configElement = document.getElementById('language-config');
    if (!configElement) {
        console.error('‚ùå Language config element not found');
        showErrorState('Element #language-config not found');
        return;
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const userLanguageData = {
        nativeLanguage: configElement.dataset.nativeLanguage || 'en',
        learningLanguages: configElement.dataset.learningLanguages ?
            JSON.parse(configElement.dataset.learningLanguages) : ['en'],
        currentLearning: configElement.dataset.currentLearning || 'en'
    };

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤
    const LANGUAGE_DATA = configElement.dataset.languageData ?
        JSON.parse(configElement.dataset.languageData) : null;

    console.log('User language data:', userLanguageData);
    console.log('Language data available:', !!LANGUAGE_DATA);

    const originalValues = { ...userLanguageData };
    let languageSelector = null;

    async function initializeLanguageSelector() {
        try {
            console.log('üîÑ Initializing language selector...');

            // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä
            // –î–ª—è –ø—Ä–æ—Ñ–∏–ª—è - –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä
            const profileSelector = initLanguageSelector('language-selector-container', {
                mode: 'profile',
                nativeLanguage: userLanguageData.nativeLanguage,
                learningLanguages: userLanguageData.learningLanguages,
                currentLearning: userLanguageData.currentLearning,
                languageData: LANGUAGE_DATA,
                onLanguageChange: function (values) {
                    checkForChanges(values);
                }
            });

            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–æ–∫
            window.addEventListener('languageSelectorError', function (event) {
                console.error('Language selector error event:', event.detail);
                showErrorState(event.detail.message);
            });

        } catch (error) {
            console.error('‚ùå Initialization failed:', error);
            showErrorState('Initialization error: ' + error.message);
        }
    }

    function checkForChanges(currentValues) {
        const saveBtn = document.getElementById('save-changes-btn');
        const cancelBtn = document.getElementById('cancel-changes-btn');

        if (!saveBtn || !cancelBtn) return;

        updateHiddenFields(currentValues);

        const hasChanges =
            currentValues.nativeLanguage !== originalValues.nativeLanguage ||
            JSON.stringify(currentValues.learningLanguages) !== JSON.stringify(originalValues.learningLanguages) ||
            currentValues.currentLearning !== originalValues.currentLearning;

        saveBtn.disabled = !hasChanges;
        cancelBtn.style.display = hasChanges ? 'inline-block' : 'none';
    }

    function updateHiddenFields(values) {
        const nativeInput = document.getElementById('native-lang-input');
        const learningInput = document.getElementById('learning-langs-input');
        const currentInput = document.getElementById('current-learning-input');

        if (nativeInput) nativeInput.value = values.nativeLanguage || '';
        if (learningInput) learningInput.value = (values.learningLanguages || []).join(',');
        if (currentInput) currentInput.value = values.currentLearning || '';
    }

    function showErrorState(message) {
        const container = document.getElementById('language-selector-container');
        if (container) {
            container.innerHTML = `
                <div class="language-error">
                    <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
                    <p>${message}</p>
                    <div class="debug-info">
                        <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</strong> –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞</p>
                        <p><strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</strong></p>
                        <ul>
                            <li>–ù–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ #language-config</li>
                            <li>–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö</li>
                            <li>–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö</li>
                        </ul>
                    </div>
                    <button onclick="location.reload()" class="retry-btn">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            `;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    const cancelBtn = document.getElementById('cancel-changes-btn');
    if (cancelBtn) {
        cancelBtn.addEventListener('click', function () {
            if (languageSelector) {
                languageSelector.setValues(originalValues);
                checkForChanges(originalValues);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const profileForm = document.getElementById('profile-form');
    if (profileForm) {
        profileForm.addEventListener('submit', function (e) {
            const saveBtn = document.getElementById('save-changes-btn');
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            }
        });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializeLanguageSelector();
});
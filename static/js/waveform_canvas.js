/**
 * WaveformCanvas - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ-–≤–æ–ª–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ canvas
 * –ó–∞–º–µ–Ω—è–µ—Ç Peaks.js —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
class WaveformCanvas {
    constructor(containerElement, options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ canvas
        this.container = containerElement;
        this.canvas = null;
        this.ctx = null;

        // –°–≤–æ–π—Å—Ç–≤–∞ –∞—É–¥–∏–æ
        this.audioContext = null;
        this.audioBuffer = null;
        this.audioElement = null;
        this.duration = 0;
        this.currentTime = 0;
        this.isPlaying = false;

        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.width = 0;
        this.height = 0;
        this.pixelRatio = window.devicePixelRatio || 1;

        // –°–≤–æ–π—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞
        this.region = {
            start: 0,
            end: 0
        };

        // –ü–æ–∑–∏—Ü–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        this.playheadPosition = 0;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.dragState = {
            isDragging: false,
            dragType: null, // 'playhead', 'start', 'end', null
            startX: 0,
            startTime: 0
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            // –¶–≤–µ—Ç–∞ –∏–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            waveColor: this.getCSSVariable('--color-button-text-purple'),
            regionColor: this.getCSSVariable('--color-button-yellow'), // –ë–æ–ª–µ–µ –≤–∏–¥–∏–º—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            startMarkerColor: this.getCSSVariable('--color-button-text-yellow'),
            endMarkerColor: this.getCSSVariable('--color-button-text-yellow'),
            playheadColor: this.getCSSVariable('--color-button-text-pink'),
            backgroundColor: this.getCSSVariable('--color-button-purple'),

            // –†–∞–∑–º–µ—Ä—ã –º–∞—Ä–∫–µ—Ä–æ–≤
            markerWidth: 8,
            markerHeight: 20,
            playheadWidth: 2,

            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–æ–Ω—ã
            hitZoneSize: 10
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.callbacks = {
            onRegionUpdate: null,
            onSeek: null,
            onReady: null,
            onPlaybackEnd: null
        };

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ
        this.currentAudio = null;
        this.playheadInterval = null;
        this.timeUpdateHandler = null;
        this.pauseHandler = null;
        this.endedHandler = null;

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø—Ü–∏–∏
        Object.assign(this.config, options);

        this.init();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
     */
    getCSSVariable(variable) {
        return getComputedStyle(document.documentElement)
            .getPropertyValue(variable)
            .trim();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
     */
    init() {
        if (!this.container) {
            throw new Error('Container element is required');
        }

        // –°–æ–∑–¥–∞–µ–º canvas
        this.canvas = document.createElement('canvas');
        this.canvas.style.display = 'block';
        this.canvas.style.width = '100%';
        this.canvas.style.height = '100%';

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º canvas
        this.container.innerHTML = '';
        this.container.appendChild(this.canvas);

        this.ctx = this.canvas.getContext('2d');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.setupResizeObserver();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        this.render();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ canvas
     */
    setupResizeObserver() {
        const resizeObserver = new ResizeObserver(() => {
            this.resize();
        });
        resizeObserver.observe(this.container);
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
     */
    resize() {
        const rect = this.container.getBoundingClientRect();
        this.width = rect.width;
        this.height = rect.height;

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä–∞–≤–Ω—ã 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if (this.width === 0 || this.height === 0) {
            // console.warn('WaveformCanvas: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ');
            this.width = Math.max(this.width, 800);
            this.height = Math.max(this.height, 90);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas —Å —É—á–µ—Ç–æ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        this.canvas.width = this.width * this.pixelRatio;
        this.canvas.height = this.height * this.pixelRatio;

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ç–∫–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        this.ctx.scale(this.pixelRatio, this.pixelRatio);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∏–ª—è canvas
        this.canvas.style.width = this.width + 'px';
        this.canvas.style.height = this.height + 'px';

        this.render();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
     */
    setupEventListeners() {
        this.canvas.addEventListener('mousedown', this.onMouseDown.bind(this));
        this.canvas.addEventListener('mousemove', this.onMouseMove.bind(this));
        this.canvas.addEventListener('mouseup', this.onMouseUp.bind(this));
        this.canvas.addEventListener('click', this.onClick.bind(this));

        // –°–æ–±—ã—Ç–∏—è –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.canvas.addEventListener('touchstart', this.onTouchStart.bind(this));
        this.canvas.addEventListener('touchmove', this.onTouchMove.bind(this));
        this.canvas.addEventListener('touchend', this.onTouchEnd.bind(this));
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Audio —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async loadAudioFromElement(audioElement) {
        try {
            console.log('üåä WaveformCanvas: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');

            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.audioContext) {
                this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }

            // –ü–æ–ª—É—á–∞–µ–º URL –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const audioUrl = audioElement.src;

            // –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            const response = await fetch(audioUrl);
            const arrayBuffer = await response.arrayBuffer();
            this.audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);

            const rawDurationEl = this.audioBuffer.duration || 0;
            this.duration = Math.floor(rawDurationEl * 100) / 100; // –æ—Ç—Å–µ—á–µ–Ω–∏–µ –¥–æ —Å–æ—Ç—ã—Ö
            console.log('‚úÖ WaveformCanvas: –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', this.duration);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            this.region.end = this.duration;

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º playhead –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if (typeof this.setCurrentTime === 'function') {
                this.setCurrentTime(this.region.start || 0);
            }

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–æ–ª–Ω—É
            this.render();

            // –í—ã–∑—ã–≤–∞–µ–º callback –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if (this.callbacks.onReady) {
                this.callbacks.onReady();
            }

        } catch (error) {
            console.error('‚ùå WaveformCanvas: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    async loadAudio(audioUrl) {
        try {
            console.log('üåä WaveformCanvas: Loading audio from', audioUrl);

            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.audioContext) {
                this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            const response = await fetch(audioUrl);
            const arrayBuffer = await response.arrayBuffer();
            this.audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);

            const rawDuration = this.audioBuffer.duration || 0;
            this.duration = Math.floor(rawDuration * 100) / 100; // –æ—Ç—Å–µ—á–µ–Ω–∏–µ –¥–æ —Å–æ—Ç—ã—Ö
            console.log('‚úÖ WaveformCanvas: Audio loaded, duration:', this.duration);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            this.region.end = this.duration;

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º playhead –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if (typeof this.setCurrentTime === 'function') {
                this.setCurrentTime(this.region.start || 0);
            }

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–æ–ª–Ω—É
            this.render();

            // –í—ã–∑—ã–≤–∞–µ–º callback –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if (this.callbacks.onReady) {
                this.callbacks.onReady();
            }

        } catch (error) {
            console.error('‚ùå WaveformCanvas: Error loading audio:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
     */
    getDuration() {
        return this.duration;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏–æ–Ω–∞
     */
    setRegion(start, end) {
        // console.log('üéØ WaveformCanvas: setRegion –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', start, '-', end);
        // console.trace('üéØ WaveformCanvas: –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ setRegion:');

        this.region.start = Math.max(0, Math.min(start, this.duration));
        this.region.end = Math.max(this.region.start, Math.min(end, this.duration));

        // console.log('üéØ WaveformCanvas: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω', this.region.start, '-', this.region.end);

        this.render();

        if (this.callbacks.onRegionUpdate) {
            this.callbacks.onRegionUpdate(this.region);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω
     */
    getRegion() {
        return { ...this.region };
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
     */
    updateRegion({ start, end }) {
        if (start !== undefined) this.region.start = Math.max(0, Math.min(start, this.duration));
        if (end !== undefined) this.region.end = Math.max(this.region.start, Math.min(end, this.duration));
        console.log('üîß WaveformCanvas: updateRegion –≤—ã–∑–≤–∞–Ω, –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:', this.region.start.toFixed(2), '-', this.region.end.toFixed(2));
        this.render();

        if (this.callbacks.onRegionUpdate) {
            console.log('üîß WaveformCanvas: –í—ã–∑—ã–≤–∞–µ–º callback onRegionUpdate');
            this.callbacks.onRegionUpdate(this.region);
        } else {
            console.warn('‚ö†Ô∏è WaveformCanvas: Callback onRegionUpdate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ø–æ–∑–∏—Ü–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
     */
    setCurrentTime(time) {
        this.currentTime = Math.max(0, Math.min(time, this.duration));
        this.playheadPosition = this.currentTime;
        // console.log('üéØ WaveformCanvas: setCurrentTime —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', this.currentTime);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∞—É–¥–∏–æ —Å –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—É–¥–∏–æ –ù–ï –∏–≥—Ä–∞–µ—Ç
        if (this.currentAudio && this.currentAudio.paused) {
            this.currentAudio.currentTime = this.currentTime;
            // console.log('üéØ WaveformCanvas: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∞—É–¥–∏–æ —Å –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–æ–π:', this.currentTime);
        }

        this.render();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    updatePlayheadFromAudio(audioElement) {
        if (audioElement && this.duration > 0) {
            const currentTime = audioElement.currentTime || 0;
            this.playheadPosition = currentTime;
            this.currentTime = currentTime; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º currentTime —Ç–æ–∂–µ!
            this.render();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    getCurrentTime() {
        return this.currentTime;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–∞
     */
    onRegionUpdate(callback) {
        this.callbacks.onRegionUpdate = callback;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–∏—Å–∫–∞
     */
    onSeek(callback) {
        this.callbacks.onSeek = callback;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
     */
    onReady(callback) {
        this.callbacks.onReady = callback;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
     */
    onPlaybackEnd(callback) {
        this.callbacks.onPlaybackEnd = callback;
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞
     */
    async startPlayback(audioElement) {
        console.log('üéØ WaveformCanvas: –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
        if (!audioElement) {
            console.warn('WaveformCanvas: audioElement is null in startPlayback');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if (!audioElement.src) {
            console.warn('WaveformCanvas: audioElement.src is empty');
            return;
        }

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (audioElement.readyState < 2) { // HAVE_CURRENT_DATA
            console.log('üéØ WaveformCanvas: –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ...');
            await new Promise((resolve, reject) => {
                audioElement.onloadeddata = resolve;
                audioElement.onerror = reject;
                // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–Ω–µ—Ç
                setTimeout(() => reject(new Error('Timeout loading audio')), 5000);
            });
        }

        // –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π / –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äì —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–æ –≤—Å–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('üéØüéØüéØüéØüéØüéØüéØüéØüéØüéØ WaveformCanvas: –†–µ–≥–∏–æ–Ω:', this.region);
        if (!this.region || this.region.end <= this.region.start) {
            if (this.region.end < this.region.start) {
                console.log('üéØüéØüéØüéØüéØüéØüéØüéØüéØüéØ WaveformCanvas: –†–µ–≥–∏–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ú–ï–ù–Ø–ï–ú –ú–ï–°–¢–ê–ú–ò');
                const st = this.region.start;
                this.region.start = this.region.end;
                this.region.end = st
            } else if (this.region.end = this.region.start) {
                console.log('üéØüéØüéØüéØüéØüéØüéØüéØüéØüéØ WaveformCanvas: –†–µ–≥–∏–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ò–ì–†–ê–ï–ú –í–°–ï –ê–£–î–ò–û');
                this.region.start = 0;
                this.region.end = this.duration || audioElement.duration || 0;
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        let startTime = this.currentTime;
        console.log('üéØüéØüéØ WaveformCanvas: Playhead –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞:', startTime);

        // –ï—Å–ª–∏ playhead –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞ - –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞
        if (this.currentTime < this.region.start || this.currentTime > this.region.end) {
            startTime = this.region.start;
            this.setCurrentTime(startTime);
            console.log('üéØüéØüéØüéØüéØ WaveformCanvas: Playhead –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞:', startTime);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∞—É–¥–∏–æ
        audioElement.currentTime = Math.max(0, startTime || 0);

        // –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        this.startAudioControl(audioElement);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        try {
            console.log('üéØ WaveformCanvas: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏–∏:', startTime);
            console.log('üéØüéØüéØüéØüéØüéØüéØüéØüéØüéØ WaveformCanvas: –†–µ–≥–∏–æ–Ω:', this.region);
            console.log('üéØ WaveformCanvas: audioElement.duration:', audioElement.duration);
            await audioElement.play();
            console.log('üéØ WaveformCanvas: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('‚ùå WaveformCanvas: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ)
     */
    clearPlayheadInterval() {
        if (this.playheadInterval) {
            clearInterval(this.playheadInterval);
            this.playheadInterval = null;
        }
    }


    startAudioControl(audioElement) {
        console.log('üéØ WaveformCanvas: startAudioControl –≤—ã–∑–≤–∞–Ω');
        this.currentAudio = audioElement;
        this.isPlaying = true;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä –æ —Ç–µ–∫—É—â–µ–º –ø–ª–µ–µ—Ä–µ
        if (window.AudioManager) {
            console.log('üéØ WaveformCanvas: –£–≤–µ–¥–æ–º–ª—è–µ–º AudioManager');
            window.AudioManager.setCurrent(audioElement);
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        // this.stopAudioControl();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ playhead —á–µ—Ä–µ–∑ rAF –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const tick = () => {
            if (!this.isPlaying || !this.currentAudio) return;
            this.updatePlayheadFromAudio(audioElement);
            this.playheadInterval = requestAnimationFrame(tick);
        };
        this.playheadInterval = requestAnimationFrame(tick);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ timeupdate –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        const EPS = 0.0005; // –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        this.timeUpdateHandler = () => {
            if (audioElement.currentTime + EPS >= this.region.end) {
                console.log('üéØ WaveformCanvas timeupdate: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ä–µ–≥–∏–æ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
                console.log('üéØ WaveformCanvas: –í—ã–∑—ã–≤–∞–µ–º audioElement.pause()');
                audioElement.pause();
                audioElement.currentTime = this.region.start; // –ê—É–¥–∏–æ –ø—Ä—ã–≥–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞
                this.setCurrentTime(this.region.start); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º playhead –≤ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞
                this.isPlaying = false;

                // –í—ã–∑—ã–≤–∞–µ–º callback –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if (this.callbacks.onPlaybackEnd) {
                    console.log('üéØ WaveformCanvas: –í—ã–∑—ã–≤–∞–µ–º callback onPlaybackEnd');
                    this.callbacks.onPlaybackEnd();
                }

                // // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                // audioElement.removeEventListener('timeupdate', this.timeUpdateHandler);
            }
        };
        audioElement.addEventListener('timeupdate', this.timeUpdateHandler);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è pause (–∫–æ–≥–¥–∞ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        this.pauseHandler = () => {
            console.log('üéØ WaveformCanvas: –ê—É–¥–∏–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–≤–Ω–µ');
            this.isPlaying = false;
            this.stopAudioControl();
        };
        audioElement.addEventListener('pause', this.pauseHandler);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ended (–∫–æ–≥–¥–∞ –∞—É–¥–∏–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º)
        this.endedHandler = () => {
            console.log('üéØ WaveformCanvas: –ê—É–¥–∏–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
            this.isPlaying = false;
            this.stopAudioControl();

            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º callback onPlaybackEnd - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–ª–µ–µ—Ä –≤ playAudioFile
            // –ü–ª–µ–µ—Ä —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π onended
        };
        audioElement.addEventListener('ended', this.endedHandler);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –∞—É–¥–∏–æ
     */
    stopAudioControl() {
        // console.log('üéØ WaveformCanvas: stopAudioControl –≤—ã–∑–≤–∞–Ω');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        let currentAudioTime = 0;
        if (this.currentAudio) {
            currentAudioTime = this.currentAudio.currentTime;
            this.currentAudio.pause();
            // console.log('üéØ WaveformCanvas: –ê—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏:', currentAudioTime);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é playhead –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∞—É–¥–∏–æ
        this.playheadPosition = currentAudioTime;
        this.currentTime = currentAudioTime;

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        this.render();

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        // if (this.currentAudio) {
        //     this.currentAudio.pause();
        //     console.log('üéØ WaveformCanvas: –ê—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        // }

        // –û—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ playhead
        if (this.playheadInterval) {
            if (typeof cancelAnimationFrame !== 'undefined') {
                cancelAnimationFrame(this.playheadInterval);
            } else {
                clearInterval(this.playheadInterval);
            }
            this.playheadInterval = null;
            // console.log('üéØ WaveformCanvas: playhead update loop –æ—á–∏—â–µ–Ω');
        }

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.currentAudio) {
            if (this.timeUpdateHandler) {
                this.currentAudio.removeEventListener('timeupdate', this.timeUpdateHandler);
                this.timeUpdateHandler = null;
                // console.log('üéØ WaveformCanvas: timeUpdateHandler —É–¥–∞–ª–µ–Ω');
            }
            if (this.pauseHandler) {
                this.currentAudio.removeEventListener('pause', this.pauseHandler);
                this.pauseHandler = null;
                // console.log('üéØ WaveformCanvas: pauseHandler —É–¥–∞–ª–µ–Ω');
            }
            if (this.endedHandler) {
                this.currentAudio.removeEventListener('ended', this.endedHandler);
                this.endedHandler = null;
                // console.log('üéØ WaveformCanvas: endedHandler —É–¥–∞–ª–µ–Ω');
            }
        }

        this.currentAudio = null;
        this.isPlaying = false;
        // console.log('üéØ WaveformCanvas: stopAudioControl –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∞—É–¥–∏–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –≤–æ–ª–Ω–µ
     */
    updateAudioPosition(time) {
        if (this.currentAudio) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏–º –ª–∏ –º—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–∞
            if (time < this.region.start) {
                time = this.region.start;
                // console.log('üéØ WaveformCanvas: –ö–ª–∏–∫ –∑–∞ –Ω–∞—á–∞–ª–æ–º —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ');
            } else if (time > this.region.end) {
                time = this.region.end;
                // console.log('üéØ WaveformCanvas: –ö–ª–∏–∫ –∑–∞ –∫–æ–Ω—Ü–æ–º —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü');
            }

            this.currentAudio.currentTime = time;
            // console.log('üéØ WaveformCanvas: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∞—É–¥–∏–æ –Ω–∞:', time);
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ - —Ä–∏—Å—É–µ—Ç –≤—Å–µ
     */
    render() {
        if (!this.ctx || !this.width || !this.height) return;

        // –û—á–∏—â–∞–µ–º canvas
        this.ctx.clearRect(0, 0, this.width, this.height);

        // –†–∏—Å—É–µ–º —Ñ–æ–Ω
        this.drawBackground();

        // –†–∏—Å—É–µ–º –≤–æ–ª–Ω—É –µ—Å–ª–∏ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if (this.audioBuffer) {
            // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –≤–æ–ª–Ω—É
            this.drawWaveform();

            this.drawRegion();
            this.drawWaveformOverRegion();

            // Draw markers
            this.drawMarkers();

            // Draw playhead
            this.drawPlayhead();
        }
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–∞
     */
    drawBackground() {
        this.ctx.fillStyle = this.config.backgroundColor;
        this.ctx.fillRect(0, 0, this.width, this.height);
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤–æ–ª–Ω—ã
     */
    drawWaveform() {
        if (!this.audioBuffer) return;

        const data = this.audioBuffer.getChannelData(0);
        const step = Math.ceil(data.length / this.width);
        const amp = this.height / 2;

        this.ctx.fillStyle = this.config.waveColor;
        this.ctx.beginPath();

        for (let i = 0; i < this.width; i++) {
            let min = 1.0;
            let max = -1.0;

            for (let j = 0; j < step; j++) {
                const datum = data[(i * step) + j];
                if (datum < min) min = datum;
                if (datum > max) max = datum;
            }

            const x = i;
            const y = (1 + min) * amp;
            const barHeight = Math.max(1, (max - min) * amp);

            this.ctx.fillRect(x, y, 1, barHeight);
        }
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
     */
    drawRegion() {
        if (this.duration === 0) {
            return;
        }

        const startX = (this.region.start / this.duration) * this.width;
        const endX = (this.region.end / this.duration) * this.width;
        const regionWidth = endX - startX;

        this.ctx.fillStyle = this.config.regionColor;
        this.ctx.fillRect(startX, 0, regionWidth, this.height);
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–æ–ª–Ω—ã –ø–æ–≤–µ—Ä—Ö —Ä–µ–≥–∏–æ–Ω–∞ (—á—Ç–æ–±—ã –≤–æ–ª–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ)
     */
    drawWaveformOverRegion() {
        if (!this.audioBuffer || this.duration === 0) return;

        const data = this.audioBuffer.getChannelData(0);
        const step = Math.ceil(data.length / this.width);
        const amp = this.height / 2;

        const startX = (this.region.start / this.duration) * this.width;
        const endX = (this.region.end / this.duration) * this.width;

        this.ctx.fillStyle = this.config.waveColor;
        this.ctx.beginPath();

        for (let i = Math.floor(startX); i < Math.ceil(endX); i++) {
            let min = 1.0;
            let max = -1.0;

            for (let j = 0; j < step; j++) {
                const datum = data[(i * step) + j];
                if (datum < min) min = datum;
                if (datum > max) max = datum;
            }

            const x = i;
            const y = (1 + min) * amp;
            const barHeight = Math.max(1, (max - min) * amp);

            this.ctx.fillRect(x, y, 1, barHeight);
        }
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
     */
    drawMarkers() {
        if (this.duration === 0) return;

        const startX = (this.region.start / this.duration) * this.width;
        const endX = (this.region.end / this.duration) * this.width;

        // –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞
        this.drawMarker(startX, this.config.startMarkerColor, 'start');

        // –ú–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞
        this.drawMarker(endX, this.config.endMarkerColor, 'end');
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
     */
    drawMarker(x, color, type) {
        // –õ–∏–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
        this.ctx.strokeStyle = color;
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        this.ctx.moveTo(x, 0);
        this.ctx.lineTo(x, this.height);
        this.ctx.stroke();

        // –†—É—á–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ (—Å–≤–µ—Ä—Ö—É)
        const handleY = 5;
        const handleWidth = this.config.markerWidth;
        const handleHeight = this.config.markerHeight;

        this.ctx.fillStyle = color;
        this.ctx.fillRect(x - handleWidth / 2, handleY, handleWidth, handleHeight);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞
        this.ctx.fillStyle = '#fff';
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText(type === 'start' ? 'S' : 'E', x, handleY + handleHeight / 2 + 4);
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
     */
    drawPlayhead() {
        if (this.duration === 0) return;

        const x = (this.playheadPosition / this.duration) * this.width;

        // –õ–∏–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        this.ctx.strokeStyle = this.config.playheadColor;
        this.ctx.lineWidth = this.config.playheadWidth;
        this.ctx.beginPath();
        this.ctx.moveTo(x, 0);
        this.ctx.lineTo(x, this.height);
        this.ctx.stroke();

        // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Å–≤–µ—Ä—Ö—É)
        const triangleSize = 8;
        this.ctx.fillStyle = this.config.playheadColor;
        this.ctx.beginPath();
        this.ctx.moveTo(x, 5);
        this.ctx.lineTo(x - triangleSize / 2, 5 + triangleSize);
        this.ctx.lineTo(x + triangleSize / 2, 5 + triangleSize);
        this.ctx.closePath();
        this.ctx.fill();
    }

    /**
    * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞—É–¥–∏–æ
    */
    updatePlayheadFromAudio(audioElement) {
        if (!audioElement || !this.audioBuffer) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–∑–∏—Ü–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –∞ –Ω–µ –ø–∏–∫—Å–µ–ª–∏
        const currentTime = audioElement.currentTime || 0;
        this.currentTime = currentTime;
        this.playheadPosition = currentTime;

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–æ–ª–Ω—É —Å –Ω–æ–≤—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫—É—Ä—Å–æ—Ä–∞
        this.render();
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
     */
    onMouseDown(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –∫–ª–∏–∫–Ω—É—Ç–æ
        const hitTarget = this.getHitTarget(x, y);

        if (hitTarget) {
            e.preventDefault();
            this.dragState.isDragging = true;
            this.dragState.dragType = hitTarget.type;
            this.dragState.startX = x;
            this.dragState.startTime = this.timeFromX(x);

            this.canvas.style.cursor = 'grabbing';
        }
    }

    onMouseMove(e) {
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        if (!this.dragState.isDragging) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ –ø–æ–¥ –º—ã—à—å—é
            const hitTarget = this.getHitTarget(x, y);
            if (hitTarget) {
                this.canvas.style.cursor = 'grab';
            } else {
                this.canvas.style.cursor = 'default';
            }
            return;
        }

        e.preventDefault();

        const newTime = this.timeFromX(x);

        switch (this.dragState.dragType) {
            case 'playhead':
                this.setCurrentTime(newTime);
                if (this.callbacks.onSeek) {
                    this.callbacks.onSeek(newTime);
                }
                break;

            case 'start':
                this.updateRegion({ start: newTime });
                break;

            case 'end':
                this.updateRegion({ end: newTime });
                break;
        }
    }

    onMouseUp(e) {
        if (this.dragState.isDragging) {
            this.dragState.isDragging = false;
            this.dragState.dragType = null;
            this.canvas.style.cursor = 'default';
        }
    }

    onClick(e) {
        // Only handle clicks if not dragging
        if (this.dragState.isDragging) return;

        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;

        // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞, WaveformCanvas —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è
        this.handleClick(x);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º X
     */
    handleClick(x) {
        const time = this.timeFromX(x);
        // console.log('üéØ WaveformCanvas: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ X:', x, '–≤—Ä–µ–º—è:', time);
        // console.log('üéØ WaveformCanvas: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–∏:', this.currentTime);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å –∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞
        let targetTime = time;

        // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–≥–∏–æ–Ω–∞ - –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º —Ç—É–¥–∞
        if (time >= this.region.start && time <= this.region.end) {
            targetTime = time;
            // console.log('üéØ WaveformCanvas: –ö–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞:', targetTime);
        } else {
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞ - –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–∞
            targetTime = this.region.start;
            // console.log('üéØ WaveformCanvas: –ö–ª–∏–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞, –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ:', targetTime);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é playhead
        this.setCurrentTime(targetTime);
        // console.log('üéØ WaveformCanvas: –ü–æ—Å–ª–µ setCurrentTime –∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ –Ω–∞:', this.currentTime);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∞—É–¥–∏–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–≥—Ä–∞–µ—Ç
        this.updateAudioPosition(targetTime);

        if (this.callbacks.onSeek) {
            this.callbacks.onSeek(targetTime);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Å–∞–Ω–∏—è
     */
    onTouchStart(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousedown', {
            clientX: touch.clientX,
            clientY: touch.clientY
        });
        this.onMouseDown(mouseEvent);
    }

    onTouchMove(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousemove', {
            clientX: touch.clientX,
            clientY: touch.clientY
        });
        this.onMouseMove(mouseEvent);
    }

    onTouchEnd(e) {
        e.preventDefault();
        const mouseEvent = new MouseEvent('mouseup', {});
        this.onMouseUp(mouseEvent);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     */
    getHitTarget(x, y) {
        if (this.duration === 0) return null;

        const halfHitZone = this.config.hitZoneSize / 2;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        const playheadX = (this.playheadPosition / this.duration) * this.width;
        if (Math.abs(x - playheadX) <= halfHitZone && y <= 30) {
            return { type: 'playhead', x: playheadX };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞
        const startX = (this.region.start / this.duration) * this.width;
        if (Math.abs(x - startX) <= halfHitZone && y <= 30) {
            return { type: 'start', x: startX };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞
        const endX = (this.region.end / this.duration) * this.width;
        if (Math.abs(x - endX) <= halfHitZone && y <= 30) {
            return { type: 'end', x: endX };
        }

        return null;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤–æ –≤—Ä–µ–º—è
     */
    timeFromX(x) {
        if (this.duration === 0) return 0;
        return Math.max(0, Math.min((x / this.width) * this.duration, this.duration));
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
     */
    xFromTime(time) {
        if (this.duration === 0) return 0;
        return (time / this.duration) * this.width;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ª–Ω—É (–≤–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
     */
    show() {
        if (this.container) {
            this.container.style.visibility = 'visible';
        }
        if (this.canvas) {
            this.canvas.style.visibility = 'visible';
        }
        console.log('üåä WaveformCanvas: –ø–æ–∫–∞–∑–∞–Ω–∞');
    }

    /**
     * –°–∫—Ä—ã—Ç—å –≤–æ–ª–Ω—É (–≤—ã–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
     */
    hide() {
        if (this.container) {
            this.container.style.visibility = 'hidden';
        }
        if (this.canvas) {
            this.canvas.style.visibility = 'hidden';
        }
        console.log('üåä WaveformCanvas: —Å–∫—Ä—ã—Ç–∞');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–∏–º–∞ –ª–∏ –≤–æ–ª–Ω–∞
     */
    isVisible() {
        return this.container && this.container.style.visibility !== 'hidden';
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤–æ–ª–Ω—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ
        this.stopAudioControl();

        if (this.audioContext) {
            this.audioContext.close();
        }
        if (this.canvas && this.canvas.parentNode) {
            this.canvas.parentNode.removeChild(this.canvas);
        }
    }
}

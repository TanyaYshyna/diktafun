// console.log("üëÄ renderSentenceCounter –≤—ã–∑–≤–∞–Ω–∞");
console.log('======================= dscript_dictation.js:');

const userManager = window.UM;
let thisNewGame = true;
// let userManager = null;
const circleBtn = document.getElementById('btn-circle-number');

const inputField = document.getElementById('userInput');
const checkNextDiv = document.getElementById('checkNext');
const checkPreviosDiv = document.getElementById('checkPrevios');
const correctAnswerDiv = document.getElementById('correctAnswer'); id = "btn-new-circle"
// const translationDiv = document.getElementById('translation');
const btnNewCircle = document.getElementById('btn-new-circle');


const btnModalTimer = document.getElementById('btn-modal-timer');
const btnModalCountPerfect = document.getElementById('btn-modal-count-perfect');
const btnModalCountCorrected = document.getElementById('btn-modal-count-corrected');
const btnModalCountAudio = document.getElementById('btn-modal-count-audio');
const btnModalCountTotal = document.getElementById('btn-modal-count-total');
const circleBtnModal = document.getElementById('btn-modal-circle-number');

const audio = document.getElementById('audio');
const audio_tr = document.getElementById('audio_tr');

let playSequenceStart = "oto";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
let playSequenceTypo = "o";  // –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (o=–æ—Ä–∏–≥–∏–Ω–∞–ª, t=–ø–µ—Ä–µ–≤–æ–¥)
let playSequenceSuccess = "ot"; // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "o" –∏–ª–∏ "to")

/**
 * @typedef {Object} Sentence
 * @property {number} serial_number // –æ—á–µ–Ω—å –≤–∞–∂–≥—ã–π - —ç—Ç–æ –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–æ 
 * (–≤ –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–∞–±–ª–æ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –≤ —Å–ø—Ä–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –∞ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å key)
 * @property {string} key
 * @property {string} text_original
 * @property {string} text_translation
 * @property {string} audio_original
 * @property {string} audio_translation
 * 
 * @property {0|1}    number_of_perfect           // 1 ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
 * @property {number} number_of_corrected         // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
 * @property {number} number_of_audio             // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
 * 
 * @property {number} circle_number_of            // 1,2,.. –∫—Ä—É–≥–∏ –ø–æ –¥–∏–∫—Ç–∞–Ω—Ç—É 
 * –æ—á–µ–Ω—å —É—Å–ª–æ–≤–Ω–æ –∫—Ä—É–≥–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –º–æ–∂–µ—Ç –≤—ã–±–æ–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–≥–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
 * (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º "—Å –Ω–∞—á–∞–ª–∞" –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º 
 * —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –≤–µ—Ä–Ω–æ)
 * @property {0|1}    circle_number_of_perfect    // 1 ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ (–Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ)
 * @property {0|1}    circle_number_of_corrected  // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (–Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ)
 * @property {number} circle_number_of_audio      // 1,2,.. –∫—Ä—É–≥–∏ –ø–æ –¥–∏–∫—Ç–∞–Ω—Ç—É (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º "—Å –Ω–∞—á–∞–ª–∞" –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Ö–∞ –≤–µ—Ä–Ω–æ)
 * 
 */
/** @type {Sentence[]} */

// const rawJson = document.getElementById("sentences-data").textContent;
// let allSentences = JSON.parse(rawJson); // –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ (—Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π)
let allSentences = [];

// —Å—É–º–º—ã –ø–æ –∏—Ç–æ–≥–∞–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—Ä—É–≥–æ–≤
let number_of_perfect = 0;          // 1 ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
let number_of_corrected = 0;       // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
let number_of_audio = 0;           // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)
let number_of_total = 0;           // 1 ‚Äî —Å–æ 2-–π –∏ –¥–∞–ª–µ–µ (—Å—É–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º)

// —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∏–∑ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω–∏–π –ø–æ —á–µ–∫–∞—É—Ç—É 
// (—É–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω allSentences –ø–æ —Ä–∞–∑–º–µ—Ä—É)
let selectedSentences = [];
let currentSentenceIndex = 0;// –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ —á–∞–∫–∞—É—Ç—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
let currentSentence = 0;   // —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ allSentences —Å kay = selectedSentences—Ö[currentSentenceIndex]

// –∏–Ω–¥–µ–∫—Å—ã 9—Ç–∏ –∫–Ω–æ–ø–æ–∫  (
// —É–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω selectedSentences –ø–æ —Ä–∞–∑–º–µ—Ä—É, 
// –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ id="sentenceCounter">)
// const maxVisible = 9;
const MAXVISIBLE = 9;
let maxIndTablo = MAXVISIBLE; // –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ —á–∏–ª–æ –º–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—Å—è
let counterTabloBtn; // –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let counterTabloIndex = 0; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let counterTabloIndex_old = 0; // –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
let buttonsTablo = [];

// –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä—É–≥–∞
let circle_number = 0;

let allCheckbox = document.getElementById('allCheckbox');
let mixControl = document.getElementById('mixControl');
let tableCheckboxes = [];


let currentDictation = {
    id: '', // ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç—É
    language_original: '',
    language_translation: '',
    title_orig: ''
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
let isAudioLoaded = false;
const startModal = document.getElementById('start-modal');
const confirmStartBtn = document.getElementById('confirmStartBtn');

// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
const count_perfect = document.getElementById('count_perfect');
const count_corrected = document.getElementById('count_corrected');
const count_audio = document.getElementById('count_audio');
const count_total = document.getElementById('count_total');

const openUserAudioModalBtn = document.getElementById('openUserAudioModalBtn');
const userAudioModal = document.getElementById('userAudioModal');
const closeUserAudioBtn = document.querySelector('.close-user-audio');
const userCancelBtn = document.getElementById('userCancelButton');
const userConfirmBtn = document.getElementById('userConfirmButton');
const userRecordBtn = document.getElementById('userRecordButton');
const userAudioStatusText = document.getElementById('userAudioStatusText');
// const userAudioTranscript = document.getElementById('userAudioTranscript');
const userAudioVisualizer = document.getElementById('userAudioVisualizer');

// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏–æ =====
// ===== –≠–ª–µ–º–µ–Ω—Ç—ã DOM =====
// –ñ–∏–≤–æ–π –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (final + interim)
const count_percent = document.getElementById('count_percent');
const recordButton = document.getElementById('recordButton');
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
recordButton.addEventListener('click', toggleRecording);

const recordStateIcon = document.getElementById('recordStateIcon'); // –∑–∞–ø–∏—Å—å/–ø–∞—É–∑–∞
const AUTO_STOP_ENABLED = true;
const AUTO_STOP_THRESHOLD = 80;     // 95%
const AUTO_STOP_STABLE_MS = 400;      // –¥–µ—Ä–∂–∏–º –ø–æ—Ä–æ–≥ ‚â•95% —Ö–æ—Ç—è –±—ã 0.4s
let srLiveText = '';
let isRecording = false;     // –∏–¥—ë—Ç –ª–∏ –∑–∞–ø–∏—Å—å (–¥–ª—è onresult)
let autoStopTimer = null;
let isStopping = false;        // –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ç–æ–ø–∞ (–∞–≤—Ç–æ + –∫–ª–∏–∫)
let lastStopCause = 'manual';  // 'manual' | 'auto'
const VIS_BAR_COLOR =
    getComputedStyle(document.documentElement)
        .getPropertyValue('--color-button-text-purple')
        .trim() || '#8BBFFF';

const audioVisualizer = document.getElementById('audioVisualizer');
// === –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–±—â–∏–µ —Å—Å—ã–ª–∫–∏) ===
let vizAC = null;        // AudioContext
let vizAnalyser = null;  // AnalyserNode
let vizSource = null;    // MediaStreamAudioSourceNode
let vizRAF = null;       // requestAnimationFrame id
let vizActive = false;   // —Ñ–ª–∞–≥ "—Ä–∏—Å—É–µ–º —Å–µ–π—á–∞—Å"

let mediaRecorder, audioChunks = [];
// let languageCodes = {};
let langCodeUrl = 'en-US';
let recognition = null;
let textAttemptCount = 0;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ-—É—Ä–æ–∫–∞ ===
const MIN_MATCH_PERCENT = 80;      // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É
const REQUIRED_PASSED_COUNT = 3;   // —Å–∫–æ–ª—å–∫–æ –∑–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–¥–∞—á–∏ —É—Ä–æ–∫–∞

// –°–ª—É–∂–µ–±–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
let passedAudioCount = 0;

let userAudioElement = null;        // –æ–¥–∏–Ω –æ–±—â–∏–π Audio()
let userAudioObjectUrl = null;      // —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏
let userPlayInited = false;         // —á—Ç–æ–±—ã –Ω–µ –≤–µ—à–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ

// --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∏–∫—Ç–∞–Ω—Ç–æ–º –≤ –º–æ–¥–∞–ª—å–≥–æ–º –æ–∫–Ω–µ -----------------------------------------------
// ====== –ü—Ä–æ—Å—Ç—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ======
const qs = (sel, root = document) => root.querySelector(sel);
const qsa = (sel, root = document) => Array.from(root.querySelectorAll(sel));

// --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã -----------------------------------------------
// ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞—É–∑—ã =====
const pauseModal = document.getElementById('pauseModal');
const pauseTimerElement = document.getElementById('pauseTimer');
const resumeBtn = document.getElementById('resumeBtn');

const dictationTimerElement = document.getElementById('timer');
const modalTimerElement = document.getElementById('modal_timer');
let dictationStart_Timer = null;
let dictationStartTime;   // –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫—É –¥–∏–∫—Ç–∞–Ω—Ç—É
let dictationAllTime = 0; // —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É (—Å—É–º–º–∞ –≤—Å—ñ—Ö –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤ –∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
let dictationTimerInterval;// —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–∫—Ç–∞–Ω—Ç—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

let pauseStartTime = null;
let pauseTimerInterval = null;
let pauseTime = 0;
let inactivityTimer = null;
// const INACTIVITY_TIMEOUT = 60000; // 1 –º–∏–Ω—É—Ç–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
const INACTIVITY_TIMEOUT = 3000; // 1 –º–∏–Ω—É—Ç–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
let gameHasAlreadyBegun = false;



function logout() {
    localStorage.removeItem('jwt_token');
    console.log('‚úÖ‚úÖ‚úÖ‚úÖ 4 ‚úÖ‚úÖ‚úÖ‚úÖtoken',token);
    setupGuestMode();
    window.location.href = '/';
}

function setupAuthHandlers() {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const logoutBtn = document.getElementById('logoutBtn');

    if (loginBtn) {
        loginBtn.addEventListener('click', () => {
            window.location.href = '/user/login';
        });
    }

    if (registerBtn) {
        registerBtn.addEventListener('click', () => {
            window.location.href = '/user/register';
        });
    }

    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
}


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
async function saveGeneratorData(generatorData) {
    try {
        const token = localStorage.getItem('jwt_token');
        console.log('‚úÖ 2 ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖtoken',this.token);
        if (!token) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            return;
        }

        const response = await fetch('/api/generator/save', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(generatorData)
        });

        if (response.ok) {
            console.log('–î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', error);
    }
}

async function loadGeneratorData() {
    try {
        const token = localStorage.getItem('jwt_token');
        console.log('‚úÖ 3 ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖtoken',this.token);
        if (!token) return null;

        const response = await fetch('/api/generator/load', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            return await response.json();
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', error);
        return null;
    }
}





// ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–º =====
function setupExitHandlers() {
    const exitModal = document.getElementById('exitModal');
    const confirmExitBtn = document.getElementById('confirmExitBtn');
    const cancelExitBtn = document.getElementById('cancelExitBtn');
    const backButtons = document.querySelectorAll('#btnBackToList, #btnBackToMain');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    backButtons.forEach(btn => {
        if (btn) {
            btn.addEventListener('click', showExitModal);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥–∞
    if (confirmExitBtn) {
        confirmExitBtn.addEventListener('click', () => {
            window.location.href = "/";
        });
    }

    if (cancelExitBtn) {
        cancelExitBtn.addEventListener('click', hideExitModal);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    if (exitModal) {
        exitModal.addEventListener('click', (e) => {
            if (e.target === exitModal) {
                hideExitModal();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && exitModal && exitModal.style.display === 'flex') {
            hideExitModal();
        }
    });
}

function showExitModal() {
    const exitModal = document.getElementById('exitModal');
    if (exitModal) {
        exitModal.style.display = 'flex';
        // –î–∞–µ–º —Ñ–æ–∫—É—Å –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const cancelBtn = document.getElementById('cancelExitBtn');
        if (cancelBtn) cancelBtn.focus();
    }
}

function hideExitModal() {
    const exitModal = document.getElementById('exitModal');
    if (exitModal) {
        exitModal.style.display = 'none';
    }
}

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ =====
function setupAuthHandlers() {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const logoutBtn = document.getElementById('logoutBtn');

    if (loginBtn) {
        loginBtn.addEventListener('click', () => {
            window.location.href = '/auth/login';
        });
    }

    if (registerBtn) {
        registerBtn.addEventListener('click', () => {
            window.location.href = '/auth/register';
        });
    }

    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
}

// ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å JWT) =====
async function saveProgress(progressData) {
    try {
        const token = localStorage.getItem('jwt_token');
        console.log('‚úÖ 4 ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖtoken',this.token);
        if (!token) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
            return;
        }

        const response = await fetch('/api/progress/save', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(progressData)
        });

        if (response.ok) {
            console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } else {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å JWT) =====
async function loadProgress() {
    try {
        const token = localStorage.getItem('jwt_token');
        console.log('‚úÖ 5 ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖtoken',this.token);
        if (!token) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return null;
        }

        const response = await fetch('/api/progress/load', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            return await response.json();
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        return null;
    }
}












// --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã -----------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã –∏–≥—Ä—ã
function pauseGame() {
    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (pauseModal.style.display === 'flex') return;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    stopTimer();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
    if (mediaRecorder?.state === 'recording') {
        stopRecording('pause');
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ
    stopAllAudios();

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—É–∑—ã
    pauseStartTime = Date.now();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã
    pauseTimerInterval = setInterval(() => {
        pauseTime = Date.now() - pauseStartTime;
        updateDictationTimerDisplay(pauseTime, pauseTimerElement);
    }, 1000);



    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–∞—É–∑—ã
    pauseModal.style.display = 'flex';
    resumeBtn.focus();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
function resumeGame() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã
    clearInterval(pauseTimerInterval);
    pauseTimerInterval = null;

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    pauseModal.style.display = 'none';

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    startTimer();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    inputField.focus();
}

// –¢–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
function resetInactivityTimer() {
    // –ï–°–õ–ò –ò–ì–†–ê –ï–©–ï –ù–ï –ù–ê–ß–ê–õ–ê–°–¨ - –ù–ò–ß–ï–ì–û –ù–ï –î–ï–õ–ê–ï–ú
    if (gameHasAlreadyBegun) {
        return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (inactivityTimer) {
        clearTimeout(inactivityTimer);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (pauseModal.style.display !== 'flex' && startModal.style.display !== 'flex') {
        inactivityTimer = setTimeout(() => {
            pauseGame();
        }, INACTIVITY_TIMEOUT);
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateDictationTimerDisplay(elapsed, element = dictationTimerElement) {
    let s = elapsed / 1000;
    let d = Math.floor(s / 86400);
    s = s - d * 86400;
    let h = Math.floor(s / 3600);
    s = s - h * 3600;
    let m = Math.floor(s / 60);
    s = Math.floor(s % 60);

    let time_text = `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
    if (d > 0) {
        time_text = `${d}:` + time_text;
    }

    if (element) {
        element.textContent = time_text;
    }
}




// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø. –ø–æ–ª–µ–π
function ensureField(obj, field, fallback) {
    if (obj[field] === undefined) obj[field] = fallback;
    return obj[field];
}

// –ë—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –∫–ª—é—á—É:
function makeByKeyMap(arr) {
    const m = new Map();
    arr.forEach(s => m.set(s.key, s));
    return m;
}

// ====== 2.1 –†–µ–Ω–¥–µ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ======

const tableSentences = document.querySelector(`#sentences-table tbody`);
function renderSelectionTable() {
    if (!tableSentences) return;

    tableSentences.innerHTML = '';

    allSentences.forEach((s, index) => {
        const row = document.createElement('tr');

        // –ö–æ–ª–æ–Ω–∫–∞ –≤—ã–±–æ—Ä–∞
        const selectCell = document.createElement('td');

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const statusBtn = document.createElement('button');
        statusBtn.className = 'sentence-check';
        statusBtn.dataset.key = s.key;
        statusBtn.dataset.checked = 'true';

        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞
        statusBtn.innerHTML = '<i data-lucide="circle-check-big"></i>';

        selectCell.appendChild(statusBtn);

        // –ö–æ–ª–æ–Ω–∫–∞ –∫–æ–¥–∞
        const codeCell = document.createElement('td');
        codeCell.textContent = s.key;
        codeCell.style.fontFamily = 'monospace';
        codeCell.style.fontSize = '12px';

        // –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        const textStatusCell = document.createElement('td');
        textStatusCell.style.textAlign = 'center';
        textStatusCell.style.display = 'none';  // —Å–∫—Ä—ã—Ç–∞
        textStatusCell.innerHTML = '<i data-lucide="x"></i>';

        // –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        const audioStatusCell = document.createElement('td');
        audioStatusCell.style.textAlign = 'center';
        audioStatusCell.style.display = 'none'; // —Å–∫—Ä—ã—Ç–∞
        audioStatusCell.innerHTML = '<i data-lucide="x"></i>';

        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        const tdText = document.createElement('td');
        tdText.textContent = s.text;

        row.appendChild(selectCell);
        row.appendChild(codeCell);
        row.appendChild(textStatusCell);
        row.appendChild(audioStatusCell);
        row.appendChild(tdText);

        tableSentences.appendChild(row);
        selectedSentences.push(s.key);
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    // –í–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —á–µ–∫–±–æ–∫—Å—ã
    tableSentences.addEventListener('click', function (e) {
        const statusBtn = e.target.closest('.sentence-check');
        if (!statusBtn) return;

        const key = statusBtn.dataset.key;
        const isCurrentlyChecked = statusBtn.dataset.checked === 'true';
        const newState = !isCurrentlyChecked;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        statusBtn.dataset.checked = newState.toString();

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        const iconName = newState ? 'circle-check-big' : 'circle';
        statusBtn.innerHTML = `<i data-lucide="${iconName}"></i>`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if (newState) {
            if (!selectedSentences.includes(key)) {
                selectedSentences.push(key);
            }
        } else {
            selectedSentences = selectedSentences.filter(k => k !== key);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        updateAllCheckboxState();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        lucide.createIcons();

        confirmStartBtn.focus();

        // console.log("Selected sentences:", selectedSentences);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    lucide.createIcons();

    initializeAllCheckbox();
    initializeMixControl();

}

function updateAllCheckboxState() {
    if (!allCheckbox) return;

    const checkboxes = document.querySelectorAll('#sentences-table .sentence-check');
    if (checkboxes.length === 0) return;

    const checkedCount = Array.from(checkboxes).filter(checkbox =>
        checkbox.dataset.checked === 'true'
    ).length;

    const totalCount = checkboxes.length;
    let newState;

    if (checkedCount === 0) {
        newState = 'false'; // –≤—Å–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
    } else if (checkedCount === totalCount) {
        newState = 'true'; // –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã
    } else {
        newState = 'indeterminate'; // —Ä–∞–∑–Ω–æ–±–æ–π
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏–∫–æ–Ω–∫—É
    allCheckbox.dataset.checked = newState;

    let iconName;
    if (newState === 'true') {
        iconName = 'circle-check-big';
    } else if (newState === 'false') {
        iconName = 'circle';
    } else {
        iconName = 'circle-alert'; // –∏–∫–æ–Ω–∫–∞ —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }

    allCheckbox.innerHTML = `<i data-lucide="${iconName}"></i>–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    lucide.createIcons();
}

function initializeAllCheckbox() {
    if (!allCheckbox) return;

    allCheckbox.dataset.checked = 'true';

    allCheckbox.addEventListener('click', function () {
        const currentState = this.dataset.checked;
        let newState;

        if (currentState === 'true') {
            newState = 'false';
        } else {
            newState = 'true';
        }

        this.dataset.checked = newState;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        document.querySelectorAll('#sentences-table .sentence-check').forEach(checkbox => {
            const key = checkbox.dataset.key;

            if (newState === 'true') {
                checkbox.dataset.checked = 'true';
                checkbox.innerHTML = '<i data-lucide="circle-check-big"></i>';
                if (!selectedSentences.includes(key)) {
                    selectedSentences.push(key);
                }
            } else if (newState === 'false') {
                checkbox.dataset.checked = 'false';
                checkbox.innerHTML = '<i data-lucide="circle"></i>';
                selectedSentences = selectedSentences.filter(k => k !== key);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        let iconName;
        if (newState === 'true') {
            iconName = 'circle-check-big';
        } else if (newState === 'false') {
            iconName = 'circle';
        } else {
            iconName = 'circle-alert';
        }
        this.innerHTML = `<i data-lucide="${iconName}"></i>–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        lucide.createIcons();

        confirmStartBtn.focus();
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
    lucide.createIcons();

    confirmStartBtn.focus();
}

function initializeMixControl() {
    if (!mixControl) return;

    mixControl.dataset.checked = 'false';

    mixControl.addEventListener('click', function () {
        const currentState = this.dataset.checked;
        let newState;

        // // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: indeterminate -> true -> false -> indeterminate
        if (currentState === 'true') {
            newState = 'false';
        } else {
            newState = 'true';
        }

        this.dataset.checked = newState;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É  —á–µ–∫–±–æ–∫—Å–∞
        let iconName;
        let textName;
        if (newState === 'true') {
            iconName = 'shuffle';
            textName = '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        } else {
            iconName = 'move-right';
            textName = '–ü–æ—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'

        }
        this.innerHTML = `<i data-lucide="${iconName}"></i>` + textName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (window.lucide?.createIcons) {
            lucide.createIcons();
        }

        // console.log("Selected sentences:", newState);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É
 * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} key - –ö–ª—é—á –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
function getUnavailable(s = currentSentence) {
    // –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
    // –î–æ–ª–∂–Ω—ã –Ω–∞–±—Ä–∞—Ç—å REQUIRED_PASSED_COUNT + 1
    const sum = s.number_of_perfect + s.circle_number_of_perfect - 1 + s.number_of_audio + s.circle_number_of_audio;
    return sum === REQUIRED_PASSED_COUNT;
}

function getRemainingAudio(s) {
    return remaining = (REQUIRED_PASSED_COUNT - s.circle_number_of_audio - s.number_of_audio) || 0;
}

function updateTableRowStatus(s) {
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∫–ª—é—á–æ–º
    const row = tableSentences.querySelector(`tr button[data-key="${s.key}"]`)?.closest('tr');
    if (!row) return;

    const unavailable = getUnavailable(s);
    const statusIcon = row.querySelector('.sentence-check');

    if (unavailable) {
        statusIcon.style.cursor = 'not-allowed';
        statusIcon.style.color = 'var(--color-button-gray)';
        statusIcon.innerHTML = '<i data-lucide="circle-star"></i>';
    } else {
        statusIcon.style.cursor = 'pointer';

        if (selectedSentences.includes(s.key)) {
            statusIcon.innerHTML = '<i data-lucide="circle-check-big"></i>';
        } else {
            statusIcon.innerHTML = '<i data-lucide="circle"></i>';
        }
    }

    lucide.createIcons();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const keyStatusCell = row.querySelector('td:nth-child(2)');
    const textStatusCell = row.querySelector('td:nth-child(3)');
    if (textStatusCell) {
        if (unavailable) {
            keyStatusCell.style.color = 'var(--color-button-gray)';
            textStatusCell.innerHTML = '<i data-lucide="star" style="color: var(--color-button-gray);"></i>';
        } else if (s.circle_number_of_perfect + s.number_of_perfect === 1) {
            // perfect —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤–µ—Å—Ö –∫—Ä—É–≥–∞—Ö
            textStatusCell.innerHTML = '<i data-lucide="star" style="color: var(--color-button-mint);"></i>';
        } else if (s.circle_number_of_corrected === 1) {
            // —Å–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ
            textStatusCell.innerHTML = '<i data-lucide="star-half" style="color: var(--color-button-lightgreen);"></i>';
        } else {
            textStatusCell.innerHTML = '<i data-lucide="x" style="color: var(--color-button-gray);"></i>';
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ
    const audioStatusCell = row.querySelector('td:nth-child(4)');
    const remainingAudio = getRemainingAudio(s);
    if (audioStatusCell) {
        if (unavailable) {
            audioStatusCell.innerHTML = '<i data-lucide="mic-off" style="color: var(--color-button-gray);"></i>';
        } else if (remainingAudio === 0) {
            // –Ω–∞ –≤—Å–µ—Ö –∫—Ä—É–≥–∞—Ö
            audioStatusCell.innerHTML = '<i data-lucide="mic-off" style="color: var(--color-button-purple);"></i>';
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π
            audioStatusCell.innerHTML = `
            <i data-lucide="mic" style="color: var(--color-button-purple);"></i> 
            <small style="color: var(--color-button-purple);">(${remainingAudio})</small>`;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const textCell = row.querySelector('td:last-child');
    if (textCell) {
        textCell.style.color = unavailable ?
            'var(--color-button-gray)' : '';
    }

    // // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    // updateSelectedCount();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function getSelectedKeys() {
    const selectedCheckboxes = document.querySelectorAll('#sentences-table input[type="checkbox"]:checked');
    const selectedIds = Array.from(selectedCheckboxes).map(checkbox => {
        const row = checkbox.closest('tr');
        return row ? parseInt(row.dataset.id) : null;
    }).filter(id => id !== null);

    return selectedIds;
}

// ====== 2.3 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º "–ù–∞—á–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç" ======


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
function shuffleInPlace(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function prepareGameFromTable() {
    // const mix = !!qs("#mixCheckbox")?.checked;
    const mix = mixControl.dataset.checked;

    if (mix === 'true') {
        shuffleInPlace(selectedSentences);
    }

    return selectedSentences;
}


function getSelectedSentences() {
    selectedSentences = [];

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—ã–±–æ—Ä–∞
    document.querySelectorAll('#sentences-table .sentence-check').forEach(button => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç
        if (button.dataset.checked === 'true' && button.style.cursor !== 'not-allowed') {
            selectedSentences.push(button.dataset.key);
        }
    });

    // console.log("Selected sentences:", selectedSentences);
}

// 
function startGame() {

    // –Ω–∞—Å—Ç—É–ø–Ω–µ –∫–æ–ª–æ (—è–∫—â–æ –ø–æ—á–∞—Ç–æ–∫ —Ç—É—Ç –±—É–¥–µ 0+1
    circle_number++;

    maxIndTablo = (selectedSentences.length < MAXVISIBLE) ? (selectedSentences.length - 1) : (MAXVISIBLE - 1);

    const sequences = getPlaySequenceValues();
    playSequenceStart = sequences.start;
    playSequenceTypo = sequences.typo;
    playSequenceSuccess = sequences.success;

    // –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
    getSelectedSentences();
    if (!selectedSentences.length) {
        alert("–ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å: –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ.");
        return;
    }

    if (circle_number === 1) {
        // –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—Ä—É–≥ –≤—Å–µ–º –ù–ï perfect, –æ–±–Ω—É–ª—è–µ–º corrected                                  
        number_of_perfect = 0;
        number_of_corrected = 0;
        number_of_audio = 0;

        allSentences.forEach(s => {
            s.number_of_perfect = 0;
            s.number_of_corrected = 0;
            s.number_of_audio = 0;

            s.circle_number_of = 1;
            s.circle_number_of_perfect = 0;
            s.circle_number_of_corrected = 0;
            s.circle_number_of_audio = 0;
        });

    } else {
        // –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–æ–¥–∞–ª–∫—É –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–ª–∏ –≤ –∏—Ç–æ–≥–∞—Ö
        // –∞ —Å–µ–π—á–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥–æ –∏–∑ –∫—Ä—É–≥–∞ —Å–ª–æ–∂–∏—Ç—å –≤ –æ–±—â–∏–µ 
        // –∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –æ–±–Ω—É–ª–∏—Ç—å
        allSentences.forEach(s => {

            // –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
            number_of_perfect += s.circle_number_of_perfect;
            number_of_corrected += s.circle_number_of_corrected;
            number_of_audio += s.circle_number_of_audio;

            // –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            s.number_of_perfect += s.circle_number_of_perfect;
            s.number_of_corrected += s.circle_number_of_corrected;
            s.number_of_audio += s.circle_number_of_audio;

            // –Ω–æ–≤—ã–π –∫—Ä—É–≥ –≤—Å–µ-–≤—Å–µ –æ–±–Ω—É–ª—è–µ–º
            s.circle_number_of = (selectedSentences.includes(s.key)) ? circle_number : 0;
            s.circle_number_of_perfect = 0;
            s.circle_number_of_corrected = 0;
            s.circle_number_of_audio = 0;
        });
    }
    // —è–∫—â–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–º—ñ—à–∞—Ç–∏ —Ä–µ—á–µ–Ω–Ω—è
    prepareGameFromTable();

    // –ü—Ä–æ—Å—Ç–∞–≤–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –≤ allSentences
    const byKey = makeByKeyMap(allSentences);
    selectedSentences.forEach((key, idx) => {
        const s = byKey.get(key);
        if (!s) return;
        s.serial_number = idx + 1;  // –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ (—Ä–∏—Å—É–µ–º —ç—Ç–æ —á–∏—Å–ª–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ)
    });

    initTabloSentenceCounter();
    showCurrentSentence(0, 0);//—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    syncCircleButton();       // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–æ –∏—Ç–æ–≥–æ–≤
    applyStatusNewCircle(); // –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–∏–π —Ü–∏–∫–ª –∑–Ω–æ–≤ –ø—Ä–æ–∑–æ—Ä–∞ 

    // –∑–∞–∫—Ä–∏–≤–∞—ç–º–æ –º–æ–¥–∞–ª–∫—É
    startModal.style.display = 'none';

    // –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫ –≤ –æ—Å—Ç–∞–Ω–Ω—é —á–µ—Ä–≥—É
    gameHasAlreadyBegun = true;

    if (thisNewGame) {
        document.querySelectorAll('#sentences-table td').forEach(td => {
            if (td.style.display === 'none') {
                td.style.display = 'table-cell';
            }
        });
        thisNewGame = false;
    }


    startTimer();

    // // —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    // resetInactivityTimer();

}


// 1) –°—á–∏—Ç–∞—Ç—å JSON –∏–∑ <script id="sentences-data">
function loadSentencesFromJSON() {
    const el = document.getElementById('sentences-data');
    if (!el) return [];
    try {
        const raw = (el.textContent || '').trim();
        const data = JSON.parse(raw || '[]');
        // –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º sentences
        return Array.isArray(data) ? data : (Array.isArray(data.sentences) ? data.sentences : []);
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å sentences-data:', e);
        return [];
    }
}





// --- –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–µ–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ #userPlay -----------------------------------------------
function ensureUserPlayButton() {
    const btn = document.getElementById('userPlay');
    if (!btn || userPlayInited) return;

    // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
    btn.disabled = true;

    btn.addEventListener('click', () => {
        if (!userAudioElement) return;
        if (userAudioElement.paused) {
            userAudioElement.play().catch(console.error);
        } else {
            userAudioElement.pause();
        }
    });

    userPlayInited = true;
}

function setUserAudioBlob(blob) {
    const btn = document.getElementById('userPlay');
    if (!blob || !btn) return;

    // 1. –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç
    if (userAudioElement) {
        try {
            userAudioElement.pause();
            userAudioElement.src = ''; // –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        } catch { }
    }

    // 2. –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π URL (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    if (userAudioObjectUrl) {
        URL.revokeObjectURL(userAudioObjectUrl);
        userAudioObjectUrl = null;
    }

    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL –∏–∑ Blob
    userAudioObjectUrl = URL.createObjectURL(blob);

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!userAudioElement) {
        userAudioElement = new Audio();
        userAudioElement.preload = 'metadata';
    }

    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    if (userAudioObjectUrl) {
        userAudioElement.src = userAudioObjectUrl;
    } else {
        console.log("Blob URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
        userAudioElement.src = '';
    }

    btn.disabled = false;
}

function clearUserAudio() {
    const btn = document.getElementById('userPlay');
    if (userAudioElement) {
        try {
            userAudioElement.pause();
            userAudioElement.src = '';
        } catch { }
    }

    if (userAudioObjectUrl) {
        URL.revokeObjectURL(userAudioObjectUrl);
        userAudioObjectUrl = null;
    }
    if (btn) btn.disabled = true;
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ UI –ø–æ remainingAudio —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function refreshAudioUIForCurrentSentence() {
    const R = Number(REQUIRED_PASSED_COUNT ?? 0);

    const recordBtn = document.getElementById('recordButton');
    const percentWrap = document.getElementById('count_percent')?.parentElement; // stat-btn c –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
    const visual = document.getElementById('audioVisualizer');
    const playBtn = document.getElementById('userPlay');

    // –ï—Å–ª–∏ –∞—É–¥–∏–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–µ–Ω
    if (R === 0) {
        if (recordBtn) { recordBtn.disabled = true; recordBtn.classList.add('disabled'); }
        if (percentWrap) percentWrap.style.display = 'none';
        if (playBtn) playBtn.style.display = 'none';

        if (visual) {
            try { if (typeof stopVisualization === 'function') stopVisualization(); } catch { }
            const ctx = visual.getContext && visual.getContext('2d');
            if (ctx) ctx.clearRect(0, 0, visual.width, visual.height);
            visual.hidden = true; // ‚Üê –ø—Ä—è—á–µ–º –∂—ë—Å—Ç–∫–æ
        }
        return;
    } else {
        // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–ø—ã—Ç–æ–∫
        const remainingAudio = getRemainingAudio(currentSentence);
        const hasAttempts = remainingAudio > 0;

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏: —Ç–æ–ª—å–∫–æ enable/disable
        if (recordBtn) {
            recordBtn.disabled = !hasAttempts;
            recordBtn.classList.toggle('disabled', !hasAttempts);
        }

        // % –∏ Play ‚Äî –æ–±—ã—á–Ω—ã–π display, –∞ –∫–∞–Ω–≤–∞—Å ‚Äî —á–µ—Ä–µ–∑ hidden + –æ—á–∏—Å—Ç–∫–∞
        if (percentWrap) percentWrap.style.display = hasAttempts ? '' : 'none';
        if (playBtn) playBtn.style.display = hasAttempts ? '' : 'none';

        if (visual) {
            if (remainingAudio > 0) {
                visual.hidden = false;
            } else {
                try { if (typeof stopVisualization === 'function') stopVisualization(); } catch { }
                const ctx = visual.getContext && visual.getContext('2d');
                if (ctx) ctx.clearRect(0, 0, visual.width, visual.height);
                visual.hidden = true;
            }
        }

        // –û–±–Ω–æ–≤–∏—Ç—å ¬´–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª
        renderUserAudioTablo();

    }

}


// --- helpers: ¬´–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª –≤ #userAudioTablo –ø–æ RemainingAudio -----------------------------------------------

function renderUserAudioTablo() {
    const tablo = document.getElementById('userAudioTablo');
    if (!tablo) return;

    const R = Math.max(0, Math.min(9, REQUIRED_PASSED_COUNT));
    const c = getRemainingAudio(currentSentence);

    // –ï—Å–ª–∏ R==0 ‚Äî —Å–∞–º –±–ª–æ–∫ —Å–∫—Ä–æ–µ—Ç—Å—è –≤ updateAudioPanelVisibility()   
    if (R === 0) {
        tablo.innerHTML = '';
        return;
    }

    const parts = [];
    for (let i = 0; i < c; i++) parts.push('<i data-lucide="mic"></i>');
    for (let i = 0; i < (R - c); i++) parts.push('<i data-lucide="mic-off"></i>');

    tablo.innerHTML = parts.join('');

    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

function updateAudioPanelVisibility() {
    const panel = document.querySelector('.audio-user-panel'); // –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const group = document.querySelector('.grupp-audio');      // –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
    const visual = document.getElementById('audioVisualizer');
    const percent = document.getElementById('count_percent');
    const answer = document.getElementById('userAudioAnswer');

    const R = Number(REQUIRED_PASSED_COUNT ?? 0);

    const hide = (el) => { if (el) el.style.display = 'none'; };
    const show = (el) => { if (el) el.style.display = ''; };

    count_percent.textContent = 0;

    if (R === 0) {
        // –ü–æ–ª–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–≥–æ –∞—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        hide(panel);
        hide(group);
        hide(visual);
        hide(percent?.parentElement || percent);
        hide(answer);
    } else {
        show(panel);
        show(group);
        show(visual);
        show(percent?.parentElement || percent);
        show(answer);
    }
}


// --- helpers: –ª—è–º–±–¥–∞-–≤–µ—Ä—Å–∏–∏ -----------------------------------------------

const setText = (id, val) => {
    const el = document.getElementById(id);
    if (el) el.textContent = val;
};

// C—É–º–º–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–æ–º –∫—Ä—É–≥–µ
function sumRez() {
    let circle_number_of_perfect = 0;
    let circle_number_of_corrected = 0;
    let circle_number_of_audio = 0;

    allSentences.forEach(s => {
        circle_number_of_perfect += s.circle_number_of_perfect;
        circle_number_of_corrected += s.circle_number_of_corrected;
        circle_number_of_audio += s.circle_number_of_audio;
    });

    return {
        circle_number_of_perfect,
        circle_number_of_corrected,
        circle_number_of_audio
    };
}

function updateStats(circle = null) {
    const sum = sumRez();

    if (circle === null) {
        // –∏—Ç–æ–≥–∏ –æ–±—â–∏–µ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º 
        // –≤ –¥–∏–∫—Ç–∞–Ω—Ç–µ
        setText('count-perfect', number_of_perfect + sum.circle_number_of_perfect);
        setText('count-corrected', number_of_corrected + sum.circle_number_of_corrected);
        setText('count-audio', number_of_audio + sum.circle_number_of_audio);
        setText('count-total', allSentences.length);

        // –≤ –º–æ–¥–∞–ª–∫–µ
        setText('modal-count-perfect', number_of_perfect + sum.circle_number_of_perfect);
        setText('modal-count-corrected', number_of_corrected + sum.circle_number_of_corrected);
        setText('modal-count-audio', number_of_audio + sum.circle_number_of_audio);
        setText('modal-count-total', allSentences.length);
        // console.log("üëÄ [1] allSentences", allSentences);
        // console.log("üëÄ [1] allSentences.length", allSentences.length);
    } else {
        // –∏—Ç–æ–≥–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—Ä—É–≥—É
        // –≤ –¥–∏–∫—Ç–∞–Ω—Ç–µ
        setText('count-perfect', sum.circle_number_of_perfect);
        setText('count-corrected', sum.circle_number_of_corrected);
        setText('count-audio', sum.circle_number_of_audio);
        setText('count-total', selectedSentences.length);

        // –≤ –º–æ–¥–∞–ª–∫–µ
        setText('modal-count-perfect', sum.circle_number_of_perfect);
        setText('modal-count-corrected', sum.circle_number_of_corrected);
        setText('modal-count-audio', sum.circle_number_of_audio);
        setText('modal-count-total', selectedSentences.length);
        // console.log("üëÄ selectedSentences", selectedSentences);
        // console.log("üëÄ selectedSentences.length", selectedSentences.length);
        setText('modal-circle-number', circle_number);

    }
};

let showAllStats = false; // —Ä–µ–∂–∏–º –ø–æ–∫–∞–∑–∞: ALL –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥

function syncCircleButton() {

    if (showAllStats) {
        circleBtn.innerHTML = `<i data-lucide="slack"></i>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫—Ä—É–≥—É.';

        circleBtnModal.innerHTML = `<i data-lucide="slack"></i>`;
        circleBtnModal.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫—Ä—É–≥—É.';

        updateStats();
    } else {
        circleBtn.innerHTML = `<i data-lucide="iteration-cw"></i><span class="audio-counter">${circle_number}</span>`;
        circleBtn.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä—É–≥–∞. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä—É–≥–∏.';

        circleBtnModal.innerHTML = `<i data-lucide="iteration-cw"></i><span class="audio-counter">${circle_number}</span>`;
        circleBtnModal.title = '–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä—É–≥–∞. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä—É–≥–∏.';

        updateStats(circle_number);
    }
    lucide.createIcons();
    // —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º perfect/corrected/audio/total
};


document.addEventListener('DOMContentLoaded', () => {
    if (!circleBtnModal) return;

    circleBtnModal.addEventListener('click', () => {
        showAllStats = !showAllStats; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º ALL ‚Üî –∫—Ä—É–≥
        syncCircleButton();            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ü–∏—Ñ—Ä—ã
    });
});


document.addEventListener('DOMContentLoaded', () => {
    if (!circleBtn) return;

    // –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ circleBtn
    if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');

    circleBtn.addEventListener('click', () => {
        showAllStats = !showAllStats; // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º ALL ‚Üî –∫—Ä—É–≥
        syncCircleButton();            // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ü–∏—Ñ—Ä—ã
    });

    syncCircleButton();              // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è√ü
});


// --------------- timer ---------------------------------

function startTimer() {
    dictationStartTime = Date.now();
    // console.log("üëÄ startTimer() ========================= dictationAllTime:", dictationAllTime);
    dictationStart_Timer = setInterval(() => {
        dictationTimerInterval = dictationAllTime + Date.now() - dictationStartTime;
        updateDictationTimerDisplay(dictationTimerInterval, dictationTimerElement);
    }, 1000);

    // // –ó–ê–ë–´–õ–ò –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£:
    // resetInactivityTimer();
}

function stopTimer() {
    dictationAllTime = dictationAllTime + Date.now() - dictationStartTime;
    clearInterval(dictationStart_Timer);
}


function timeDisplay(ms) {
    if (!Number.isFinite(ms) || ms < 0) ms = 0;
    const totalSec = Math.floor(ms / 1000);
    const hours = Math.floor(totalSec / 3600);
    const minutes = Math.floor((totalSec % 3600) / 60);
    const seconds = totalSec % 60;
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}

// -------------------------------------------------------LANGUAGE_CODES_URL  getCountryCodeUrl(langCode)
async function loadLanguageCodes() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LanguageManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è country_cod_url

        if (window.LanguageManager && typeof window.LanguageManager.getCountryCodeUrl === 'function') {
            langCodeUrl = window.LanguageManager.getCountryCodeUrl(currentDictation.language_original);
        } else {
            // Fallback –µ—Å–ª–∏ LanguageManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            langCodeUrl = 'en-US';
        }

        // const response = await fetch(`/path/to/language/codes/${langCodeUrl}.json`);
        // languageCodes = await response.json();

        // // –ò—Å–ø–æ–ª—å–∑—É–µ–º language_original –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // const langCode = currentDictation.language_original || 'en-US';
        initSpeechRecognition();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤:', error);
    }
}


// ===== –¢–∞–±–ª–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö ========
function initTabloSentenceCounter() {
    const container = document.getElementById("sentenceCounter");
    container.innerHTML = "";
    // const total = allSentences.length;
    const total = selectedSentences.length;

    // –∑–∞–≥–∞–ª—å–Ω–∏–π –±–æ–∫—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const boxWrapper = document.createElement("div");
    boxWrapper.classList.add("sentence-box-wrapper");

    // window.sentenceButtons = [];
    buttonsTablo = [];
    counterTabloIndex = 0;

    if (total <= MAXVISIBLE) {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow", true);
        for (let i = 1; i < total; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
    } else {
        newTabloBtn(boxWrapper, 1, 0, "button-color-yellow", true);
        for (let i = 1; i < MAXVISIBLE - 2; i++) {
            newTabloBtn(boxWrapper, i + 1, i, "button-color-transparent");
        }
        newTabloBtn(boxWrapper, "...", MAXVISIBLE - 2, "button-color-shadow-transparent");
        newTabloBtn(boxWrapper, total, MAXVISIBLE - 1, "button-color-transparent");
    }

    container.appendChild(boxWrapper);
}

// –æ–∫—Ä–µ–º–æ —Å—Ç–≤–æ—Ä—é—é—ç–º–æ 9 –∫–Ω–æ–ø–æ–∫. –ü–æ—Ç—ñ–º –ª–∏—à–µ –±—É–¥–µ–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É
function newTabloBtn(boxWrapper, lable, index, className, isCurrent = false) {
    const btn = document.createElement("button");
    btn.dataset.position = index;
    if (lable === "...") {
        btn.textContent = lable;
        btn.classList.add("button-32-32", "button-color-shadow-transparent");
    } else {
        const s = makeByKeyMap(allSentences).get(selectedSentences[parseInt(lable) - 1]);
        applyStatusClass(btn, s, isCurrent);
    }
    btn.onclick = () => {
        counterTabloIndex_old = counterTabloIndex;

        const s_old = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);
        const btn_old = buttonsTablo[counterTabloIndex_old];
        applyStatusClass(btn_old, s_old);

        const num = parseInt(btn.textContent);
        if (!isNaN(num)) {
            btn.className = '';
            btn.classList.value = '';
            btn.classList.add("button-32-32", "button-color-yellow");
            currentSentenceIndex = num - 1;
            counterTabloIndex = parseInt(btn.dataset.position);
            counterTabloBtn = btn;
            showCurrentSentence(counterTabloIndex, currentSentenceIndex);
        }
    };
    boxWrapper.appendChild(btn);
    buttonsTablo.push(btn);
}

function applyStatusClass(btn, s, isCurrent = false) {
    btn.className = '';
    btn.classList.value = '';
    btn.innerHTML = s.serial_number;

    // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    btn.classList.add("button-32-32");

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏
    btn.querySelectorAll('.status-icon-corner').forEach(icon => icon.remove());

    // –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—Å—Ç–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    const perfect = s.number_of_perfect + s.circle_number_of_perfect;
    const corrected = s.circle_number_of_corrected;


    // –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
    if (perfect === 1 || corrected === 1) {
        const textIcon = document.createElement('div');
        textIcon.classList.add('status-icon-corner');
        if (perfect === 1) {
            textIcon.classList.add('text-status-perfect');
            textIcon.innerHTML = '<i data-lucide="star" style="width: 12px; height: 12px;"></i>';
        } else {
            textIcon.classList.add('text-status-corrected');
            textIcon.innerHTML = '<i data-lucide="star-half" style="width: 12px; height: 12px;"></i>';
        }
        btn.appendChild(textIcon);
    }

    if (getRemainingAudio(s) === 0) {
        const audioIcon = document.createElement('div');
        audioIcon.classList.add('status-icon-corner');
        audioIcon.classList.add('audio-status-done');
        if (perfect === 1) {
            audioIcon.classList.add('audio-status-perfect');
        } else if (corrected === 1) {
            audioIcon.classList.add('audio-status-corrected');
        }
        audioIcon.innerHTML = '<i data-lucide="mic-off" style="width: 12px; height: 12px;"></i>';
        btn.appendChild(audioIcon);
    }

    if (isCurrent) {
        btn.classList.add("button-active");
    }

    if (perfect === 1) {
        btn.classList.add("button-color-mint");
    } else if (corrected === 1) {
        btn.classList.add("button-color-lightgreen");
    } else {
        btn.classList.add("button-color-transparent");
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    btn.style.display = 'flex';
    btn.style.alignItems = 'center';
    btn.style.justifyContent = 'center';
    btn.style.position = 'relative';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    setTimeout(() => {
        if (window.lucide?.createIcons) {
            lucide.createIcons();
        }
    }, 0);
}

function applyStatusPreviosNext() {
    checkPreviosDiv.classList.value = '';
    checkNextDiv.classList.value = '';

    // –Ω–∞–ª–µ–≤–æ –∏–¥—Ç–∏ –Ω–µ–∫—É–¥–∞ -- checkPreviosDiv –¥–µ–ª–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–π
    if (counterTabloIndex === 0) {
        checkPreviosDiv.classList.add('button-color-transparent');
    } else {
        checkPreviosDiv.classList.add('button-color-yellow');
    }

    // const maxIndTablo = (selectedSentences.length < MAXVISIBLE) ? (selectedSentences.length - 1): (MAXVISIBLE - 1);

    if (counterTabloIndex === maxIndTablo) {
        // –Ω–∞–ø—Ä–∞–≤–æ –Ω–µ–∫—É–¥–∞ –∏–¥—Ç–∏
        checkNextDiv.classList.add('button-color-transparent');

    } else {
        // –Ω–∞–ø—Ä–∞–≤–æ –Ω–µ–∫—É–¥–∞ –∏–¥—Ç–∏
        checkNextDiv.classList.add('button-color-yellow');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    lucide.createIcons();

    // setTimeout(() => {
    //     if (window.lucide?.createIcons) {
    //         lucide.createIcons();
    //     }
    // }, 0);
}

function applyStatusNewCircle() {
    let sum = sumRez(circle_number);

    btnNewCircle.classList.value = '';

    if ((sum.circle_number_of_perfect) === selectedSentences.length) {
        // –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
        btnNewCircle.classList.add('button-color-mint');

    } else if ((sum.circle_number_of_corrected + sum.circle_number_of_perfect) === selectedSentences.length) {
        btnNewCircle.classList.add('button-color-lightgreen');

    } else {
        btnNewCircle.classList.add('button-color-transparent');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    lucide.createIcons();
}


function updateTabloSentenceCounter(newTabloIndex, newSentenceIndex) {
    const total = selectedSentences.length;

    if (!buttonsTablo || buttonsTablo.length === 0) return;

    const visibleLabels = buttonsTablo.map(btn => btn.textContent);// —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω–æ –Ω–∞ –µ–∫—Ä–∞–Ω–µ —Å–µ–π—á–∞—Å
    const currentLabel = buttonsTablo[newTabloIndex].textContent;
    // const b1 = buttonsTablo[1].textContent;
    // const bn = buttonsTablo[MAXVISIBLE - 2].textContent;
    if (currentLabel === "...") {
        let visibleIndices = [];

        if (newSentenceIndex < MAXVISIBLE - 2) {
            visibleIndices.push(0);
            for (let i = 1; i < MAXVISIBLE - 2; i++) visibleIndices.push(i);
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        } else if (newSentenceIndex > total - (MAXVISIBLE - 2)) {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = total - MAXVISIBLE + 2; i < total; i++) visibleIndices.push(i);
        } else {
            visibleIndices.push(0);
            visibleIndices.push("...");
            for (let i = newSentenceIndex; i < newSentenceIndex + (MAXVISIBLE - 4); i++) {
                visibleIndices.push(i);
            }
            visibleIndices.push("...");
            visibleIndices.push(total - 1);
        }

        buttonsTablo.forEach((btn, i) => {
            const value = visibleIndices[i];
            if (value === "...") {
                btn.textContent = "...";
                btn.className = "button-32-32 button-color-shadow-transparent";
                btn.disabled = true;
                btn.removeAttribute("data-position");
            } else {
                const s = makeByKeyMap(allSentences).get(selectedSentences[value]);
                btn.textContent = value + 1;
                btn.dataset.position = value;
                btn.disabled = false;

                if (value === newSentenceIndex) {
                    applyStatusClass(btn, s, true);
                    counterTabloIndex = i;
                    counterTabloBtn = btn;
                } else {
                    applyStatusClass(btn, s, false);
                }
            }
        });

    } else {
        // [1] –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚Äî —Ç–æ —Ç–µ–∫—É—â—É—é –ø—Ä–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–µ–∑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // –Ω–æ–≤—É—é –¥–µ–ª–∞–µ–º –ê–∫—Ç–∏–≤–Ω–æ–π
        counterTabloIndex = newTabloIndex;

        const s_old = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);
        const btn_old = buttonsTablo[counterTabloIndex_old];
        applyStatusClass(btn_old, s_old);

        const btn = buttonsTablo[newTabloIndex];
        counterTabloBtn = btn;
        const s = makeByKeyMap(allSentences).get(selectedSentences[newSentenceIndex]);
        applyStatusClass(btn, s, true);
    }
}



// ===== –ø—Ä–æ–π—à–ª–∏ –∫–æ–ª–æ =========
function checkIfAllCompleted() {
    // const s = statsLite(circle_number);

    selectedSentences = [];// ?
    document.getElementById("modal_timer").textContent =
        timeDisplay(currentDictation.dictationTimerInterval);
    stopTimer();

    btnModalTimer.style.display = 'flex';
    btnModalCountPerfect.style.display = 'flex';
    btnModalCountCorrected.style.display = 'flex';
    btnModalCountAudio.style.display = 'flex';
    btnModalCountTotal.style.display = 'flex';
    circleBtnModal.style.display = 'flex';

    startModal.style.display = 'flex';
    confirmStartBtn.focus();
}



// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª =====
// ====== –ó–∞–ø–∏—Å—å ==============
document.getElementById('recordButton').addEventListener('click', () => {
    const box = document.querySelector('.custom-audio-player[data-audio-id="audio_user"]');
    if (box) box.style.display = 'flex';
}, { once: true });

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏: 'square' ‚Üî 'pause'   setRecordStateIcon('square');
function setRecordStateIcon(name) {
    const btn = document.getElementById('recordButton');
    if (!btn) return;

    // –∫–∞–∫–∞—è –∏–∫–æ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–ø–∏—Å–∏
    const stateIcon = (name === 'pause') ? 'pause' : 'square';

    // —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    // (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º REQUIRED_PASSED_COUNT –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö)
    let remainingAudio = getRemainingAudio(currentSentence);

    // —Ä–∏—Å—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –ö–ê–ñ–î–´–ô —Ä–∞–∑ —Ü–µ–ª–∏–∫–æ–º: mic + (pause|square) + —á–∏—Å–ª–æ
    if (remainingAudio === 0) {
        btn.innerHTML = `
    <i data-lucide="mic-off"></i>
    <span id="recordStateIcon" class="state-icon">
      <i data-lucide="check"></i>
    </span>
  `;

    } else {
        btn.innerHTML = `
    <i data-lucide="mic"></i>
    <span id="recordStateIcon" class="state-icon">
      <i data-lucide="${stateIcon}"></i>
    </span>
    <span class="audio-counter">${remainingAudio}</span>
  `;

    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º lucide-–∏–∫–æ–Ω–∫–∏
    if (window.lucide?.createIcons) {
        lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
function decreaseAudioCounter() {
    currentSentence.circle_number_of_audio++;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    setRecordStateIcon('square'); // –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    renderUserAudioTablo();

    syncCircleButton();

    // –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–≤–∞—à–∏—Ö—Å—è –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã—Ö –∞—É–¥–∏–æ
    updateTableRowStatus(currentSentence);

    // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è, –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
    let remainingAudio = getRemainingAudio(currentSentence);

    if (remainingAudio === 0) {
        // currentSentence.audio_status = 1;
        const recordButton = document.getElementById('recordButton');
        if (recordButton) {
            recordButton.disabled = true;
            recordButton.classList.add('disabled');
        }

        // –ø–æ—Å—Ç–∞–≤–∏–º —Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é –ø—Ç–∏—á–∫—É —É "—Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –≤ "—Ç–∞–±–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        const btn = buttonsTablo[counterTabloIndex];
        applyStatusClass(btn, currentSentence, true);

        // –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" selectedSentences.length
        const sum = sumRez();
        console.log("üëÄ [00] decreaseAudioCounter() maxIndTablo", maxIndTablo);
        console.log("üëÄ [00] decreaseAudioCounter() sum", sum);
        console.log("üëÄ [00] decreaseAudioCounter() sum.circle_number_of_perfect + sum.circle_number_of_corrected)", sum.circle_number_of_perfect + sum.circle_number_of_corrected);
        // if ((sum.circle_number_of_perfect + sum.circle_number_of_corrected) === (maxIndTablo + 1)) {
        if ((sum.circle_number_of_perfect + sum.circle_number_of_corrected) === selectedSentences.length) {
            // if ((sum.circle_number_of_perfect + sum.circle_number_of_corrected) === maxIndTablo ) {
            console.log("üëÄ [01] decreaseAudioCounter()");
            btnNewCircle.focus();
        } else {
            console.log("üëÄ [02] decreaseAudioCounter()");
            checkNextDiv.focus();
        }
    } else {

        // –Ω—É–ª—è –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ —Ñ–æ–∫—É—Å –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–π –∫–Ω–æ–ø–∫–µ
        recordButton.focus();
    }
    return true;
    // }
}

// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º stopRecording
function stopRecording(cause = 'manual') {
    if (isStopping) return;
    isStopping = true;
    lastStopCause = cause;

    // –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—à–∞–µ–º –≤ onresult:
    isRecording = false;

    // –°–±—Ä–æ—Å –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞, –µ—Å–ª–∏ –≤–∏—Å–∏—Ç
    if (autoStopTimer) {
        clearTimeout(autoStopTimer);
        autoStopTimer = null;
    }

    // –ú—è–≥–∫–æ –≥–∞—Å–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ "aborted")
    if (typeof recognition !== 'undefined' && recognition) {
        try {
            recognition.stop();
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
        }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å ‚Äî onstop —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç saveRecording()
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        try {
            mediaRecorder.stop();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
            isStopping = false;
        }
    } else {
        isStopping = false;
    }

    // –ü–æ–≥–∞—Å–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –≤–µ—Ä–Ω—ë–º –∫–≤–∞–¥—Ä–∞—Ç
    stopVisualization();
    setRecordStateIcon('square');

    const rb = document.getElementById('recordButton');
    if (rb) rb.classList.remove('recording'); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω—è–ª–∏ –∫–ª–∞—Å—Å
}

function stopAllAudios() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.querySelectorAll('audio').forEach(audio => {
        if (!audio.paused) {
            audio.pause();
            audio.currentTime = 0;
        }
    });

}


const successSound = document.getElementById('successSound');
function playSuccessSound() {
    if (successSound) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const clone = successSound.cloneNode(true);
        clone.volume = 0.3; // –¢–∏—à–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å

        clone.play().then(() => {
            clone.onended = () => clone.remove(); // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
        }).catch(e => {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞:', e);
            clone.remove();
        });
    }
}

async function startRecording() {
    try {
        stopAllAudios();

        // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç 0% (—á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ –ø—Ä–æ—Ü–µ—Ç–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π)
        count_percent.textContent = 0;

        // –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π stream –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        if (window.currentStream) {
            window.currentStream.getTracks().forEach(track => {
                if (track.readyState === 'live') {
                    track.stop();
                }
            });
            window.currentStream = null;
        }

        const stream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: false,
                noiseSuppression: false,
                autoGainControl: false
            }
        });

        window.currentStream = stream; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É

        isRecording = true;     // —Ç–µ–ø–µ—Ä—å onresult –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        isStopping = false;    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–æ–ø–∞
        lastStopCause = 'manual';
        srLiveText = '';        // –æ—á–∏—â–∞–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        const options = {
            mimeType: getSupportedMimeType()
        };

        mediaRecorder = new MediaRecorder(stream, options);
        setupVisualizer(stream);

        mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
        // mediaRecorder.onstop = saveRecording;
        mediaRecorder.onstop = () => {
            try { saveRecording(lastStopCause); }
            finally {
                isRecording = false;   // ‚Üê –≤–∞–∂–Ω–æ!
                isStopping = false;   // ‚Üê –≤–∞–∂–Ω–æ!
                const rb = document.getElementById('recordButton');
                if (rb) rb.classList.remove('recording');   // –¥—É–±–ª—å, –µ—Å–ª–∏ —Å—Ç–æ–ø –ø—Ä–∏—à—ë–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                setRecordStateIcon('square');
            }
        };

        audioChunks = [];
        // mediaRecorder.start(100); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100–º—Å
        mediaRecorder.start(); // –æ–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π chunk ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è audio/mp4 –≤ Safari


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
        if (recognition) {
            try {
                recognition.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
            }
            initSpeechRecognition(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        }

        userAudioAnswer.innerHTML = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';
        if (recognition) {
            try {
                recognition.start();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                initSpeechRecognition();
                recognition.start();
            }
        }

        setRecordStateIcon('pause');    // –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—É–∑—É
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
        userAudioAnswer.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
}

async function toggleRecording() {
    if (mediaRecorder?.state === 'recording') {
        stopRecording('manual');
    } else {
        startRecording();
    }
}

function getSupportedMimeType() {
    const types = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC (–ª—É—á—à–∏–π –¥–ª—è Safari)
        'audio/webm; codecs=opus',        // Opus (–¥–ª—è Chrome/Firefox)
        'audio/webm'                      // Fallback
    ];

    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';
}

function saveRecording(cause = undefined) {
    if (!audioChunks.length) {
        console.warn("–ù–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    const blobType = mediaRecorder.mimeType?.includes('mp4')
        ? 'audio/mp4'
        : 'audio/webm';

    // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Blob –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä
    const audioBlob = new Blob(audioChunks, { type: blobType });
    audioChunks = [];

    // –°–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–∞ –∫–Ω–æ–ø–∫–µ #userPlay
    setUserAudioBlob(audioBlob);

    // –ü—Ä–∏–≤—è–∂–µ–º ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π¬ª –ø–ª–µ–µ—Ä, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –Ω—É–∂–µ–Ω)
    const audioUrl = URL.createObjectURL(audioBlob);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalText = currentSentence.text ?? '';
    const spokenText =
        (srLiveText && srLiveText.trim()) ? srLiveText.trim()
            : (recognition && recognition.finalTranscript ? recognition.finalTranscript : '');

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: —Å—á–∏—Ç–∞–µ–º % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const percent = computeMatchPercentASR(originalText, spokenText);

    // ‚¨áÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–∑–∞—á—Ç–µ–Ω–æ¬ª
    const isPassed = percent >= MIN_MATCH_PERCENT;
    if (isPassed) {
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞—á—Ç–µ–Ω–∞
        playSuccessSound();
        decreaseAudioCounter();
    }

    renderUserAudioTablo();

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    srLiveText = '';
}

function fallbackComputeMatchPercent(a, b) {
    const norm = s => s
        ?.toLowerCase()
        .replace(/[^\p{L}\p{N}\s]/gu, ' ')
        .split(/\s+/)
        .filter(Boolean) || [];
    const A = norm(a);
    const B = norm(b);
    if (!A.length) return 0;
    const setB = new Set(B);
    const hits = A.filter(w => setB.has(w)).length;
    return hits / A.length; // –¥–æ–ª—è ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª —Å–ª–æ–≤
}

function initSpeechRecognition() {
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        console.error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition');
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = langCodeUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —è–∑—ã–∫
    console.log('Recognition language set to:', recognition.lang);

    recognition.interimResults = true;
    recognition.continuous = true; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

    // Web Speech: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∞—á–∫–∞–º–∏ (final + interim)
    recognition.onresult = (event) => {
        // 1) –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–≤–∞–∂–Ω–æ!)
        if (!isRecording) return;

        // 2) –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const res = event.results[i];
            const t = res[0].transcript;
            if (res.isFinal) finalTranscript += t + ' ';
            else interimTranscript += t + ' ';
        }

        // 3) –û–±–Ω–æ–≤–ª—è–µ–º ¬´–∂–∏–≤–æ–π¬ª –±—É—Ñ–µ—Ä –∏ last-final
        recognition.finalTranscript = finalTranscript.trim();
        srLiveText = (finalTranscript + ' ' + interimTranscript).trim();

        // 4) –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫)
        userAudioAnswer.innerHTML =
            `<span class="final">${finalTranscript}</span><span class="interim">${interimTranscript}</span>`;

        // 5) –ê–≤—Ç–æ-—Å—Ç–æ–ø –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        const expectedText = currentSentence.text ?? '';
        const currentPercent = computeMatchPercentASR(expectedText, srLiveText); // 0..100
        count_percent.textContent = currentPercent;
        // console.debug('[auto-stop check] currentPercent =', currentPercent);

        if (AUTO_STOP_ENABLED && currentPercent >= AUTO_STOP_THRESHOLD) {
            if (!autoStopTimer) {
                autoStopTimer = setTimeout(() => {
                    autoStopTimer = null;
                    stopRecording('auto');       // ‚Üê –∏–¥—ë–º —Ç–µ–º –∂–µ –ø—É—Ç—ë–º, —á—Ç–æ –∏ —Ä—É—á–Ω–æ–π —Å—Ç–æ–ø
                }, AUTO_STOP_STABLE_MS);
            }
        } else if (autoStopTimer) {
            clearTimeout(autoStopTimer);
            autoStopTimer = null;
        }
    };


    recognition.onerror = (event) => {
        const code = event?.error;
        if (code === 'aborted' || code === 'no-speech' || code === 'audio-capture') {
            console.debug('SpeechRecognition notice:', code);
            return; // –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–∞–º–∏
        }
        console.error('SpeechRecognition error:', code);
        userAudioAnswer.textContent = `–û—à–∏–±–∫–∞: ${code}`;
    };

    recognition.onend = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (mediaRecorder?.state !== 'recording') {
            return;
        }

        const original = currentSentence.text.toLowerCase().trim();
        const spoken = (recognition.finalTranscript || '').toLowerCase().trim();

        const origASR = simplifyText(prepareTextForASR(original)).join(" ");
        const spokASR = simplifyText(prepareTextForASR(spoken)).join(" ");
        if (origASR === spokASR) {
            // –º–æ–∂–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–∞–¥–æ —Å—Ç–∞–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –≤–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∞—É–¥–∏–æ
            disableRecordButton(false);

            const nextBtn = document.getElementById('checkNext');
            if (nextBtn) nextBtn.focus();
        } else {
            console.log("–ì–æ–ª–æ—Å –Ω–µ —Å–æ–≤–ø–∞–ª —Å —Ç–µ–∫—Å—Ç–æ–º.");
            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—â–µ –∏–¥–µ—Ç
            if (mediaRecorder?.state === 'recording') {
                try {
                    recognition.start();
                } catch (e) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:', e);
                }
            }
        }
    };
}

function disableRecordButton(active) {
    const recordBtn = document.getElementById('recordButton');
    if (!recordBtn) return;

    // –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
    recordBtn.disabled = !active;
    recordBtn.classList.toggle('disabled', !active);

    // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –∑–∞—Ç–µ—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –µ—ë –æ–¥–∏–Ω —Ä–∞–∑
    if (!recordBtn.querySelector('#recordStateIcon')) {
        recordBtn.innerHTML = '<i data-lucide="mic"></i><span id="recordStateIcon" class="state-icon"></span>';
        if (window.lucide?.createIcons) lucide.createIcons();
    }

    // –í ¬´–Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç
    setRecordStateIcon('square');

}

function setupVisualizer(stream) {
    // 1. –°–ù–ê–ß–ê–õ–ê –û–ß–ò–°–¢–ò–ú –°–¢–ê–†–´–ô AudioContext
    if (vizAC && vizAC.state !== 'closed') {
        vizAC.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        vizAC = null;  // –û–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    }

    const canvas = audioVisualizer;               // —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –ø–æ id
    if (!canvas) return;

    const ctx = canvas.getContext('2d');

    // –ú–∞—Å—à—Ç–∞–± –ø–æ–¥ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º—ã–ª–∞
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();
    canvas.width = Math.max(1, Math.floor(rect.width * dpr));
    canvas.height = Math.max(1, Math.floor(rect.height * dpr));
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏
    const AC = window.AudioContext || window.webkitAudioContext;
    if (!vizAC) vizAC = new AC();
    if (vizAC.state === 'suspended') {
        vizAC.resume().catch(() => { });
    }

    // –£–∑–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    vizAnalyser = vizAC.createAnalyser();
    vizAnalyser.fftSize = 256;

    vizSource = vizAC.createMediaStreamSource(stream);
    vizSource.connect(vizAnalyser);

    const bufferLength = vizAnalyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    vizActive = true;

    const draw = () => {
        if (!vizActive) return;
        vizRAF = requestAnimationFrame(draw);

        vizAnalyser.getByteFrequencyData(dataArray);

        const w = canvas.width / dpr;
        const h = canvas.height / dpr;

        ctx.clearRect(0, 0, w, h);

        // —à–∏—Ä–∏–Ω–∞ –∏ –∑–∞–∑–æ—Ä —Å—Ç–æ–ª–±–∏–∫–æ–≤
        const barWidth = Math.max((w / bufferLength) * 1.6, 2);

        // –¶–í–ï–¢ –°–¢–û–õ–ë–ò–ö–û–í ‚Äî –º–µ–Ω—è–π –∑–¥–µ—Å—å (—Ä–∞–Ω—å—à–µ —É —Ç–µ–±—è –±—ã–ª–æ rgb(100, 150, 255))
        ctx.fillStyle = VIS_BAR_COLOR;

        let x = 0;
        for (let i = 0; i < bufferLength; i++) {
            const v = dataArray[i] / 255;
            const barHeight = v * (h - 4);
            ctx.fillRect(x, h - barHeight, barWidth, barHeight);
            x += barWidth + 1;
        }
    };

    draw();
}

function stopVisualization() {
    vizActive = false;

    if (vizRAF) {
        cancelAnimationFrame(vizRAF);
        vizRAF = null;
    }

    // –†–∞–∑—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    try { vizSource && vizSource.disconnect(); } catch (_) { }
    try { vizAnalyser && vizAnalyser.disconnect(); } catch (_) { }
    vizSource = null;
    vizAnalyser = null;

    // –£—Å—ã–ø–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±—ã—Å—Ç—Ä—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç, –±–µ–∑ ¬´—Ç–∏—à–∏–Ω—ã¬ª –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
    if (vizAC && vizAC.state === 'running') {
        vizAC.suspend().catch(() => { });
    }

    // –ü–æ—á–∏—Å—Ç–∏–º –∫–∞–Ω–≤—É –≤–∏–∑—É–∞–ª—å–Ω–æ
    if (audioVisualizer) {
        const ctx = audioVisualizer.getContext('2d');
        ctx.clearRect(0, 0, audioVisualizer.width, audioVisualizer.height);
    }
}


// ===== –ê—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–û–ù–ï–¶ =====


// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ =================================================================== 
// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ =================================================================== 
// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ =================================================================== 
function loadDictationData() {
    console.log('=======================loadDictationData:');
    const dictationDataElement = document.getElementById('dictation-data');
    if (!dictationDataElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç dictation-data –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const sentencesJson = dictationDataElement.dataset.sentences;
        allSentences = JSON.parse(sentencesJson);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞
        currentDictation.id = dictationDataElement.dataset.dictationId || '';
        currentDictation.language_original = dictationDataElement.dataset.languageOriginal || '';
        currentDictation.language_translation = dictationDataElement.dataset.languageTranslation || '';
        currentDictation.title_orig = dictationDataElement.dataset.titleOrig || '';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LanguageManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è country_cod_url
        if (window.LanguageManager && typeof window.LanguageManager.getCountryCodeUrl === 'function') {
            currentDictation.language_cod_url = window.LanguageManager.getCountryCodeUrl(currentDictation.language_original);
        } else {
            console.warn('LanguageManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            currentDictation.language_cod_url = `${currentDictation.language_original}-${currentDictation.language_original.toUpperCase()}`;
        }

        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', allSentences.length);
        console.log('–î–∞–Ω–Ω—ã–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', currentDictation);

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        return false;
    }
}


function initializeDictation() {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('=======================initializeDictation:');
    if (!loadDictationData()) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∫—Ç–∞–Ω—Ç–∞');
        return;
    }

    // –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∞–∫, —á—Ç–æ–±—ã –í–°–Å –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ
    renderSelectionTable();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
    startModal.style.display = 'flex';
    confirmStartBtn.focus();
}


function showCurrentSentence(showTabloIndex, showSentenceIndex) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        stopRecording('change_sentence');
    }

    // —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –≤ –∫—Ä–∞–π–Ω–∏
    applyStatusPreviosNext();

    currentSentenceIndex = showSentenceIndex;
    currentSentence = makeByKeyMap(allSentences).get(selectedSentences[currentSentenceIndex]);

    // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–± –ø–ª–µ–µ—Ä –Ω–µ —Ç–∞—â–∏–ª —Å—Ç–∞—Ä—ã–π blob) // NEW
    clearUserAudio();                                                                 // NEW
    // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ –∞—É–¥–∏–æ (–Ω–∞ —Å–ª—É—á–∞–π R=0)
    updateAudioPanelVisibility();
    refreshAudioUIForCurrentSentence();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞
    userAudioAnswer.innerHTML = '';

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ
    audio.src = currentSentence.audio;
    audio_tr.src = currentSentence.audio_tr;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
    setRecordStateIcon('square');

    // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞
    const recordButton = document.getElementById('recordButton');
    if (recordButton) {
        setRecordStateIcon('square');
        if (getRemainingAudio(currentSentence) === 0) {
            recordButton.disabled = true;
            recordButton.classList.add('disabled');
        } else {
            recordButton.disabled = false;
            recordButton.classList.remove('disabled');
        }
    }

    // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å ¬´–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã/–≥–∞–ª–æ—á–∫–∏¬ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    renderUserAudioTablo();

    audioVisualizer.style.display = 'block';
    count_percent.style.display = 'block';
    userAudioAnswer.style.display = 'block';

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ ===== 
    document.getElementById("correctAnswer").innerHTML = currentSentence.text;
    document.getElementById("correctAnswer").style.display = "none";


    // –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    const perfect = currentSentence.circle_number_of_perfect + currentSentence.circle_number_of_perfect;
    const corrected = currentSentence.circle_number_of_corrected;
    if (perfect === 1) {
        inputField.innerHTML = currentSentence.text;
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = currentSentence.text_translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        disableCheckButton(0);
    } else if (corrected === 1) {
        inputField.innerHTML = currentSentence.text;
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = currentSentence.text_translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        disableCheckButton(1);
    } else {
        inputField.innerHTML = "";
        correctAnswerDiv.textContent = "";
        disableCheckButton(2);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    inputField.contentEditable = "true"; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    setTimeout(() => {
        inputField.focus();
    }, 0);
    inputField.focus();
    textAttemptCount = 0;

    disableRecordButton(true);

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    let audioLoaded = 0;
    const totalAudio = 2; // –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥

    function checkAndPlay() {
        audioLoaded++;
        if (audioLoaded === totalAudio) {
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => playMultipleAudios(playSequenceStart), 300);
        }
    }

    audio.oncanplaythrough = checkAndPlay;
    audio_tr.oncanplaythrough = checkAndPlay;

    // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (audio.readyState > 3) checkAndPlay();
    if (audio_tr.readyState > 3) checkAndPlay();
}


// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function nextSentence() {
    const total = selectedSentences.length;

    counterTabloIndex_old = counterTabloIndex;
    let newTabloIndex = counterTabloIndex + 1; // –ø–æ –∫–Ω–æ–ø–∫–∞–º
    let newSentenceIndex = currentSentenceIndex + 1; // –ø–æ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–º –∫–ª—é—á–µ–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º

    if (newSentenceIndex < total) {
        updateTabloSentenceCounter(newTabloIndex, newSentenceIndex);
        showCurrentSentence(newTabloIndex, newSentenceIndex); // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    } else {
        // –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–æ–ø–µ—Ä–¥–Ω—å–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
function previousSentence() {
    counterTabloIndex_old = counterTabloIndex;
    let newTabloIndex = counterTabloIndex - 1; // –ø–æ –∫–Ω–æ–ø–∫–∞–º
    let newSentenceIndex = currentSentenceIndex - 1; // –ø–æ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–º –∫–ª—é—á–µ–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º

    if (newSentenceIndex >= 0) {
        updateTabloSentenceCounter(newTabloIndex, newSentenceIndex);
        showCurrentSentence(newTabloIndex, newSentenceIndex);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function clearText() {
    inputField.innerHTML = '';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
function recordAudio() {

}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
async function loadAudio() {
    try {
        audio.src = currentSentence.audio;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }

    try {
        audio_tr.src = currentSentence.audio_tr;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio_tr.onerror = function () {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ -------------------------------------------------------
// startNewGame
// document.addEventListener("DOMContentLoaded", function () {
function onloadInitializeDictation() {
    console.log('=======================document.addEventListener("DOMContentLoaded", function () {:');
    initializeDictation();
    loadLanguageCodes();
    // userManager.init(); 
    // initializeUser(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // setupAuthHandlers(); // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
    setupExitHandlers(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—Ö–æ–¥–∞


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
    //console.group("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤:");
    const formatsToCheck = [
        'audio/mp4; codecs="mp4a.40.2"', // AAC
        'audio/webm; codecs=opus',       // Opus
        'audio/webm',                    // Fallback WebM
        'audio/wav'                      // WAV (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    ];

    // --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫—Ä—É–≥–∞: ALL ‚Üî –Ω–æ–º–µ—Ä ---
    (function initCircleToggle() {
        const circleBtn = document.querySelector('.stat-btn.circle');
        if (!circleBtn) return;

        // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ HTML –≤–¥—Ä—É–≥ —Å disabled ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–Ω–∏–º–∞–µ–º
        if (circleBtn.hasAttribute('disabled')) circleBtn.removeAttribute('disabled');

        circleBtn.addEventListener('click', () => {
            showAllStats = !showAllStats;   // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            syncCircleButton();             // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã
        });

        syncCircleButton();               // –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    })();

    ensureUserPlayButton();
    updateAudioPanelVisibility();
    renderUserAudioTablo();
    setRecordStateIcon('square');  // ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ‚Äú–∫–≤–∞–¥—Ä–∞—Ç‚Äù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    refreshAudioUIForCurrentSentence();

    // –ù–û–í–´–ô –ö–û–î –î–õ–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –î–ò–ö–¢–ê–ù–¢–ê
    // ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ =====
    // function initializeDictation() {
    //     // –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∞–∫, —á—Ç–æ–±—ã –í–°–Å –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ
    //     renderSelectionTable();

    //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É
    //     startModal.style.display = 'flex';
    //     confirmStartBtn.focus();
    // }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    function initPlaySequenceInputs() {
        const inputs = document.querySelectorAll('.play-sequence-input');

        inputs.forEach(input => {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
            input.addEventListener('input', (e) => {
                validatePlaySequenceInput(e.target);
            });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
            input.addEventListener('paste', (e) => {
                e.preventDefault();
                const pastedText = (e.clipboardData || window.clipboardData).getData('text').toLowerCase();
                const filteredText = pastedText.replace(/[^to]/g, '').slice(0, 5);
                input.value = filteredText;
            });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            input.addEventListener('blur', (e) => {
                validatePlaySequenceInput(e.target);
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    function validatePlaySequenceInput(input) {
        const value = input.value.toLowerCase();
        const validChars = /^[to]*$/;

        if (value && !validChars.test(value)) {
            // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            input.value = value.replace(/[^to]/g, '');
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if (input.value.length > 5) {
            input.value = input.value.slice(0, 5);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    document.getElementById('playSequenceStart').value = playSequenceStart;
    document.getElementById('playSequenceTypo').value = playSequenceTypo;
    document.getElementById('playSequenceSuccess').value = playSequenceSuccess;

    initPlaySequenceInputs();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —á–∞—Å—ã –¥–ª—è –ø–∞—É–∑—ã
    const timerButton = document.querySelector('.stat-btn.timer');
    if (timerButton) {
        timerButton.addEventListener('click', function () {
            if (pauseModal.style.display === 'flex') {
                resumeGame();
            } else {
                pauseGame();
            }
        });

        // –£–±–∏—Ä–∞–µ–º disabled –∞—Ç—Ä–∏–±—É—Ç —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        timerButton.removeAttribute('disabled');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];

    activityEvents.forEach(eventName => {
        document.addEventListener(eventName, function () {
            resetInactivityTimer();
        }, true);
    });

    // –ö–ª–∞–≤–∏—à–∞ Escape –¥–ª—è –ø–∞—É–∑—ã
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            if (pauseModal.style.display === 'flex') {
                resumeGame();
            } else {
                pauseGame();
            }
            event.preventDefault();
        }
    });

    // startTimer();

}

inputField.addEventListener('input', function () {
    const plainText = inputField.innerText;
    if (inputField.innerHTML !== plainText) {
        const cursorPos = saveCursorPosition(inputField);
        inputField.innerHTML = plainText;
        restoreCursorPosition(inputField, cursorPos);
    }
});


// -----------–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º -----------------------------------------


// –¢—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä –ö–ê–ñ–î–û–ì–û —Å–ª–æ–≤–∞ (–±–µ–∑ ¬´—Å–∫–≤–æ–∑–Ω–æ–≥–æ¬ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–¥–Ω–æ)
const REQUIRE_EVERY_WORD = true;
// –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ—Ñ–∏—Å–æ–≤/—Ç–∏—Ä–µ/–º–∏–Ω—É—Å–∞ (-, ‚Äí, ‚Äì , ‚Äî , ‚Äï, ‚àí, –∞ —Ç–∞–∫–∂–µ –æ–±—ã—á–Ω—ã–π '-')
const DASHES = /[\u2010\u2011\u2012\u2013\u2014\u2015\u2212-]/g;
// ¬´—É–º–Ω—ã–µ¬ª –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã ‚Üí –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
const CURLY_APOS = /[\u2019\u2018\u02BC]/g;

// === –ß–ò–°–õ–ê –î–õ–Ø ASR: –º–∞—Å–∫–∏—Ä—É–µ–º –∏ —Ü–∏—Ñ—Ä—ã, –∏ —Å–ª–æ–≤–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ <num> ===
// === –ß–ò–°–õ–ê –ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø ASR ===
// –ë–∞–∑–∞ —Å–ª–æ–≤-—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä: EN + RU/UK –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã).
// –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã "—á–∏—Å–ª–∞ —Å–ª–æ–≤–∞–º–∏" –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ <num> –¥–ª—è –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞.
const NUM_WORDS_SET = new Set([
    // EN
    "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
    "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen",
    "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety", "hundred", "thousand",
    // RU
    "–Ω–æ–ª—å", "–æ–¥–∏–Ω", "–æ–¥–Ω–∞", "–æ–¥–Ω–æ", "–¥–≤–∞", "–¥–≤–µ", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å", "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å",
    "–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å",
    "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å", "—Å–æ—Ä–æ–∫", "–ø—è—Ç—å–¥–µ—Å—è—Ç", "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç",
    "—Å–µ–º—å–¥–µ—Å—è—Ç", "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç", "–¥–µ–≤—è–Ω–æ—Å—Ç–æ", "—Å—Ç–æ", "—Ç—ã—Å—è—á–∞",
    // UA (–±–∞–∑–∞)
    "–Ω—É–ª—å", "–æ–¥–Ω–∞", "–æ–¥–Ω–µ", "–¥–≤–∞", "–¥–≤—ñ", "—Ç—Ä–∏", "—á–æ—Ç–∏—Ä–∏", "–ø‚Äô—è—Ç—å", "—à—ñ—Å—Ç—å", "—Å—ñ–º", "–≤—ñ—Å—ñ–º", "–¥–µ–≤‚Äô—è—Ç—å",
    "–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–∞–¥—Ü—è—Ç—å", "–¥–≤–∞–Ω–∞–¥—Ü—è—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç—å", "—á–æ—Ç–∏—Ä–Ω–∞–¥—Ü—è—Ç—å", "–ø‚Äô—è—Ç–Ω–∞–¥—Ü—è—Ç—å", "—à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç—å",
    "—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å", "–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å", "–¥–µ–≤‚Äô—è—Ç–Ω–∞–¥—Ü—è—Ç—å", "–¥–≤–∞–¥—Ü—è—Ç—å", "—Ç—Ä–∏–¥—Ü—è—Ç—å", "—Å–æ—Ä–æ–∫", "–ø‚Äô—è—Ç–¥–µ—Å—è—Ç", "—à—ñ—Å—Ç–¥–µ—Å—è—Ç",
    "—Å—ñ–º–¥–µ—Å—è—Ç", "–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç", "–¥–µ–≤‚Äô—è–Ω–æ—Å—Ç–æ", "—Å—Ç–æ", "—Ç–∏—Å—è—á–∞"
]);

function simplifyText(text) {
    return (text || "")
        .normalize('NFKC')          // —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Æ–Ω–∏–∫–æ–¥–∞
        .replace(/\u00A0/g, ' ')    // NBSP ‚Üí –ø—Ä–æ–±–µ–ª
        .toLowerCase()
        .replace(CURLY_APOS, "'")   // ¬´—É–º–Ω—ã–µ¬ª –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã ‚Üí –æ–±—ã—á–Ω—ã–π
        .replace(/['`¬¥]/g, "")      // —É–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        .replace(DASHES, ' ')       // –ö–õ–Æ–ß: –ª—é–±–æ–µ —Ç–∏—Ä–µ/–¥–µ—Ñ–∏—Å ‚Üí –ü–†–û–ë–ï–õ
        .replace(/[.,!?:;"¬´¬ª()]/g, "") // –æ—Å—Ç–∞–ª—å–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –≤ –º—É—Å–æ—Ä
        .replace(/\s+/g, " ")
        .trim()
        .split(" ");
}

function splitWordsForDisplay(text) {
    return (text || "")
        .normalize('NFKC')
        .replace(/\u00A0/g, ' ')
        .replace(DASHES, ' ')   // —Ä–µ–∂–µ–º –ø–æ —Ç–∏—Ä–µ
        .trim()
        .split(/\s+/);
}

function isNumberTokenLike(word) {
    if (!word) return false;
    const w = word.toLowerCase();

    // —á–∏—Å–ª–∞: 12, 12.5, 1,500, 1 500, 1.500,75
    if (/^\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d+)?$/.test(w)) return true;

    // —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏—Ä–µ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –≤–Ω—É—Ç—Ä–∏ —Ç–æ–∫–µ–Ω–∞
    const wNorm = w.replace(DASHES, '-').replace(CURLY_APOS, "'");

    // —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å: twenty-five / –¥–≤–∞–¥—Ü–∞—Ç—å-–ø'—è—Ç—å
    if (wNorm.includes('-')) {
        const parts = wNorm.split(/-+/).filter(Boolean);
        if (parts.length >= 2 && parts.every(p => NUM_WORDS_SET.has(p))) {
            return true;
        }
    }

    // –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ-—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ
    return NUM_WORDS_SET.has(wNorm);
}

// "more‚Äîthat‚Äôs"     -> normalizeForASR => "morethats"  ‚úÖ
//* "twenty‚Äìfive"     -> maskNumbersToNumToken => "<num>" ‚úÖ
//* "1 500,75"        -> maskNumbersToNumToken => "<num>" ‚úÖ  (NBSP –ø–æ–¥–¥–µ—Ä–∂–∞–Ω)
//* "–¥–µ–≤‚Äô—è—Ç—å"         -> –æ—Å—Ç–∞—ë—Ç—Å—è —Å–ª–æ–≤–æ–º (–Ω–µ <num>)        ‚úÖ
//* "–¥–≤–∞–¥—Ü–∞—Ç—å-–ø‚Äô—è—Ç—å"  -> "<num>"                           ‚úÖ
function maskNumbersToNumToken(text) {
    if (!text) return "";
    let t = text
        .normalize('NFKC')          // —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Æ–Ω–∏–∫–æ–¥–∞
        .replace(/\u00A0/g, ' ')    // NBSP ‚Üí –ø—Ä–æ–±–µ–ª
        .replace(DASHES, ' - ')     // –ö–õ–Æ–ß: –ª—é–±–æ–π ¬´—Ç–∏—Ä–µ¬ª –¥–µ–ª–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        .replace(CURLY_APOS, "'");  // ¬´—É–º–Ω—ã–µ¬ª –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã ‚Üí –æ–±—ã—á–Ω—ã–π

    // —á–∏—Å–ª–∞ (—Å —Ç—ã—Å—è—á–∞–º–∏ –∏ –¥—Ä–æ–±—è–º–∏)
    t = t.replace(/\b\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d+)?\b/g, " <num> ");

    // —Å–ª–æ–≤–∞: –±—É–∫–≤—ã + –∞–ø–æ—Å—Ç—Ä–æ—Ñ + –¥–µ—Ñ–∏—Å (—É–∂–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)
    t = t.replace(/[\p{L}'-]+/gu, m => isNumberTokenLike(m) ? " <num> " : m);

    t = t.replace(/\s+/g, " ").trim();
    return t;
}


// –°—Ö–ª–æ–ø—ã–≤–∞–µ–º —Å–µ—Ä–∏–∏ <num> <num> ... -> –æ–¥–∏–Ω <num>
function compressNumRuns(t) {
    return t.replace(/(?:<num>\s*){2,}/g, "<num> ");
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¢–û–õ–¨–ö–û –¥–ª—è ASR-–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤/–∞–≤—Ç–æ-—Å—Ç–æ–ø–∞
function normalizeForASR(text) {
    let s = (text || "")
        .normalize('NFKC')
        .replace(/\u00A0/g, ' ')
        .replace(DASHES, ' ')   // –ö–õ–Æ–ß: ¬´more‚Äîthat's¬ª ‚Üí "more that's"
        .toLowerCase();

    s = maskNumbersToNumToken(s);
    s = compressNumRuns(s);

    // —É–±—Ä–∞—Ç—å –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã/–∫–∞–≤—ã—á–∫–∏
    s = s.replace(/[\u0027\u2018\u2019\u0060\u00B4'‚Äò‚Äô`¬¥]/g, "");

    // –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é ‚Üí —É–±—Ä–∞—Ç—å (—Ç–∏—Ä–µ —É–∂–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏ –≤ –ø—Ä–æ–±–µ–ª –≤—ã—à–µ)
    s = s.replace(/[.,!?:;"¬´¬ª()]/g, "");

    // ASR-–º–µ—Ç—Ä–∏–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä –ø—Ä–æ–±–µ–ª–æ–≤
    s = s.replace(/\s+/g, "");
    return s;
}


// –°–∏–º–≤–æ–ª—å–Ω—ã–π LCS –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è ASR
function computeMatchPercentASR(originalText, spokenText) {
    const a = normalizeForASR(originalText);
    const b = normalizeForASR(spokenText);
    if (!a && !b) return 100;
    if (!a || !b) return 0;

    const la = a.length, lb = b.length;
    const dp = Array.from({ length: la + 1 }, () => new Array(lb + 1).fill(0));
    for (let i = 1; i <= la; i++) {
        for (let j = 1; j <= lb; j++) {
            dp[i][j] = (a[i - 1] === b[j - 1]) ? dp[i - 1][j - 1] + 1 : Math.max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    const lcs = dp[la][lb];
    return Math.round((2 * lcs) / (la + lb) * 100);
}




function findFirstErrorIndex(word1, word2) {
    const len = Math.min(word1.length, word2.length);
    for (let k = 0; k < len; k++) {
        if (word1[k] !== word2[k]) return k;
    }
    return len;
}

function renderResult(original, userVerified) {

    const correctLine = [];
    let foundError = false;
    let originalIndex = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            correctLine.push(`<span class="word-correct">${word.text}</span> `);
            originalIndex++;
        } else if (word.type === "missing") {
            if (REQUIRE_EVERY_WORD) {
                // –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º ¬´–ª–∏—à–Ω–∏–µ¬ª —Å–ª–æ–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.
                // –¢–æ–ª—å–∫–æ –¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.
                originalIndex++;
            } else {
                // –°—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∑–µ–ª—ë–Ω—ã–º.
                correctLine.push(`<span class="word-missing">${word.text}</span> `);
                originalIndex++;
            }
            // correctLine.push(`<span class="word-missing">${word.text}</span> `);
            // originalIndex++;
        } else if (word.type === "error") {
            const before = word.correctText.slice(0, word.errorIndex);
            const errorLetter = word.correctText[word.errorIndex] || "";
            const after = word.correctText.slice(word.errorIndex + 1);

            const correctHTML =
                `<span class="correct-line-word">` +
                `${before}<span class="correct-line-letter">${errorLetter}</span>${after}` +
                `</span> `;

            correctLine.push(correctHTML);
            originalIndex++;
            foundError = true;
        } else if (word.type === "raw_user") {
            // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        }
    });

    if (foundError) {
        const remainingWords = splitWordsForDisplay(original).slice(originalIndex);
        remainingWords.forEach(word => {
            correctLine.push(`<span>${word}</span> `);
        });
    } else {
        playSuccessSound();
        if ((currentSentence.circle_number_of_audio + currentSentence.number_of_audio - REQUIRED_PASSED_COUNT) === 0) {
            const sum = sumRez();
            console.log("üëÄ [10] decreaseAudioCounter() maxIndTablo", maxIndTablo);
            console.log("üëÄ [10] decreaseAudioCounter() sum", sum);
            console.log("üëÄ [10] decreaseAudioCounter() sum.circle_number_of_perfect + sum.circle_number_of_corrected)", sum.circle_number_of_perfect + sum.circle_number_of_corrected);
            if ((sum.circle_number_of_perfect + sum.circle_number_of_corrected) === selectedSentences.length) {
                // if ((sum.circle_number_of_perfect + sum.circle_number_of_corrected) === maxIndTablo) {
                console.log("üëÄ [11] decreaseAudioCounter()");
                btnNewCircle.focus();
            } else {
                console.log("üëÄ [12] decreaseAudioCounter()");
                checkNextDiv.focus();
            }

        } else {
            recordButton.focus();
        }
    }

    correctAnswerDiv.innerHTML = correctLine.join("");
}

function renderToEditable(userVerified) {
    let html = "";
    let errorFound = false;
    let totalOffset = 0;
    let errorOffset = 0;

    userVerified.forEach(word => {
        if (word.type === "correct") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        } else if (word.type === "missing") {
            if (REQUIRE_EVERY_WORD) {
                // –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∏—Å—É–µ–º –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –¥–æ–ø–µ—á–∞—Ç–∞—Ç—å —Å–ª–æ–≤–æ.
                // totalOffset –Ω–µ –∏–∑–º–µ–Ω—è–µ–º.
            } else {
                // –°—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ¬ª —Å–ª–æ–≤–æ –∑–µ–ª—ë–Ω—ã–º.
                html += `<span class="word-missing">${word.text} </span>`;
                totalOffset += word.text.length + 1;
            }
            // html += `<span class="word-missing">${word.text} </span>`;
            // totalOffset += word.text.length + 1;
        } else if (word.type === "error") {
            const before = word.userText.slice(0, word.errorIndex);
            const wrongLetter = word.userText[word.errorIndex] || "";
            const after = word.userText.slice(word.errorIndex + 1);

            html += `<span class="word-error">${before}<span class="letter-error">${wrongLetter}</span>${after} </span>`;

            if (!errorFound) {
                errorOffset = totalOffset + before.length + 1;
                errorFound = true;
            }
            totalOffset += word.userText.length + 1;
        } else if (word.type === "raw_user") {
            html += `<span class="word-correct">${word.text} </span>`;
            totalOffset += word.text.length + 1;
        }
    });

    inputField.innerHTML = html.trim();
    setCursorAtOffset(inputField, errorFound ? errorOffset : totalOffset);
}

function setCursorAtOffset(root, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            if (currentOffset + node.length >= offset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            } else {
                currentOffset += node.length;
            }
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(root);
}

function saveCursorPosition(containerEl) {
    const sel = window.getSelection();
    if (!sel.rangeCount) return null;
    const range = sel.getRangeAt(0);
    const preRange = range.cloneRange();
    preRange.selectNodeContents(containerEl);
    preRange.setEnd(range.startContainer, range.startOffset);
    return preRange.toString().length;
}

function restoreCursorPosition(containerEl, offset) {
    const range = document.createRange();
    const sel = window.getSelection();
    let currentOffset = 0;

    function walk(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            const nextOffset = currentOffset + node.length;
            if (offset <= nextOffset) {
                range.setStart(node, offset - currentOffset);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                return true;
            }
            currentOffset = nextOffset;
        } else {
            for (let i = 0; i < node.childNodes.length; i++) {
                if (walk(node.childNodes[i])) return true;
            }
        }
        return false;
    }

    walk(containerEl);
}

function playMultipleAudios(sequence) {
    const steps = sequence.split(''); // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "oto" ‚Üí ["o", "t", "o"])
    let index = 0;

    function playNext() {
        if (index >= steps.length) return;

        const currentAudio = steps[index] === 'o' ? audio : audio_tr; // –í—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        if (!currentAudio) {
            console.warn('–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —à–∞–≥–∞:', steps[index]);
            index++;
            return playNext();
        }

        currentAudio.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º
        currentAudio.play()
            .then(() => {
                currentAudio.onended = () => {
                    index++;
                    playNext(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                };
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                index++;
                playNext(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            });
    }

    playNext(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
}


function disableCheckButton(active) {
    const checkBtn = document.getElementById('checkBtn');
    const userInput = document.getElementById('userInput');
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    checkBtn.classList.value = '';
    switch (active) {
        case 2:
            checkBtn.disabled = false;
            checkBtn.innerHTML = '<i data-lucide="book-open-check"></i>';
            if (userInput) userInput.contentEditable = "false";
            checkBtn.classList.add('button-color-yellow');
            break;

        case 0:
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<i data-lucide="star"></i> <i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-mint');
            break;

        case 1:
            checkBtn.disabled = true;
            checkBtn.innerHTML = '<i data-lucide="star-half"></i><i data-lucide="check"></i>';
            if (userInput) userInput.contentEditable = "true";
            checkBtn.classList.add('button-color-lightgreen');
            break;
    }
    lucide.createIcons();
}

function check(original, userInput, currentKey) {
    const simplOriginal = simplifyText(original);
    const simplUser = simplifyText(userInput);

    const originalWords = splitWordsForDisplay(original);
    const userWords = userInput.trim().split(/\s+/);

    const userVerified = [];
    let i = 0, j = 0;
    let foundError = false;

    while (i < simplOriginal.length || j < simplUser.length) {
        const wordOrig = simplOriginal[i];
        const wordUser = simplUser[j];
        const fullWordOrig = originalWords[i] || "";
        const fullWordUser = userWords[j] || "";

        if (foundError) {
            if (j < userWords.length) {
                userVerified.push({ type: "raw_user", text: userWords[j] });
                j++;
            } else {
                break;
            }
        } else if (wordOrig === wordUser) {
            userVerified.push({ type: "correct", text: fullWordOrig });
            i++; j++;
        } else if (!REQUIRE_EVERY_WORD && simplOriginal[i + 1] === wordUser) {
            // –†–µ–∂–∏–º ¬´—Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞¬ª ‚Äî –í–´–ö–õ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            userVerified.push({ type: "missing", text: fullWordOrig });
            i++;
        } else {
            // –õ—é–±–æ–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–±—Ä–∞—Ç—å –í–°–Å
            const errorIndex = findFirstErrorIndex(wordOrig || "", wordUser || "");
            userVerified.push({
                type: "error",
                userText: fullWordUser,
                correctText: fullWordOrig,
                errorIndex: errorIndex
            });
            i++; j++;
            foundError = true; // ‚Üê –∫–ª—é—á: –ø—Ä–æ–ø—É—Å–∫/–Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞, –∞ –Ω–µ ¬´–º—è–≥–∫–∏–π¬ª missing
        }

    }

    // === ==
    if (!foundError) {

        const s = currentSentence;
        if (textAttemptCount === 0) {
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–æ –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏
            s.circle_number_of_perfect = 1;
            s.circle_number_of_corrected = 0;
            disableCheckButton(0);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–π –∑–≤–µ–∑–¥—É
        } else {
            // –≤—Å–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–ª–µ –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–±
            s.circle_number_of_corrected = 1;
            disableCheckButton(1);         // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–ª –∑–≤–µ–∑–¥—ã –Ω–∞ –Ω–µ–π
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —à–∞–ø–∫—É:
        // –ø–æ—Å—Ç–∞–≤–∏–º –∑–≤–µ–∑–¥–æ—á–∫—É –∏–ª–∏ –ø–æ–ª—É–∑–≤–∫–∑–¥–æ—á–∫—É —É "—Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –≤ "—Ç–∞–±–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        const btn = buttonsTablo[counterTabloIndex];
        applyStatusClass(btn, currentSentence, true);
        applyStatusNewCircle();

        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–æ –∏—Ç–æ–≥–æ–≤:
        syncCircleButton();

        // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ–∫—É—Å
        recordButton.focus();
    } else {
        // –û—à–∏–±–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        textAttemptCount++;
    }

    return userVerified;
}

function checkText() {
    const original = currentSentence.text;
    const translation = currentSentence.translation;
    const userInput = inputField.innerText;
    const currentKey = currentSentence.key;
    const result = check(original, userInput, currentKey);

    renderToEditable(result);
    renderResult(original, result);

    const allCorrect = result.every(word => word.type === "correct");

    correctAnswerDiv.style.display = "block";
    if (allCorrect) {
        correctAnswerDiv.style.display = "block";
        correctAnswerDiv.textContent = translation;
        correctAnswerDiv.style.color = 'var(--color-button-gray)';
        setTimeout(() => playMultipleAudios(playSequenceSuccess), 500); // "ot" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        updateTableRowStatus(currentSentence);
    } else {
        // translationDiv.style.display = "none";
    }


}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è inputField
inputField.addEventListener('keydown', function (event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        checkText();
        return;
    }
});

// const audio = document.getElementById('audio');
// const audio_tr = document.getElementById('audio_tr');
// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ
document.addEventListener('keydown', function (event) {
    if (event.ctrlKey) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ctrl –Ω–∞–∂–∞—Ç
        switch (event.key) {
            case '1':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                if (audio) audio.play();
                break;

            case '2':
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
                if (audio_tr) audio_tr.play();
                break;

            case '4':
                // –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                nextSentence();
                break;

            case '3':
                // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                previousSentence();
                break;

            case '0':
                // –ó–∞–∫–æ–Ω—á–∏—Ç—å –∫—Ä—É–≥ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                checkIfAllCompleted()
                break;
        }
    }


});


document.getElementById("userInput").addEventListener("input", function () {
    if (document.getElementById("correctAnswer").style.display != "none") {
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å O, —Ç—É—Ç –º–æ–∂–µ—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç
        playMultipleAudios(playSequenceTypo); // "t"

        document.getElementById("correctAnswer").style.display = "none";
        //document.getElementById("translation").style.display = "none";
    }
});

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Å–ª–æ–≤ —á–µ—Ä–µ–∑ LCS (Longest Common Subsequence) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (0..100)
function computeMatchPercent(originalText, spokenText) {
    // —Å—Ç–∞–ª–æ (—á–∏—Å–ª–∞ ‚Üí <num>):
    const a = simplifyText(prepareTextForASR(originalText));
    const b = simplifyText(prepareTextForASR(spokenText));

    if (a.length === 0 && b.length === 0) return 100;
    if (a.length === 0 || b.length === 0) return 0;

    // –î–ü-—Ç–∞–±–ª–∏—Ü–∞ LCS: (a.length+1) x (b.length+1)
    const dp = Array.from({ length: a.length + 1 }, () => new Array(b.length + 1).fill(0));
    for (let i = 1; i <= a.length; i++) {
        for (let j = 1; j <= b.length; j++) {
            if (a[i - 1] === b[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    const lcs = dp[a.length][b.length];
    const percent = (2 * lcs) / (a.length + b.length) * 100;
    return Math.round(percent);
}

// –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–∫—ñ–Ω—Ü—ñ –¥–∏–∫—Ç–∞–Ω—Ç—É -----------------------------------
// (3) –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
function clickBtnBackToList() {
    window.location.href = "/"; // –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
}



//  =============== –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ ===============================================
document.querySelectorAll(".custom-audio-player").forEach(player => {
    const audio = player.querySelector("audio.audio-element");
    const playBtn = player.querySelector(".play-btn");
    const progressBar = player.querySelector(".progress-bar");
    const currentTimeElem = player.querySelector(".current-time");
    const totalTimeElem = player.querySelector(".total-time");
    // const volumeWrapper = player.querySelector(".volume-wrapperÔ¨Å");
    const volumeSlider = player.querySelector('.volume-slider');
    const muteBtn = player.querySelector('.mute-btn');
    // const speedSelect = player.querySelector(".speed-select");


    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    const speedSelectWrapper = player.querySelector('.custom-speed-select');
    const speedSelectBtn = speedSelectWrapper?.querySelector('.speed-select-button');
    const speedSelected = speedSelectWrapper?.querySelector('.speed-selected');
    const speedOptions = speedSelectWrapper?.querySelector('.speed-options');
    const nativeSpeedSelect = player.querySelector(".speed-select");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ ------------------------------------------------------
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const updatePlaybackSpeed = (speed) => {
        audio.playbackRate = parseFloat(speed);
        if (speedSelected) speedSelected.textContent = `${speed}x`;
        if (nativeSpeedSelect) nativeSpeedSelect.value = speed;
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (speedSelectWrapper) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        speedSelectBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            speedSelectWrapper.classList.toggle('active');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speedOptions.querySelectorAll('li').forEach(option => {
            option.addEventListener('click', () => {
                const speed = option.dataset.value;
                updatePlaybackSpeed(speed);
                speedSelectWrapper.classList.remove('active');
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const initialSpeed = nativeSpeedSelect?.value || '1.0';
        updatePlaybackSpeed(initialSpeed);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º select
    if (nativeSpeedSelect) {
        nativeSpeedSelect.addEventListener('change', () => {
            updatePlaybackSpeed(nativeSpeedSelect.value);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ------------------------------------------------------
    audio.volume = 0.7; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
    volumeSlider.value = audio.volume;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
    playBtn.addEventListener("click", () => {
        if (audio.paused) {
            audio.play();
            //playBtn.textContent = "‚è∏";
            playBtn.innerHTML = '<i data-lucide="pause"></i>';
        } else {
            audio.pause();
            playBtn.innerHTML = '<i data-lucide="play"></i>';
            // playBtn.textContent = "‚ñ∂";
        }
        lucide.createIcons();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    volumeSlider.addEventListener('input', () => {
        audio.volume = volumeSlider.value;
        updateVolumeIcon(audio.volume, muteBtn);
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ mute
    muteBtn.addEventListener('click', () => {
        if (audio.volume > 0) {
            audio.volume = 0;
            volumeSlider.value = 0;
        } else {
            audio.volume = volumeSlider.dataset.lastVolume || 0.7;
            volumeSlider.value = audio.volume;
        }
        updateVolumeIcon(audio.volume, muteBtn);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ mute
    volumeSlider.addEventListener('mousedown', () => {
        if (audio.volume > 0) {
            volumeSlider.dataset.lastVolume = audio.volume;
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    audio.addEventListener("timeupdate", () => {
        const current = audio.currentTime;
        const duration = audio.duration;
        progressBar.value = (current / duration) * 100 || 0;
        currentTimeElem.textContent = formatTime(current);
        totalTimeElem.textContent = formatTime(duration || 0);
    });

    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progressBar.addEventListener("input", () => {
        audio.currentTime = (progressBar.value / 100) * audio.duration;
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateVolumeIcon(audio.volume, muteBtn);


});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
document.addEventListener('click', (e) => {
    if (!e.target.closest('.custom-speed-select')) {
        document.querySelectorAll('.custom-speed-select').forEach(select => {
            select.classList.remove('active');
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function updateVolumeIcon(volume, muteBtn) {
    let icon;
    if (volume === 0) {
        icon = 'volume-x';
    } else if (volume < 0.3) {
        icon = 'volume';
    } else if (volume < 0.6) {
        icon = 'volume-1';
    } else {
        icon = 'volume-2';
    }
    muteBtn.innerHTML = `<i data-lucide="${icon}"></i>`;
    lucide.createIcons();
}


// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–∞
function formatTime(sec) {
    const m = Math.floor(sec / 60);
    const s = Math.floor(sec % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
}

// --------------------------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
function validatePlaySequenceInput(input) {
    const value = input.value.toLowerCase();
    const validChars = /^[to]*$/;

    if (value && !validChars.test(value)) {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        input.value = value.replace(/[^to]/g, '');
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if (input.value.length > 5) {
        input.value = input.value.slice(0, 5);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function initPlaySequenceInputs() {
    const inputs = document.querySelectorAll('.play-sequence-input');

    inputs.forEach(input => {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
        input.addEventListener('input', (e) => {
            validatePlaySequenceInput(e.target);
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
        input.addEventListener('paste', (e) => {
            e.preventDefault();
            const pastedText = (e.clipboardData || window.clipboardData).getData('text').toLowerCase();
            const filteredText = pastedText.replace(/[^to]/g, '').slice(0, 5);
            input.value = filteredText;
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        input.addEventListener('blur', (e) => {
            validatePlaySequenceInput(e.target);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
function getPlaySequenceValues() {
    return {
        start: document.getElementById('playSequenceStart').value || 'oto',
        typo: document.getElementById('playSequenceTypo').value || 'o',
        success: document.getElementById('playSequenceSuccess').value || 'ot'
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function () {
    initPlaySequenceInputs();

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    document.getElementById('playSequenceStart').value = playSequenceStart;
    document.getElementById('playSequenceTypo').value = playSequenceTypo;
    document.getElementById('playSequenceSuccess').value = playSequenceSuccess;
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:-----------------------------------------------
document.addEventListener('DOMContentLoaded', function () {

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —á–∞—Å—ã –¥–ª—è –ø–∞—É–∑—ã
    const timerButton = document.querySelector('.stat-btn.timer');
    if (timerButton) {
        timerButton.addEventListener('click', function () {
            if (pauseModal.style.display === 'flex') {
                resumeGame();
            } else {
                pauseGame();
            }
        });

        // –£–±–∏—Ä–∞–µ–º disabled –∞—Ç—Ä–∏–±—É—Ç —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        timerButton.removeAttribute('disabled');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];

    activityEvents.forEach(eventName => {
        document.addEventListener(eventName, function () {
            // —Ç–∞–∫ –∫–∞–∫ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Ç–∏–ª—Å—è —Å–∞–º —Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –º–æ–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
            // dictationAllTime = dictationAllTime - INACTIVITY_TIMEOUT;
            // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã
            resetInactivityTimer();
        }, true);
    });

    // –ö–ª–∞–≤–∏—à–∞ Escape –¥–ª—è –ø–∞—É–∑—ã
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            if (pauseModal.style.display === 'flex') {
                resumeGame();
            } else {
                pauseGame();
            }
            event.preventDefault();
        }
    });
});
const userManager = window.UM;
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
const audioPlayers = {};

// –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫ –Ω–µ–º—É
// const modal = document.getElementById('modal');
// const titleField = document.getElementById('modalTitle');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
let startModal = null; // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
let audioSettingsModal = null; // –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ

let currentAudioFile = null; // —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞—É–¥–∏–æ

let data = [];
let currentDictation = {
    id: '', // ID —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    isNew: true, // –§–ª–∞–≥ - –Ω–æ–≤—ã–π —ç—Ç–æ –¥–∏–∫—Ç–∞–Ω—Ç –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    safe_email: '',  // –∏–º—è –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –≤ –≤–∏–¥–µ test_at_example_dot_com
    language_original: '',
    language_translation: '',
    category_key: '', // –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    category_title: '', // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_path: '', // –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
    dictationStartTime: 0, // –Ω–∞—á–∞–ª–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    dictationEndTime: 0, // –∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞
    tableFilled: false, // —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    is_dialog: false, // —Ñ–ª–∞–≥ –¥–∏–∞–ª–æ–≥–∞
    speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
    current_edit_mode: null, // 'original' | 'translation' | null
    current_row_key: null // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
};

let currentRowIndex = 0;
let sentenceRows = [];
let waveformCanvas = null;
let lastAudioUrl = null;
let currentRegion = null;
let wordPointer = 0; // –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
// –¶–≤–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ WaveformCanvas –∫–ª–∞—Å—Å–µ

let sentences_original = [];
let sentence_translation = [];

let workingData = {
    original: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [], // {key, speaker, text, audio, audio_users_shared, start, end, chain}
        audio_user_shared: '',
        audio_user_shared_start: 0,
        audio_user_shared_end: 0
    },
    translation: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [], // {key, speaker, text, audio, shared_audio, start, end, chain}
        audio_user_shared: '',
        audio_user_shared_start: 0,
        audio_user_shared_end: 0
    }
};














// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
let isPlaying = false;
let playheadAnimationId = null;



// ==================== —Åover –æ–±–ª–æ–∂–∫–∞ ========================================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ cover
function setupCoverHandlers() {
    const coverUploadBtn = document.getElementById('coverUploadBtn');
    const coverFile = document.getElementById('coverFile');
    const coverImage = document.getElementById('coverImage');

    if (coverUploadBtn && coverFile) {
        // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å" –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        coverUploadBtn.addEventListener('click', () => {
            coverFile.click();
        });

        // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        coverFile.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (!file.type.startsWith('image/')) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }

            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const reader = new FileReader();
                reader.onload = (e) => {
                    if (coverImage) {
                        coverImage.src = e.target.result;
                    }
                };
                reader.readAsDataURL(file);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const formData = new FormData();
                formData.append('cover', file);
                formData.append('dictation_id', currentDictation.id);

                const response = await fetch('/api/cover', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Cover —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result.cover_url);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    currentDictation.coverFile = file;
                } else {
                    const error = await response.json();
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cover:', error.error);
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cover:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cover —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function loadCoverForExistingDictation(dictationId, originalLanguage) {
    const coverImage = document.getElementById('coverImage');
    if (!coverImage) return;

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å cover –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const dictationCoverUrl = `/static/data/dictations/${dictationId}/cover.webp`;

    try {
        const response = await fetch(dictationCoverUrl, { method: 'HEAD' });
        if (response.ok) {
            coverImage.src = dictationCoverUrl;
            return;
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    // –ï—Å–ª–∏ cover –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º cover –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultCoverUrl = `/static/data/covers/cover_${originalLanguage}.webp`;
    coverImage.src = defaultCoverUrl;
}




// –§—É–Ω–∫—Ü–∏—è loadCategoryInfoForDictation —É–¥–∞–ª–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
function getCategoryPathFromNode(node) {
    const path = [];
    let currentNode = node;

    while (currentNode && currentNode.title !== 'root') {
        path.unshift(currentNode.title);
        currentNode = currentNode.parent;
    }

    return path.join(' > ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function updateCategoryPathDisplay(categoryPath) {
    const categoryPathElement = document.getElementById('category-path');
    if (categoryPathElement && categoryPath) {
        categoryPathElement.innerHTML = `<i data-lucide="folder"></i> ${categoryPath}`;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

function newSentances(key, text, key_audio, start = '', end = '') {
    return {
        key: key,
        text: text,
        audio: key_audio,
        start: start,
        end: end
    };

}

// ============================================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
function initNewDictation(safe_email, initData) {
    const timestamp = Date.now();
    const dictation_id = `dicta_${timestamp}`;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —è–∑—ã–∫–∞—Ö –∏–∑ sessionStorage
    const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
    const categoryInfo = categoryDataStr ? JSON.parse(categoryDataStr) : {};
    const language_original = categoryInfo.language_original || 'en';
    const language_translation = categoryInfo.language_translation || 'ru';
    console.log('üîç DEBUG: categoryInfo –∏–∑ sessionStorage:', categoryInfo);

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ initData
    currentDictation = {
        id: dictation_id,
        isNew: true,
        safe_email: safe_email,
        language_original: language_original,
        language_translation: language_translation,
        category_key: categoryInfo.key || '',
        category_title: categoryInfo.title || '',
        category_path: categoryInfo.path || '',
        coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
        is_dialog: false,
        speakers: {},
        current_edit_mode: null, // 'original' | 'translation' | null - –≥—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        current_row_key: null // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    };

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('title').value = '';
    document.getElementById('title_translation').value = '';
    // document.getElementById('text').value = ''; // TODO: –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç text –≤ —à–∞–±–ª–æ–Ω
    // document.querySelector('#sentences-table tbody').innerHTML = ''; // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É sentences –≤ —à–∞–±–ª–æ–Ω
    document.getElementById('dictation-id').textContent = `–ù–æ–≤—ã–π –¥–∏–∫—Ç–∞–Ω—Ç: ` + dictation_id;

    // ==================== –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ ========================================
    console.log('üîç DEBUG: –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const startModal = document.getElementById('startModal');
    console.log('üîç DEBUG: startModal —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!startModal);

    if (startModal) {
        console.log('üîç DEBUG: startModal —Ç–µ–∫—É—â–∏–π display:', startModal.style.display);
        console.log('üîç DEBUG: startModal computed style:', window.getComputedStyle(startModal).display);
    }

    // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    setTimeout(() => {
        console.log('üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º openStartModal()...');
        openStartModal();
    }, 100);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    console.log('üîç DEBUG: currentDictation.category_path:', currentDictation.category_path);
    if (currentDictation.category_path) {
        updateCategoryPathDisplay(currentDictation.category_path);
        console.log('‚úÖ –ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω:', currentDictation.category_path);
    } else {
        console.log('‚ùå –ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç–æ–π!');
    }


    // TODO: –∑–∞—á–µ–º —ç—Ç–æ?
    // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è input (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    // const input = document.getElementById('audioFile');
    // if (input) {
    //     input.value = '';
    // }

}


// ==================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ ========================================
async function loadExistingDictation(initData) {

    const {
        dictation_id,
        original_language,
        translation_language,
        title,
        level,
        original_data,
        translation_data,
        audio_file,
        audio_words,
        safe_email
    } = initData;

    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ sessionStorage (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–µ—Ä–µ–≤–µ)
    const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
    const categoryInfo = categoryDataStr ? JSON.parse(categoryDataStr) : {};

    currentDictation = {
        id: dictation_id,
        isNew: false,
        safe_email: safe_email,
        language_original: original_language,
        language_translation: translation_language,
        audio_words: audio_words,
        category_key: categoryInfo.key || '',
        category_title: categoryInfo.title || '',
        category_path: categoryInfo.path || '',
        coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
        is_dialog: original_data?.is_dialog || false,
        speakers: original_data?.speakers || {}
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    document.getElementById('dictation-id').textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º: ` + dictation_id;
    document.getElementById('title').value = title;
    document.getElementById('title_translation').value = translation_data?.title || "";

    // –ó–∞–≥—Ä—É–∂–∞–µ–º cover –µ—Å–ª–∏ –µ—Å—Ç—å
    await loadCoverForExistingDictation(dictation_id, original_language);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ info.json)
    if (currentDictation.category_path) {
        updateCategoryPathDisplay(currentDictation.category_path);
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
        const response = await fetch('/copy_dictation_to_temp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictation_id,
                language_original: original_language,
                language_translation: translation_language
            })
        });

        if (response.ok) {
            console.log('‚úÖ –î–∏–∫—Ç–∞–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤ temp:', error);
    }


    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    workingData = {
        original: original_data,
        translation: translation_data
    };
    
    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ original_data:', original_data);
    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ translation_data:', translation_data);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    await createTable();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–Ω—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
    initializeAudioForExistingDictation();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Lucide –∏–∫–æ–Ω–∫–∏
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// document.addEventListener('DOMContentLoaded', () => {
function initDictationGenerator() {
    // const path = window.location.pathname;


    // 1. –ü–æ–ª—É—á–∞–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const initRaw = document.getElementById("init-data")?.textContent;

    // 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
    const initData = JSON.parse(initRaw);

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ UserManager
    let safe_email = window.UM.getSafeEmail();
    if (safe_email === 'anonymous') {
        safe_email = initData.safe_email || 'anonymous';
    }

    console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ", initData);

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dictation_id –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    if (initData.dictation_id !== 'new') {
        console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ loadExistingDictation ");
        loadExistingDictation(initData);
    } else {
        console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ initNewDictation");
        initNewDictation(safe_email, initData);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º language_selector –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
    initLanguageFlags(initData);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–≤–µ—Ä–∞
    setupCoverHandlers();

    // setupButtons(); // –£–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    // initializeUser(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JWT –≤–µ—Ä—Å–∏—è)
    // setupAuthHandlers(); // –î–û–ë–ê–í–ò–¢–¨ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    // setupExitHandlers(); // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—Ö–æ–¥–∞
    setupStartModalHandlers(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setupTitleTranslationHandler(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    updateRadioButtonIcons('full');

}



// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–õ–ê–ì–û–í –Ø–ó–´–ö–û–í
function initLanguageFlags(initData) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–æ–≤
        const langPairContainer = document.getElementById('langPair');
        if (!langPairContainer) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä langPair –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤ –∏–∑ initData –∏–ª–∏ sessionStorage
        let language_original = initData.original_language;
        let language_translation = initData.translation_language;

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–∏–∫—Ç–∞–Ω—Ç, –±–µ—Ä–µ–º —è–∑—ã–∫–∏ –∏–∑ sessionStorage
        if (initData.dictation_id === 'new') {
            const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
            if (categoryDataStr) {
                const categoryData = JSON.parse(categoryDataStr);
                language_original = categoryData.language_original || language_original;
                language_translation = categoryData.language_translation || language_translation;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LanguageManager –∏ LanguageSelector –¥–æ—Å—Ç—É–ø–Ω—ã
        if (typeof window.LanguageManager === 'undefined') {
            console.warn('LanguageManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (typeof LanguageSelector === 'undefined') {
            console.warn('LanguageSelector –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤
        const languageData = window.LanguageManager.getLanguageData();
        if (!languageData) {
            console.warn('–î–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥–∏ —Å –ø–æ–º–æ—â—å—é LanguageSelector
        const flagCombo = new LanguageSelector({
            container: langPairContainer,
            mode: 'flag-combo',
            nativeLanguage: language_translation, // —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ (–ø–µ—Ä–µ–≤–æ–¥)
            currentLearning: language_original,   // –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
            languageData: languageData
        });

        console.log('‚úÖ –§–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
            original: language_original,
            translation: language_translation
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤:', error);
    }
}

// ============================================================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ò–ì–†–´–í–ê–ù–ò–Ø –ê–£–î–ò–û
// ============================================================================

let currentPlayingButton = null;
let currentAudio = null;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
 * @param {Event} event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
async function handleAudioPlayback(event) {
    console.log('üîòüîò1üîòüîòüîòüîò handleAudioPlayback –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üîòüîò2üîòüîòüîòüîò event.target:', event.target);

    const button = event.target.closest('button.audio-btn');
    console.log('üîòüîò3üîòüîòüîòüîò –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞:', button);

    if (!button) {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º audio-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º');
        return;
    }
    console.log('üîòüîò4üîòüîòüîòüîò –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞:', button);

    const language = button.dataset.language; // 'en' –∏–ª–∏ 'ru'
    const fieldName = button.dataset.fieldName; // 'audio', 'audio_avto', 'audio_user', 'audio_mic', 'audio_user_shared'
    // const shouldCreate = button.dataset.state === 'creating'; // –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª
    const state = button.dataset.state;
    console.log('üîòüîò5üîòüîòüîòüîò language:', language, 'fieldName:', fieldName, 'state:', state);

    // –ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (currentAudio && currentPlayingButton) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const originalState = currentPlayingButton.dataset.originalState || 'ready';
        setButtonState(currentPlayingButton, originalState);
    }
    console.log('üîòüîò6üîòüîòüîòüîò currentPlayingButton:', currentPlayingButton);


    // try {
    console.log('üîòüîò7üîòüîòüîòüîò state:', state);
    switch (state) {
        case 'ready':
            console.log('üîòüîò8üîòüîòüîòüîò switch:');
            playExistingAudio(button, language, fieldName);
            break;
        case 'ready-shared':
            console.log('üîòüîò9üîòüîòüîòüîò switch:');
            playExistingAudio(button, language, fieldName);
            break;
        case 'playing-shared':
            console.log('üîòüîò10üîòüîòüîòüîò switch: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥ –≤–æ–ª–Ω–æ–π');
            stopCurrentPlayback();
            break;
        case 'playing':
            console.log('üîòüîò11üîòüîòüîòüîò switch:');
            // –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            stopCurrentPlayback();
            break;
        case 'creating':
            console.log('üîòüîò12üîòüîòüîòüîò switch:');
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "—Å–æ–∑–¥–∞–Ω–∏–µ"
            await createAndPlayAudio(button, language, fieldName);
            break;
        case 'creating_user':
            console.log('üîòüîò13üîòüîòüîòüîò switch:');
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "—Å–æ–∑–¥–∞–Ω–∏–µ"
            await createAndPlayAudio(button, language, fieldName);
            break;
        case 'creating_mic':
            console.log('üîòüîò14üîòüîòüîòüîò switch:');
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "—Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            break;
    }
    //     if (shouldCreate) {
    //     await createAndPlayAudio(button, language, fieldName);
    // } else {
    //     await playExistingAudio(button, language, fieldName);
    // }
    // } catch (error) {
    //     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
    //     setButtonState(button, 'ready');
    // }
}



/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
 */
function updateAudioButtonState(audioBtn) {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const sentence = getSentenceForButton(audioBtn);
    const hasAudio = sentence && sentence[audioBtn.dataset.fieldName];

    // –û–±–Ω–æ–≤–ª—è–µ–º dataset.create –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ
    audioBtn.dataset.create = hasAudio ? 'false' : 'true';
    audioBtn.title = hasAudio ? '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ' : '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    setButtonState(audioBtn, 'ready');
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∞—É–¥–∏–æ
 */
async function createAndPlayAudio(button, language, fieldName) {
    setButtonState(button, 'creating');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const sentence = getSentenceForButton(button);
        if (!sentence) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏');
        }

        // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        const audioFile = await generateAudioForSentence(sentence, language);

        if (!audioFile) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentence[fieldName] = audioFile;

        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Ñ–∞–π–ª —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        button.dataset.state = 'playing';
        // button.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        currentPlayingButton = button;
        await playAudioFile(audioFile, language);

        // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'ready'
        // —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onended –≤ playAudioFile

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
        setButtonState(button, 'creating');
        throw error;
    }
}


/**
 * –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
 */
async function playExistingAudio(button, language, fieldName) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    console.log('üîç8üîç button, language, fieldName:', button, language, fieldName);
    const audioFile = getAudioFileName(button, language, fieldName);
    console.log('üîç9üîç audioFile:', audioFile);

    if (!audioFile) {
        console.warn('‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
    currentPlayingButton = button;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const isSharedButton = button.dataset.state === 'ready-shared' || button.dataset.state === 'playing-shared';
    const playingState = isSharedButton ? 'playing-shared' : 'playing';
    setButtonState(button, playingState);

    // –û–±–Ω–æ–≤–ª—è–µ–º playhead —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π
    const shouldUpdatePlayhead = isSharedButton;

    if (isSharedButton && waveformCanvas) {
        // –î–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WaveformCanvas
        const audioElement = audioPlayers[audioFile];
        if (audioElement) {
            await waveformCanvas.startPlayback(audioElement);
        } else {
            console.warn('‚ö†Ô∏è –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π');
        }
    } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        await playAudioFile(audioFile, language, shouldUpdatePlayhead, 0);
    }
}

/**
 * –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–µ–µ—Ä—ã)
 */
async function playAudioFile(audioFile, language, updatePlayhead = false) {
    console.log('üéµ playAudioFile –≤—ã–∑–≤–∞–Ω–∞:', audioFile, language, 'updatePlayhead:', updatePlayhead);
    console.log('üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–µ—Ä—ã:', Object.keys(audioPlayers));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä
    if (audioPlayers[audioFile]) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–µ–µ—Ä –≤ –∫—ç—à–µ:', audioFile);
        const player = audioPlayers[audioFile];

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if (currentAudio) {
            currentAudio.pause();
        }

        currentAudio = player;

        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ WaveformCanvas (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (updatePlayhead && waveformCanvas) {
            waveformCanvas.startAudioControl(player);
        }

        return new Promise((resolve, reject) => {
            player.onended = () => {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å WaveformCanvas
                if (updatePlayhead && waveformCanvas) {
                    waveformCanvas.stopAudioControl();
                }
                if (currentPlayingButton) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    const originalState = currentPlayingButton.dataset.originalState || 'ready';
                    setButtonState(currentPlayingButton, originalState);
                    currentPlayingButton = null;
                }
                currentAudio = null;
                resolve();
            };

            player.onerror = (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
                if (currentPlayingButton) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    const originalState = currentPlayingButton.dataset.originalState || 'ready';
                    setButtonState(currentPlayingButton, originalState);
                    currentPlayingButton = null;
                }
                currentAudio = null;
                reject(error);
            };

            player.play().catch(reject);
        });
    } else {
        // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        console.log('‚ö†Ô∏è –ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º:', audioFile);
        const audioUrl = `/static/data/temp/${currentDictation.id}/${language}/${audioFile}`;
        console.log('üéµ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', audioUrl);
        const audio = new Audio(audioUrl);
        audioPlayers[audioFile] = audio;

        return new Promise((resolve, reject) => {
            audio.onloadeddata = () => {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if (currentAudio) {
                    currentAudio.pause();
                }

                currentAudio = audio;

                // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ WaveformCanvas (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                if (updatePlayhead && waveformCanvas) {
                    waveformCanvas.startAudioControl(audio);
                }

                // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ–≥–¥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
                audio.onended = () => {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å WaveformCanvas
                    if (updatePlayhead && waveformCanvas) {
                        waveformCanvas.stopAudioControl();
                    }
                    if (currentPlayingButton) {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        const originalState = currentPlayingButton.dataset.originalState || 'ready';
                        setButtonState(currentPlayingButton, originalState);
                        currentPlayingButton = null;
                    }
                    currentAudio = null;
                    resolve();
                };

                audio.play().catch(reject);
            };

            audio.onended = () => {
                if (currentPlayingButton) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    const originalState = currentPlayingButton.dataset.originalState || 'ready';
                    setButtonState(currentPlayingButton, originalState);
                    currentPlayingButton = null;
                }
                currentAudio = null;
                resolve();
            };

            audio.onerror = (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error);
                if (currentPlayingButton) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    const originalState = currentPlayingButton.dataset.originalState || 'ready';
                    setButtonState(currentPlayingButton, originalState);
                    currentPlayingButton = null;
                }
                currentAudio = null;
                reject(error);
            };
        });
    }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ
 */
async function stopCurrentPlayback() {
    console.log('üîò stopCurrentPlayback –≤—ã–∑–≤–∞–Ω–∞');

    if (currentAudio) {
        console.log('üîò –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentAudio');
        currentAudio.pause();
        currentAudio.currentTime = 0;
        currentAudio = null;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å WaveformCanvas
    if (waveformCanvas) {
        console.log('üîò –í—ã–∑—ã–≤–∞–µ–º waveformCanvas.stopAudioControl()');
        waveformCanvas.stopAudioControl();
    }

    if (currentPlayingButton) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const originalState = currentPlayingButton.dataset.originalState || 'ready';
        setButtonState(currentPlayingButton, originalState);
        currentPlayingButton = null;
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
 */
function getSentenceForButton(button) {

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    const language = button.dataset.language;

    if (language === currentDictation.language_original) {
        if (button.dataset.state === 'ready-shared') {
            return workingData.original;
        } else {
            const row = button.closest('tr');
            const key = row.dataset.key;
            return workingData.original.sentences.find(s => s.key === key);
        }
    } else {
        if (button.dataset.state === 'ready-shared') {
            return workingData.translation;
        } else {
            const row = button.closest('tr');
            const key = row.dataset.key;
            return workingData.translation.sentences.find(s => s.key === key);
        }
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
 */
function getAudioFileName(button, language, fieldName) {
    console.log('üîç getAudioFileName –≤—ã–∑–≤–∞–Ω–∞:', fieldName, language);

    const sentence = getSentenceForButton(button);
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', sentence);

    const fileName = sentence ? sentence[fieldName] : null;
    console.log('üîç –ò–º—è —Ñ–∞–π–ª–∞:', fileName);

    return fileName;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
 * –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ —Å—Ç–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∏–∑ dataset.state
 */
function setButtonState(button, state = '') {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // button.classList.remove('state-ready', 'state-playing', 'state-creating');

    // // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // button.classList.add(`state-${state}`);
    if (state === '') {
        state = button.dataset.state;
    }

    let newIcon = '';
    switch (state) {
        case 'ready':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≥–æ—Ç–æ–≤" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            newIcon = 'play';
            break;
        case 'ready-shared':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≥–æ—Ç–æ–≤-shared" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            // —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            newIcon = 'play';
            break;
        case 'playing':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–∞—É–∑—ã
            newIcon = 'pause';
            break;
        case 'playing-shared':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-shared" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–∞—É–∑—ã
            // —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            newIcon = 'pause';
            break;
        case 'creating':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "—Å–æ–∑–¥–∞–Ω–∏–µ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –º–æ–ª–æ—Ç–∫–∞
            newIcon = 'hammer';
            break;
        case 'creating_mic':
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "—Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            newIcon = 'mic';
            break;
    }
    button.innerHTML = `<i data-lucide="${newIcon}"></i>`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ DOM
    button.dataset.state = state;

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É Lucide
    lucide.createIcons();
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–î–ò–ö–ê–¢–û–†–ê –ó–ê–ì–†–£–ó–ö–ò
// ============================================================================

function showLoadingIndicator(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    // –°–æ–∑–¥–∞–µ–º overlay
    let overlay = document.getElementById('loading-overlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">${message}</div>
            </div>
        `;
        document.body.appendChild(overlay);
    } else {
        overlay.querySelector('.loading-text').textContent = message;
    }
    overlay.style.display = 'flex';
}

function hideLoadingIndicator() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–°–í–ï–¢–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê –í TEXTAREA
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è contenteditable div
 * @param {HTMLElement} editor - —ç–ª–µ–º–µ–Ω—Ç contenteditable
 */
function setupTextareaHighlighting(editor) {
    let isUpdating = false;

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    function updateHighlight() {
        if (isUpdating) return;

        const text = editor.innerText || editor.textContent;
        const lines = text.split('\n');
        const delimiter = document.getElementById('translationDelimiter')?.value || '/*';

        const highlightedText = lines.map(line => {
            if (line.trim().startsWith(delimiter)) {
                return `<span class="line-translation">${escapeHtml(line)}</span>`;
            }
            return escapeHtml(line);
        }).join('\n');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        const selection = window.getSelection();
        const range = selection.rangeCount > 0 ? selection.getRangeAt(0) : null;
        const cursorOffset = range ? getCursorOffset(editor, range) : 0;

        isUpdating = true;
        editor.innerHTML = highlightedText;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        if (cursorOffset !== null) {
            setCursorAtOffset(editor, cursorOffset);
        }
        isUpdating = false;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    editor.addEventListener('input', () => {
        if (!isUpdating) {
            setTimeout(updateHighlight, 10);
        }
    });

    editor.addEventListener('paste', (e) => {
        e.preventDefault();
        const text = (e.clipboardData || window.clipboardData).getData('text');
        document.execCommand('insertText', false, text);
        setTimeout(updateHighlight, 10);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    const delimiterInput = document.getElementById('translationDelimiter');
    if (delimiterInput) {
        delimiterInput.addEventListener('input', updateHighlight);
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    updateHighlight();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç
 * @param {Range} range - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è
 * @returns {number} - –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
 */
function getCursorOffset(element, range) {
    let offset = 0;
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
        false
    );

    let node;
    while (node = walker.nextNode()) {
        if (node === range.startContainer) {
            offset += range.startOffset;
            break;
        }
        offset += node.textContent.length;
    }

    return offset;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
 * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç
 * @param {number} offset - –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
 */
function setCursorAtOffset(element, offset) {
    const range = document.createRange();
    const selection = window.getSelection();

    let currentOffset = 0;
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
        false
    );

    let node;
    while (node = walker.nextNode()) {
        const nodeLength = node.textContent.length;
        if (currentOffset + nodeLength >= offset) {
            range.setStart(node, offset - currentOffset);
            range.setEnd(node, offset - currentOffset);
            break;
        }
        currentOffset += nodeLength;
    }

    selection.removeAllRanges();
    selection.addRange(range);
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
 * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–¨–Æ –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–û
// ============================================================================

/**
 * –û—Ç–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 * @param {string} language - 'original' –∏–ª–∏ 'translation'
 * @param {string} rowKey - –∫–ª—é—á —Å—Ç—Ä–æ–∫–∏
 */
function openAudioSettingsPanel(language, rowKey) {
    console.log('üéµ openAudioSettingsPanel –≤—ã–∑–≤–∞–Ω–∞:', language, rowKey);

    const modal = document.getElementById('audioSettingsModal');
    console.log('üîç –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ:', modal);

    if (modal) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentDictation.current_edit_mode = language;
        currentDictation.current_row_key = rowKey;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
        modal.style.display = 'block';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        const fullRadio = document.querySelector('input[name="audioMode"][value="full"]');
        if (fullRadio) {
            fullRadio.checked = true;
            // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            handleAudioModeChange({ target: fullRadio });
            console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        updateRadioButtonIcons('full');

        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
        console.log('üìã –°—Ç–∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
            display: modal.style.display,
            zIndex: window.getComputedStyle(modal).zIndex
        });
    } else {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ audioSettingsModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function closeAudioSettingsPanel() {
    const modal = document.getElementById('audioSettingsModal');
    if (modal) {
        modal.style.display = 'none';

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentDictation.current_edit_mode = null;
        currentDictation.current_row_key = null;

        console.log('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞');
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ò–î–ò–ú–û–°–¢–ò –ö–û–õ–û–ù–û–ö
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫
 */
function setupColumnToggleHandlers() {
    const toggleOriginalBtn = document.getElementById('open_left_panel_original');

    if (toggleOriginalBtn) {
        toggleOriginalBtn.addEventListener('click', () => {
            console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤ –®–ê–ü–ö–ï —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–∞—Ç–∞');

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            const table = document.getElementById('sentences-table');
            console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã:', table.className);

            if (table.classList.contains('state-original-translation')) {
                console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing');
                toggleColumnGroup('original');
            } else {
                console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation');
                toggleColumnGroup('translation');
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
            console.log('üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É–¥–∏–æ –∏–∑ —à–∞–ø–∫–∏');
            openAudioSettingsPanel('original', 'header');
        });
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ open_left_panel_original –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –º–µ–∂–¥—É original-translation –∏ original-editing
 * @param {string} group - 'original' –∏–ª–∏ 'translation'
 */
function toggleColumnGroup(group) {
    console.log('üîÑ toggleColumnGroup –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', group);

    const table = document.getElementById('sentences-table');
    if (!table) {
        console.warn('‚ùå –¢–∞–±–ª–∏—Ü–∞ sentences-table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', table.className);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    table.classList.remove('state-original-translation', 'state-original-editing');

    if (group === 'original') {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing (–æ—Ä–∏–≥–∏–Ω–∞–ª + –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
        table.classList.add('state-original-editing');
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å state-original-editing');
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        updateToggleButtonIcon('open_left_panel_original', 'original');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        const fullRadio = document.querySelector('input[name="audioMode"][value="full"]');
        if (fullRadio && !fullRadio.checked) {
            fullRadio.checked = true;
            // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            handleAudioModeChange({ target: fullRadio });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
        updateRadioButtonIcons('full');
    } else if (group === 'translation') {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation (–æ—Ä–∏–≥–∏–Ω–∞–ª + –ø–µ—Ä–µ–≤–æ–¥)
        table.classList.add('state-original-translation');
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å state-original-translation');
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        updateToggleButtonIcon('open_left_panel_original', 'translation');
    }

    console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', table.className);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ
    const currentAudioMode = document.querySelector('input[name="audioMode"]:checked');
    if (currentAudioMode) {
        updateTableColumnsVisibility(currentAudioMode.value);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CSS
    setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const allEditingElements = document.querySelectorAll('.panel-editing-avto, .panel-editing-user, .panel-editing-mic');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', allEditingElements.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º panel-original
        const allOriginalElements = document.querySelectorAll('.panel-original');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .panel-original:', allOriginalElements.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º panel-translation
        const allTranslationElements = document.querySelectorAll('.panel-translation');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .panel-translation:', allTranslationElements.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ .panel-translation
        if (allTranslationElements.length > 0) {
            const firstTranslationElement = allTranslationElements[0];
            const translationStyle = window.getComputedStyle(firstTranslationElement);
            console.log('üîç CSS –¥–ª—è .panel-translation:', {
                display: translationStyle.display,
                visibility: translationStyle.visibility,
                className: firstTranslationElement.className
            });
        }
    }, 100);
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} buttonId - ID –∫–Ω–æ–ø–∫–∏
 * @param {string} state - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ('original' –∏–ª–∏ 'translation')
 */
function updateToggleButtonIcon(buttonId, state) {
    console.log('üé® updateToggleButtonIcon –≤—ã–∑–≤–∞–Ω–∞:', buttonId, state);

    const button = document.getElementById(buttonId);

    if (button) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', button);

        if (state === 'original') {
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ original-editing –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É "–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
            button.innerHTML = `<i data-lucide="panel-left-close"></i>`;
            console.log('üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: panel-left-close');
        } else if (state === 'translation') {
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ original-translation –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É "–æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
            button.innerHTML = `<i data-lucide="panel-left-open"></i>`;
            console.log('üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: panel-left-open');
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            console.log('üé® –ò–∫–æ–Ω–∫–∏ Lucide –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã');
        } else {
            console.warn('‚ö†Ô∏è Lucide –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', buttonId);
    }
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–û
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function setupAudioSettingsModalHandlers() {
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    const cancelAudioBtn = document.getElementById('cancelAudioBtn');
    if (cancelAudioBtn) {
        cancelAudioBtn.addEventListener('click', closeAudioSettingsPanel);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    const applyAudioBtn = document.getElementById('applyAudioBtn');
    if (applyAudioBtn) {
        applyAudioBtn.addEventListener('click', () => {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ');
            closeAudioSettingsPanel();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ
    const radioButtons = document.querySelectorAll('input[name="audioMode"]');
    radioButtons.forEach(radio => {
        radio.addEventListener('change', handleAudioModeChange);
    });

    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const selectFileBtn = document.getElementById('selectFileBtn');
    if (selectFileBtn) {
        selectFileBtn.addEventListener('click', handleSelectFile);
    }

    // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const reRecordBtn = document.getElementById('reRecordBtn');
    if (reRecordBtn) {
        reRecordBtn.addEventListener('click', handleReRecord);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    setupFileInputHandler();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª–µ–π –ø–æ–¥ –≤–æ–ª–Ω–æ–π
    setupWaveformFieldsHandlers();

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    const audioPlayBtn = document.getElementById('audioPlayBtn');
    if (audioPlayBtn) {
        // audioPlayBtn.addEventListener('click', handleAudioPlay);
        audioPlayBtn.addEventListener('click', handleAudioPlayback);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è audioPlayBtn');
    }

    const audioStartBtn = document.getElementById('audioStartBtn');
    if (audioStartBtn) {
        audioStartBtn.addEventListener('click', handleAudioStart);
    }

    const audioEndBtn = document.getElementById('audioEndBtn');
    if (audioEndBtn) {
        audioEndBtn.addEventListener('click', handleAudioEnd);
    }

    // –ö–Ω–æ–ø–∫–∞ —Å –Ω–æ–∂–Ω–∏—Ü–∞–º–∏
    const scissorsBtn = document.getElementById('scissorsBtn');
    if (scissorsBtn) {
        scissorsBtn.addEventListener('click', () => {
            // –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ - –±–µ—Ä–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            const start = parseFloat(document.getElementById('audioStartTime').value) || 0;
            const end = parseFloat(document.getElementById('audioEndTime').value) || 0;

            if (start >= end) {
                alert('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ —Ä–µ–∂–∏–º–∞ "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª"
            const currentAudioFile = getCurrentAudioFileForScissors();
            if (!currentAudioFile) {
                alert('–ù–µ –≤—ã–±—Ä–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–µ–∑–∫–∏');
                return;
            }

            console.log(`‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ ${currentAudioFile.filename} —Å ${start} –ø–æ ${end}`);

            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–µ–∑–∫–∏ –∞—É–¥–∏–æ
            trimAudioFile(currentAudioFile, start, end);
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–†–∞–∑—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ –Ω–∞ 1000 –∫—É—Å–∫–æ–≤"
    const audioToTableBtn = document.getElementById('audioToTableBtn');
    if (audioToTableBtn) {
        audioToTableBtn.addEventListener('click', () => {
            // –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            splitAudioIntoSentences();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const audioSettingsModal = document.getElementById('audioSettingsModal');
    if (audioSettingsModal) {
        audioSettingsModal.addEventListener('click', (e) => {
            if (e.target === audioSettingsModal) {
                closeAudioSettingsPanel();
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ (—Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏)
 */
function handleAudioModeChange(event) {
    const selectedMode = event.target.value;
    const waveformContainer = document.querySelector('.waveform-container');
    const fileSelectionPanel = document.getElementById('fileSelectionPanel');
    const playbackControls = document.querySelector('.playback-controls');
    const applyBtn = document.getElementById('applyAudioBtn');
    const applyBtnText = document.getElementById('applyBtnText');
    const applyBtnIcon = applyBtn ? applyBtn.querySelector('i') : null;

    console.log('üéµ –ò–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –∞—É–¥–∏–æ:', selectedMode);

    if (waveformContainer) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ä–µ–∂–∏–º–æ–≤
        waveformContainer.classList.remove('mode-auto', 'mode-full', 'mode-sentence', 'mode-mic');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        if (selectedMode === 'auto') {
            waveformContainer.classList.add('mode-auto');
        } else if (selectedMode === 'full') {
            waveformContainer.classList.add('mode-full');
        } else if (selectedMode === 'sentence') {
            waveformContainer.classList.add('mode-sentence');
        } else if (selectedMode === 'mic') {
            waveformContainer.classList.add('mode-mic');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const currentAudioInfo = document.querySelector('.current-audio-info');

        if (fileSelectionPanel) {
            if (selectedMode === 'full') {
                fileSelectionPanel.style.display = 'block';
                if (currentAudioInfo) {
                    currentAudioInfo.style.display = 'none';
                }
            } else {
                fileSelectionPanel.style.display = 'none';
                if (currentAudioInfo) {
                    currentAudioInfo.style.display = 'block';
                }
            }
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (applyBtn && applyBtnText && applyBtnIcon) {
            if (selectedMode === 'auto') {
                applyBtnText.textContent = '–°–æ–∑–¥–∞—Ç—å';
                applyBtnIcon.setAttribute('data-lucide', 'wand-2');
                applyBtn.className = 'apply-btn auto-mode';
            } else if (selectedMode === 'mic') {
                applyBtnText.textContent = '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å';
                applyBtnIcon.setAttribute('data-lucide', 'mic');
                applyBtn.className = 'apply-btn mic-mode';
            } else {
                applyBtnText.textContent = '–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –∞—É–¥–∏–æ –≤ –¥–∏–∫—Ç–∞–Ω—Ç';
                applyBtnIcon.setAttribute('data-lucide', 'check');
                applyBtn.className = 'apply-btn';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É Lucide
            if (window.lucide) {
                window.lucide.createIcons();
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        const waveformAndControls = document.getElementById('waveformAndControls');

        if (waveformAndControls) {
            if (selectedMode === 'auto') {
                // –î–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ —Å–ø—Ä–∞–≤–∞
                waveformAndControls.style.display = 'none';
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ —Å–ø—Ä–∞–≤–∞
                waveformAndControls.style.display = 'flex';
            }
        }

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω—É –∏ –ø–æ–ª—è start/end –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        updateWaveformAndFieldsForMode(selectedMode);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
        updateCurrentAudioInfo(selectedMode);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        updateTableColumnsVisibility(selectedMode);

        // –ï—Å–ª–∏ –µ—Å—Ç—å waveformCanvas, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤–æ–ª–Ω—ã
        if (window.waveformCanvas) {
            updateWaveformColors(selectedMode);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    updateRadioButtonIcons(selectedMode);
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ª–Ω—É –∏ –ø–æ–ª—è start/end –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
 */
function updateWaveformAndFieldsForMode(mode) {
    console.log('üåä –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω—É –∏ –ø–æ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞:', mode);

    const waveformCanvas = window.waveformCanvas;
    const startTimeInput = document.getElementById('audioStartTime');
    const endTimeInput = document.getElementById('audioEndTime');

    if (mode === 'full') {
        // –†–µ–∂–∏–º "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ audio_user_shared_start/end
        if (workingData && workingData.original) {
            const start = workingData.original.audio_user_shared_start || 0;
            const end = workingData.original.audio_user_shared_end || 0;

            if (startTimeInput && endTimeInput) {
                startTimeInput.value = start.toFixed(2);
                endTimeInput.value = end.toFixed(2);
                console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞ full:', start.toFixed(2), '-', end.toFixed(2));
            }

            if (waveformCanvas && end > 0) {
                waveformCanvas.setRegion(start, end);
                console.log('üåä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ full:', start.toFixed(2), '-', end.toFixed(2));
            }
        }
    } else if (mode === 'sentence') {
        // –†–µ–∂–∏–º "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const selectedRow = document.querySelector('#sentences-table tbody tr.selected');
        if (selectedRow) {
            const key = selectedRow.dataset.key;
            const sentence = workingData.original.sentences.find(s => s.key === key);
            if (sentence) {
                if (startTimeInput && endTimeInput) {
                    startTimeInput.value = sentence.start.toFixed(2);
                    endTimeInput.value = sentence.end.toFixed(2);
                    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞ sentence:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
                }

                if (waveformCanvas) {
                    waveformCanvas.setRegion(sentence.start, sentence.end);
                    console.log('üåä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ sentence:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
                }
            }
        }
    } else if (mode === 'auto' || mode === 'mic') {
        // –î–ª—è —Ä–µ–∂–∏–º–æ–≤ auto –∏ mic –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start/end
        console.log('üìä –†–µ–∂–∏–º', mode, '- –ø–æ–ª—è start/end –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
function updateRadioButtonIcons(selectedMode) {
    const radioButtons = document.querySelectorAll('input[name="audioMode"]');

    radioButtons.forEach(radio => {
        const label = radio.closest('.radio-label');
        if (!label) return;

        const selectedIcon = label.querySelector('.radio-icon-selected');
        const unselectedIcon = label.querySelector('.radio-icon-unselected');

        if (selectedIcon && unselectedIcon) {
            if (radio.checked) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º aperture –∏–∫–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                selectedIcon.style.display = 'inline';
                unselectedIcon.style.display = 'none';
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º circle –∏–∫–æ–Ω–∫—É –¥–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                selectedIcon.style.display = 'none';
                unselectedIcon.style.display = 'inline';
            }
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
 */
function updateCurrentAudioInfo(mode) {
    const currentAudioInfo = document.getElementById('currentAudioInfo');
    if (!currentAudioInfo) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const selectedRow = document.querySelector('#sentences-table tbody tr.selected');
    const selectedSentence = selectedRow ? workingData.original.sentences.find(s => s.key === selectedRow.dataset.key) : null;

    if (mode === 'auto') {
        if (selectedSentence) {
            currentAudioInfo.textContent = `–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: ${selectedSentence.text}`;
        } else {
            currentAudioInfo.textContent = '–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞';
        }
    } else if (mode === 'full') {
        const selectedFileName = document.getElementById('selectedFileName');
        if (selectedFileName && selectedFileName.textContent !== '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª') {
            if (selectedSentence) {
                currentAudioInfo.textContent = `–§–∞–π–ª: ${selectedFileName.textContent} | –í—ã–±—Ä–∞–Ω–æ: ${selectedSentence.text}`;
            } else {
                currentAudioInfo.textContent = `–§–∞–π–ª: ${selectedFileName.textContent}`;
            }
        } else {
            currentAudioInfo.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã';
        }
    } else if (mode === 'sentence') {
        // –í —Ä–µ–∂–∏–º–µ sentence –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (selectedSentence) {
            currentAudioInfo.textContent = selectedSentence.text || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else {
            currentAudioInfo.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        }
    } else if (mode === 'mic') {
        if (selectedSentence) {
            currentAudioInfo.textContent = `–ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${selectedSentence.text}`;
        } else {
            currentAudioInfo.textContent = '–ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞';
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –≤–æ–ª–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
 */
function updateWaveformColors(mode) {
    if (!window.waveformCanvas) return;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –≤–æ–ª–Ω—ã
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –≤ WaveformCanvas
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤–æ–ª–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞:', mode);

    // –ï—Å–ª–∏ —É WaveformCanvas –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤:
    // waveformCanvas.updateColors(mode === 'full' ? '#8b5cf6' : '#d4a574');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ
 */
function updateTableColumnsVisibility(audioMode) {
    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞:', audioMode);

    const table = document.getElementById('sentences-table');
    if (!table) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const isEditingPanelOpen = table.classList.contains('state-original-editing');

    if (!isEditingPanelOpen) {
        console.log('üìã –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞ - –∫–æ–ª–æ–Ω–∫–∏ —Å–∫—Ä—ã—Ç—ã');
        return;
    }

    console.log('üìã –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const allEditingColumns = table.querySelectorAll('.panel-editing-avto, .panel-editing-user, .panel-editing-mic');
    allEditingColumns.forEach(col => {
        col.style.display = 'none';
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    switch (audioMode) {
        case 'auto':
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            const avtoColumns = table.querySelectorAll('.panel-editing-avto');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ panel-editing-avto:', avtoColumns.length);
            avtoColumns.forEach(col => {
                col.style.display = 'table-cell';
                console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:', col.className);
            });
            break;

        case 'full':
        case 'sentence':
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const userColumns = table.querySelectorAll('.panel-editing-user');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ panel-editing-user:', userColumns.length);
            userColumns.forEach(col => {
                col.style.display = 'table-cell';
                console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:', col.className);
            });
            break;

        case 'mic':
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            const micColumns = table.querySelectorAll('.panel-editing-mic');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ panel-editing-mic:', micColumns.length);
            micColumns.forEach(col => {
                col.style.display = 'table-cell';
                console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:', col.className);
            });
            break;
    }

    console.log('‚úÖ –í–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞:', audioMode);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function handleSelectFile() {
    console.log('üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
    const fileInput = document.getElementById('audioFileInput');
    if (fileInput) {
        fileInput.click();
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
 */
function handleReRecord() {
    console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function setupFileInputHandler() {
    const fileInput = document.getElementById('audioFileInput');
    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelected);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª–µ–π –ø–æ–¥ –≤–æ–ª–Ω–æ–π
 */
function setupWaveformFieldsHandlers() {
    const startTimeInput = document.getElementById('audioStartTime');
    const endTimeInput = document.getElementById('audioEndTime');

    if (startTimeInput) {
        startTimeInput.addEventListener('input', () => {
            handleFieldChange('waveform', 'start', startTimeInput.value);
        });
    }

    if (endTimeInput) {
        endTimeInput.addEventListener('input', () => {
            handleFieldChange('waveform', 'end', endTimeInput.value);
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function handleFileSelected(event) {
    const file = event.target.files[0];
    if (file) {
        console.log('üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const selectedFileName = document.getElementById('selectedFileName');
        if (selectedFileName) {
            selectedFileName.textContent = file.name;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
        updateCurrentAudioInfo('full');

        uploadAudioFile(file);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
 */
function uploadAudioFile(file) {
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingOverlay('–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('access_token');
    console.log('üîë JWT —Ç–æ–∫–µ–Ω:', token ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    if (token) {
        console.log('üîë JWT —Ç–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', token.substring(0, 20) + '...');
        console.log('üîë JWT —Ç–æ–∫–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', '...' + token.substring(token.length - 20));
        console.log('üîë JWT —Ç–æ–∫–µ–Ω (–ø–æ–ª–Ω–∞—è –¥–ª–∏–Ω–∞):', token.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JWT —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)
        const parts = token.split('.');
        console.log('üîë JWT —Ç–æ–∫–µ–Ω —á–∞—Å—Ç–∏:', parts.length, '—á–∞—Å—Ç–µ–π');
        if (parts.length !== 3) {
            console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã! –û–∂–∏–¥–∞–µ—Ç—Å—è 3 —á–∞—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–æ:', parts.length);
        } else {
            console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
        }
    } else {
        console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage!');
    }

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('audioFile', file);
    formData.append('language', currentDictation.language_original);
    formData.append('dictation_id', currentDictation.id);

    console.log('üìã FormData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
    for (let [key, value] of formData.entries()) {
        console.log(`  ${key}:`, value);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('/upload-audio', {
        method: 'POST',
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // headers: {
        //     'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        // },
        body: formData
    })
        .then(response => {
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
            console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', response.headers);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            return response.text().then(text => {
                console.log('üì° –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', text);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}\n–û—Ç–≤–µ—Ç: ${text}`);
                }
                return text;
            });
        })
        .then(text => {
            console.log('üì° –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', text);
            try {
                return JSON.parse(text); // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
                console.error('‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', text);
                throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç');
            }
        })
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', data.filename);
                // –§–∞–π–ª —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞
                console.log('üìÅ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:', data.filepath);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ sentencesOriginal –ø–æ–¥ –∏–º–µ–Ω–µ–º "audio_shared"
                if (!sentences_original.find(s => s.key === 'audio_shared')) {
                    sentences_original.push({
                        key: 'audio_shared',
                        speaker: '',
                        text: '',
                        audio: data.filename,
                        shared_audio: data.filename,
                        start: 0,
                        end: 0,
                        chain: ''
                    });
                    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ sentencesOriginal –ø–æ–¥ –∫–ª—é—á–æ–º "audio_shared"');
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sentences_original —Å –ø–æ–ª–µ–º audio_user_shared
                if (sentences_original.length > 0) {
                    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    let metadataElement = sentences_original.find(s => s.key === 'metadata');
                    if (!metadataElement) {
                        // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
                        sentences_original.unshift({
                            key: 'metadata',
                            audio_user_shared: data.filename
                        });
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                        metadataElement.audio_user_shared = data.filename;
                    }
                    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è sentences_original —Å audio_user_shared:', data.filename);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º workingData.original
                if (workingData && workingData.original) {
                    workingData.original.audio_user_shared = data.filename;
                    workingData.original.audio_user_shared_start = 0;
                    workingData.original.audio_user_shared_end = 0;
                    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω workingData.original —Å audio_user_shared:', data.filename);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º workingData.translation
                if (workingData && workingData.translation) {
                    workingData.translation.audio_user_shared = data.filename;
                    workingData.translation.audio_user_shared_start = 0;
                    workingData.translation.audio_user_shared_end = 0;
                    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω workingData.translation —Å audio_user_shared:', data.filename);
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π sentences.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                saveSentencesJsonToServer();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if (data.filename && data.filepath) {
                    try {
                        const audio = new Audio(data.filepath);
                        audioPlayers[data.filename] = audio;
                        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–µ–µ—Ä –¥–ª—è audio_user_shared:', data.filename);
                    } catch (error) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–µ—Ä –¥–ª—è audio_user_shared:', error);
                    }
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–Ω—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
                if (data.filepath) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    const audioUrl = data.filepath;
                    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–Ω—É —Å URL:', audioUrl);
                    initWaveform(audioUrl);
                }
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', data.error);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + data.error);
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        });
}




/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ
 */
function setupInputHandlers(row) {
    // –ü–æ–ª–µ Start
    const startInput = row.querySelector('.start-input');
    if (startInput) {
        startInput.addEventListener('change', () => {
            onStartTimeChanged(row);
        });

        startInput.addEventListener('input', () => {
            onStartTimeInput(row);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É
            const key = row.dataset.key;
            if (key) {
                updateChain(key, 'start', startInput.value);
            }
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–ª—è–º–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
            handleFieldChange('table', 'start', startInput.value, row);
        });

        startInput.addEventListener('blur', () => {
            onStartTimeBlur(row);
        });
    }

    // –ü–æ–ª–µ End
    const endInput = row.querySelector('.end-input');
    if (endInput) {
        endInput.addEventListener('change', () => {
            onEndTimeChanged(row);
        });

        endInput.addEventListener('input', () => {
            onEndTimeInput(row);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É
            const key = row.dataset.key;
            if (key) {
                updateChain(key, 'end', endInput.value);
            }
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–ª—è–º–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
            handleFieldChange('table', 'end', endInput.value, row);
        });

        endInput.addEventListener('blur', () => {
            onEndTimeBlur(row);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ü–µ–ø–æ—á–∫–∏
    const chainCell = row.querySelector('.col-chain');
    if (chainCell) {
        chainCell.addEventListener('click', () => {
            toggleChain(row);
        });
        chainCell.style.cursor = 'pointer';
    }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π start/end
 */
function handleFieldChange(source, field, value, row = null) {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è:', source, field, value);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ "sentence"
    const audioMode = document.querySelector('input[name="audioMode"]:checked');
    const currentMode = audioMode ? audioMode.value : 'full';

    if (currentMode !== 'sentence') {
        console.log('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ "sentence"');
        return;
    }

    let targetRow = row;
    let key = null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if (source === 'table' && row) {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        targetRow = row;
        key = row.dataset.key;
    } else if (source === 'waveform') {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥ –≤–æ–ª–Ω–æ–π - –Ω–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        targetRow = document.querySelector('#sentences-table tbody tr.selected');
        if (targetRow) {
            key = targetRow.dataset.key;
        }
    }

    if (!targetRow || !key) {
        console.log('‚ùå –ù–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (–µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ - –≤–æ–ª–Ω–∞)
    if (source === 'waveform') {
        if (field === 'start') {
            const startInput = targetRow.querySelector('.start-input');
            if (startInput) {
                startInput.value = value;
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ start –≤ —Ç–∞–±–ª–∏—Ü–µ:', value);
            }
        } else if (field === 'end') {
            const endInput = targetRow.querySelector('.end-input');
            if (endInput) {
                endInput.value = value;
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ end –≤ —Ç–∞–±–ª–∏—Ü–µ:', value);
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–¥ –≤–æ–ª–Ω–æ–π (–µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ - —Ç–∞–±–ª–∏—Ü–∞)
    if (source === 'table') {
        const startTimeInput = document.getElementById('audioStartTime');
        const endTimeInput = document.getElementById('audioEndTime');

        if (field === 'start' && startTimeInput) {
            startTimeInput.value = value;
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ start –ø–æ–¥ –≤–æ–ª–Ω–æ–π:', value);
        } else if (field === 'end' && endTimeInput) {
            endTimeInput.value = value;
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ end –ø–æ–¥ –≤–æ–ª–Ω–æ–π:', value);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ workingData
    const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === key);
    if (sentenceIndex !== -1) {
        workingData.original.sentences[sentenceIndex][field] = parseFloat(value) || 0;
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ workingData:', key, field, value);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Ü–µ–ø–æ—á–∫–∏ (chain) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
    updateChain(key, field, value);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –≤ –≤–æ–ª–Ω–µ
    const waveformCanvas = window.waveformCanvas;
    if (waveformCanvas) {
        const startTimeInput = document.getElementById('audioStartTime');
        const endTimeInput = document.getElementById('audioEndTime');

        if (startTimeInput && endTimeInput) {
            const start = parseFloat(startTimeInput.value) || 0;
            const end = parseFloat(endTimeInput.value) || 0;
            waveformCanvas.setRegion(start, end);
            console.log('üåä –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –≤ –≤–æ–ª–Ω–µ:', start.toFixed(2), '-', end.toFixed(2));
        }
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –ø–æ–¥ –≤–æ–ª–Ω–æ–π —Å –ø–æ–ª—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleFieldChange('waveform', field, value)
 */
function syncWaveformFieldsToTable(field, value) {
    handleFieldChange('waveform', field, value);
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –ø–æ–ª—è–º–∏ –ø–æ–¥ –≤–æ–ª–Ω–æ–π
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleFieldChange('table', field, value, row)
 */
function syncWithWaveformFields(row, field, value) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
    if (!row.classList.contains('selected')) {
        return;
    }

    handleFieldChange('table', field, value, row);
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
 */
function toggleChain(row) {
    const key = row.dataset.key;
    if (!key) return;

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ workingData
    const sentence = workingData.original.sentences.find(s => s.key === key);
    if (!sentence) return;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏
    sentence.chain = !sentence.chain;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ —è—á–µ–π–∫–µ
    const chainCell = row.querySelector('.col-chain');
    if (chainCell) {
        const icon = sentence.chain ? 'link' : 'unlink';
        chainCell.innerHTML = `<i data-lucide="${icon}"></i>`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    console.log(`üîó –¶–µ–ø–æ—á–∫–∞ –¥–ª—è ${key}: ${sentence.chain ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function setupRowHandlers(row) {
    // –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
    row.addEventListener('click', () => {
        selectSentenceRow(row);
    });

    // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    row.addEventListener('dblclick', () => {
        onRowDoubleClick(row);
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
 */
function onStartTimeChanged(row) {
    const startTime = parseFloat(row.querySelector('.start-input').value) || 0;
    const endTime = parseFloat(row.querySelector('.end-input').value) || 0;

    console.log('‚è∞ –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', startTime);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: start –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ end
    if (startTime >= endTime && endTime > 0) {
        row.querySelector('.end-input').value = (startTime + 1).toFixed(2);
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è');
    }

    updateAudioFileTimes(row);
    validateTimeInputs(row);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
 */
function onEndTimeChanged(row) {
    const startTime = parseFloat(row.querySelector('.start-input').value) || 0;
    const endTime = parseFloat(row.querySelector('.end-input').value) || 0;

    console.log('‚è∞ –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:', endTime);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: end –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ start
    if (endTime <= startTime) {
        row.querySelector('.end-input').value = (startTime + 1).toFixed(2);
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è');
    }

    updateAudioFileTimes(row);
    validateTimeInputs(row);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
 */
function onStartTimeInput(row) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
 */
function onEndTimeInput(row) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
 */
function onStartTimeBlur(row) {
    const input = row.querySelector('.start-input');
    const value = parseFloat(input.value) || 0;
    input.value = value.toFixed(2); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
 */
function onEndTimeBlur(row) {
    const input = row.querySelector('.end-input');
    const value = parseFloat(input.value) || 0;
    input.value = value.toFixed(2); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ
 */
function onRowDoubleClick(row) {
    console.log('üñ±Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ:', row.dataset.filename);

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    // - –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
    // - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
 */
function validateTimeInputs(row) {
    const startInput = row.querySelector('.start-input');
    const endInput = row.querySelector('.end-input');
    const startTime = parseFloat(startInput.value) || 0;
    const endTime = parseFloat(endInput.value) || 0;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    startInput.classList.remove('invalid');
    endInput.classList.remove('invalid');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (startTime < 0) {
        startInput.classList.add('invalid');
    }

    if (endTime <= startTime) {
        endInput.classList.add('invalid');
    }
}

/**
 * –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã
 */
function selectAudioFile(row) {
    const filename = row.dataset.filename;
    const filepath = row.dataset.filepath;

    console.log('üéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:', filename);

    // –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    document.querySelectorAll('#audioFilesTable tbody tr').forEach(r => {
        r.classList.remove('selected');
    });
    row.classList.add('selected');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ª–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    loadWaveformForFile(filepath);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
    updateCurrentAudioInfoForFile(filename);
}

/**
 * –†–∞–∑—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
function splitAudioIntoSeentences(row) {
    const filename = row.dataset.filename;
    const filepath = row.dataset.filepath;
    const startTime = parseFloat(row.querySelector('.start-input').value) || 0;
    const endTime = parseFloat(row.querySelector('.end-input').value) || 0;

    console.log('‚úÇÔ∏è –†–∞–∑—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', filename, startTime, '-', endTime);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingOverlay('–†–∞–∑—Ä–µ–∑–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('/split-audio', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
            // ,
            // 'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify({
            filename: filename,
            filepath: filepath,
            startTime: startTime,
            endTime: endTime,
            language: currentDictation.language_original
        })
    })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                console.log('‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', data.error);
                alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + data.error);
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
            alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ');
        });
}

/**
 * –û–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
 */
function cutAudioFile(row) {
    const filename = row.dataset.filename;
    const filepath = row.dataset.filepath;
    const startTime = parseFloat(row.querySelector('.start-input').value) || 0;
    const endTime = parseFloat(row.querySelector('.end-input').value) || 0;

    console.log('‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª:', filename, startTime, '-', endTime);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingOverlay('–û–±—Ä–µ–∑–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('/cut-audio', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify({
            filename: filename,
            filepath: filepath,
            startTime: startTime,
            endTime: endTime,
            language: currentDictation.language_original
        })
    })
        .then(response => response.json())
        .then(data => {
            hideLoadingOverlay();
            if (data.success) {
                console.log('‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω');
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
                row.querySelector('.filename-text').textContent = data.newFilename;
                row.dataset.filename = data.newFilename;
                row.dataset.filepath = data.newFilepath;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', data.error);
                alert('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + data.error);
            }
        })
        .catch(error => {
            hideLoadingOverlay();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
            alert('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ');
        });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ start/end
 */
function updateChain(rowKey, field, value) {
    const row = document.querySelector(`tr[data-key="${rowKey}"]`);
    if (!row) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —á–µ—Ä–µ–∑ workingData
    const sentence = workingData.original.sentences.find(s => s.key === rowKey);
    if (!sentence || !sentence.chain) return;

    // –ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏
    const allRows = Array.from(document.querySelectorAll('#sentences-table tbody tr'));
    const currentIndex = allRows.indexOf(row);

    if (field === 'end' && currentIndex < allRows.length - 1) {
        // –ò–∑–º–µ–Ω—è–µ–º end —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º start —Å–ª–µ–¥—É—é—â–µ–π
        const nextRow = allRows[currentIndex + 1];
        const nextRowKey = nextRow.dataset.key;
        const nextSentence = workingData.original.sentences.find(s => s.key === nextRowKey);

        if (nextSentence && nextSentence.chain) {
            const nextStartInput = nextRow.querySelector('.start-input');
            if (nextStartInput) {
                nextStartInput.value = value;

                // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ workingData
                const nextRowKey = nextRow.dataset.key;
                updateSentenceData(nextRowKey, 'original', 'start', parseFloat(value));
            }
        }
    } else if (field === 'start' && currentIndex > 0) {
        // –ò–∑–º–µ–Ω—è–µ–º start —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º end –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        const prevRow = allRows[currentIndex - 1];
        const prevRowKey = prevRow.dataset.key;
        const prevSentence = workingData.original.sentences.find(s => s.key === prevRowKey);

        if (prevSentence && prevSentence.chain) {
            const prevEndInput = prevRow.querySelector('.end-input');
            if (prevEndInput) {
                prevEndInput.value = value;

                // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ workingData
                const prevRowKey = prevRow.dataset.key;
                updateSentenceData(prevRowKey, 'original', 'end', parseFloat(value));
            }
        }
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ workingData
 */
function updateSentenceData(rowKey, language, field, value) {
    if (language === 'original') {
        const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            workingData.original.sentences[sentenceIndex][field] = value;
        }
    } else if (language === 'translation') {
        const sentenceIndex = workingData.translation.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            workingData.translation.sentences[sentenceIndex][field] = value;
        }
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 */
function updateAudioFileTimes(row) {
    const startTime = parseFloat(row.querySelector('.start-input').value) || 0;
    const endTime = parseFloat(row.querySelector('.end-input').value) || 0;

    console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∞ —Ñ–∞–π–ª–∞:', startTime, '-', endTime);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ª–Ω—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ª–Ω—É –¥–ª—è —Ñ–∞–π–ª–∞
 */
async function loadWaveformForFile(filepath) {
    console.log('üåä –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ª–Ω—É –¥–ª—è —Ñ–∞–π–ª–∞:', filepath);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ª–Ω—ã
        const waveformContainer = document.getElementById('audioWaveform');
        if (!waveformContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ª–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WaveformCanvas –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let waveformCanvas = window.waveformCanvas;
        if (!waveformCanvas) {
            console.log('üåä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π WaveformCanvas');
            waveformCanvas = new WaveformCanvas(waveformContainer);
            window.waveformCanvas = waveformCanvas;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
        await waveformCanvas.loadAudio(filepath);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const duration = waveformCanvas.getDuration();
        waveformCanvas.setRegion(0, duration);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        const startTimeInput = document.getElementById('audioStartTime');
        const endTimeInput = document.getElementById('audioEndTime');
        if (startTimeInput) startTimeInput.value = '0.00';
        if (endTimeInput) endTimeInput.value = duration.toFixed(2);

        console.log('‚úÖ –í–æ–ª–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞:', filepath);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ª–Ω—ã:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ–∞–π–ª–∞
 */
function updateCurrentAudioInfoForFile(filename) {
    const currentAudioInfo = document.getElementById('currentAudioInfo');
    if (currentAudioInfo) {
        currentAudioInfo.textContent = `–§–∞–π–ª: ${filename}`;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
 */
function handleRecordAudio() {
    console.log('üé§ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –Ω–æ–∂–Ω–∏—Ü–∞–º–∏
 */
function getCurrentAudioFileForScissors() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª"
    const audioMode = document.querySelector('input[name="audioMode"]:checked');
    if (!audioMode || audioMode.value !== 'full') {
        console.log('‚ùå –†–µ–∂–∏–º "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
        return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const selectedFileName = document.getElementById('selectedFileName');
    if (!selectedFileName || selectedFileName.textContent === '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª') {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
        return null;
    }

    const filename = selectedFileName.textContent;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const serverFilePath = `/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/${filename}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ input —ç–ª–µ–º–µ–Ω—Ç–µ (–¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫)
    const fileInput = document.getElementById('audioFileInput');
    let file = null;
    
    if (fileInput && fileInput.files && fileInput.files[0]) {
        file = fileInput.files[0];
        console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ input —ç–ª–µ–º–µ–Ω—Ç–µ:', filename);
    } else {
        // –§–∞–π–ª –Ω–µ –≤ input, –Ω–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤)
        console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –≤ input —ç–ª–µ–º–µ–Ω—Ç–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', filename);
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–µ–∑–∫–∏:', filename, serverFilePath);

    return {
        filename: filename,
        filepath: serverFilePath,
        file: file // –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    };
}

/**
 * –†–∞–∑—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
async function splitAudioIntoSentences() {
    console.log('‚úÇÔ∏è –†–∞–∑—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    const currentAudioFile = getCurrentAudioFileForScissors();
    if (!currentAudioFile) {
        alert('–ù–µ –≤—ã–±—Ä–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (!workingData || !workingData.original || !workingData.original.sentences) {
        alert('–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è');
        return;
    }

    const sentences = workingData.original.sentences.filter(s => s.key !== 'metadata');
    if (sentences.length === 0) {
        alert('–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
    const waveformCanvas = window.waveformCanvas;
    if (!waveformCanvas) {
        alert('–í–æ–ª–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }

    const totalDuration = waveformCanvas.getDuration();
    const segmentDuration = totalDuration / sentences.length;

    console.log(`üìä –†–∞–∑—Ä–µ–∑–∞–µ–º ${totalDuration.toFixed(2)}—Å –Ω–∞ ${sentences.length} —á–∞—Å—Ç–µ–π –ø–æ ${segmentDuration.toFixed(2)}—Å`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingOverlay('–†–∞–∑—Ä–µ–∑–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        for (let i = 0; i < sentences.length; i++) {
            const sentence = sentences[i];
            const startTime = Math.round(i * segmentDuration * 100) / 100;
            const endTime = Math.round((i + 1) * segmentDuration * 100) / 100;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ workingData
            const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === sentence.key);
            if (sentenceIndex !== -1) {
                workingData.original.sentences[sentenceIndex].start = startTime;
                workingData.original.sentences[sentenceIndex].end = endTime;
                workingData.original.sentences[sentenceIndex].chain = true; // –í–∫–ª—é—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                workingData.original.sentences[sentenceIndex].audio_user = `${sentence.key}_${currentDictation.language_original}_user.mp3`;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ translation, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (workingData.translation && workingData.translation.sentences) {
                const translationIndex = workingData.translation.sentences.findIndex(s => s.key === sentence.key);
                if (translationIndex !== -1) {
                    workingData.translation.sentences[translationIndex].start = startTime;
                    workingData.translation.sentences[translationIndex].end = endTime;
                    workingData.translation.sentences[translationIndex].chain = true;
                    workingData.translation.sentences[translationIndex].audio_user = `${sentence.key}_${currentDictation.language_translation}_user.mp3`;
                }
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ
        const response = await fetch('/split-audio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                filename: currentAudioFile.filename,
                filepath: currentAudioFile.filepath,
                sentences: sentences.map(s => ({
                    key: s.key,
                    start_time: workingData.original.sentences.find(ws => ws.key === s.key)?.start || 0,
                    end_time: workingData.original.sentences.find(ws => ws.key === s.key)?.end || 0,
                    language: currentDictation.language_original
                })),
                dictation_id: currentDictation.id
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const data = await response.json();

        if (data.success) {
            console.log('‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            updateTableWithNewAudio();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π sentences.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            saveSentencesJsonToServer();

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            switchToSentenceMode();

            alert(`–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–æ –Ω–∞ ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!`);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', data.error);
            alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
        alert('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + error.message);
    } finally {
        hideLoadingOverlay();
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
 */
function switchToSentenceMode() {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫—É
    const sentenceRadio = document.querySelector('input[name="audioMode"][value="sentence"]');
    if (sentenceRadio) {
        sentenceRadio.checked = true;
        sentenceRadio.dispatchEvent(new Event('change'));
        console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–∞ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    updateRadioButtonIcons('sentence');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
    updateCurrentAudioInfo('sentence');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    loadAudioForCurrentSentence();
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
function loadAudioForCurrentSentence() {
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
    const firstRow = document.querySelector('#sentences-table tbody tr');
    if (!firstRow) {
        console.log('‚ùå –ù–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ');
        return;
    }

    const key = firstRow.dataset.key;
    if (!key) {
        console.log('‚ùå –ù–µ—Ç –∫–ª—é—á–∞ –≤ —Å—Ç—Ä–æ–∫–µ');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const sentence = workingData.original.sentences.find(s => s.key === key);
    if (!sentence) {
        console.log('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', key);
        return;
    }

    // –í —Ä–µ–∂–∏–º–µ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≤–æ–ª–Ω—É
    // –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    console.log('üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', key, sentence.start.toFixed(2), '-', sentence.end.toFixed(2));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const waveformCanvas = window.waveformCanvas;
    if (waveformCanvas) {
        waveformCanvas.setRegion(sentence.start, sentence.end);
        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
    } else {
        console.log('‚ùå –í–æ–ª–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start/end –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const startTimeInput = document.getElementById('audioStartTime');
    const endTimeInput = document.getElementById('audioEndTime');

    if (startTimeInput && endTimeInput) {
        startTimeInput.value = sentence.start.toFixed(2);
        endTimeInput.value = sentence.end.toFixed(2);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è start/end:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
    selectSentenceRow(firstRow);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
 */
function initializeAudioForExistingDictation() {
    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
    if (!workingData || !workingData.original || !workingData.original.audio_user_shared) {
        console.log('‚ùå –ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        return;
    }

    const audioFile = workingData.original.audio_user_shared;
    const startTime = workingData.original.audio_user_shared_start || 0;
    const endTime = workingData.original.audio_user_shared_end || 0;

    console.log('üìÅ –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª:', audioFile, '–≤—Ä–µ–º—è:', startTime, '-', endTime);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const selectedFileName = document.getElementById('selectedFileName');
    if (selectedFileName) {
        selectedFileName.textContent = audioFile;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', audioFile);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ª–Ω—É
    const audioPath = `/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/${audioFile}`;
    loadWaveformForFile(audioPath);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    if (endTime > 0) {
        setTimeout(() => {
            const waveformCanvas = window.waveformCanvas;
            if (waveformCanvas) {
                waveformCanvas.setRegion(startTime, endTime);
                console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω:', startTime, '-', endTime);
            }
        }, 500);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start/end
    const startTimeInput = document.getElementById('audioStartTime');
    const endTimeInput = document.getElementById('audioEndTime');

    if (startTimeInput && endTimeInput) {
        startTimeInput.value = startTime.toFixed(2);
        endTimeInput.value = endTime.toFixed(2);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è start/end:', startTime.toFixed(2), '-', endTime.toFixed(2));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
    updateCurrentAudioInfo('full');

    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
 */
function updateTableWithNewAudio() {
    console.log('üîÑ updateTableWithNewAudio –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üìä workingData.original.sentences:', workingData.original.sentences);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const rows = document.querySelectorAll('#sentences-table tbody tr');
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${rows.length}`);

    rows.forEach(row => {
        const key = row.dataset.key;
        if (!key) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start –∏ end
        const startInput = row.querySelector('.start-input');
        const endInput = row.querySelector('.end-input');
        const chainCell = row.querySelector('.col-chain');

        if (startInput && endInput && chainCell) {
            const sentence = workingData.original.sentences.find(s => s.key === key);
            console.log(`üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ${key}:`, sentence);
            if (sentence) {
                console.log(`üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è: start=${sentence.start}, end=${sentence.end}, chain=${sentence.chain}`);
                startInput.value = sentence.start.toFixed(2);
                endInput.value = sentence.end.toFixed(2);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ü–µ–ø–æ—á–∫–∏
                if (sentence.chain) {
                    chainCell.innerHTML = '<i data-lucide="link"></i>';
                } else {
                    chainCell.innerHTML = '<i data-lucide="unlink"></i>';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
                
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: startInput.value=${startInput.value}, endInput.value=${endInput.value}, chain=${sentence.chain}`);
            } else {
                console.log(`‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
            }
        } else {
            console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${key}:`, {startInput, endInput, chainCell});
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä –¥–ª—è –∞—É–¥–∏–æ
        const audioFileName = `${key}_${currentDictation.language_original}_user.mp3`;
        const audioPath = `/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/${audioFileName}`;

        try {
            const audio = new Audio(audioPath);
            audioPlayers[audioFileName] = audio;
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–µ–µ—Ä –¥–ª—è:', audioFileName);
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–µ—Ä –¥–ª—è:', audioFileName, error);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        row.addEventListener('click', () => {
            selectSentenceRow(row);
        });
    });
}

/**
 * –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤)
 */
function selectSentenceRow(row) {
    const key = row.dataset.key;
    if (!key) return;

    console.log('üéØ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', key);

    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫
    document.querySelectorAll('#sentences-table tbody tr').forEach(r => {
        r.classList.remove('selected');
    });

    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
    row.classList.add('selected');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const sentence = workingData.original.sentences.find(s => s.key === key);
    if (!sentence) {
        console.log('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', key);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ
    const audioMode = document.querySelector('input[name="audioMode"]:checked');
    const currentMode = audioMode ? audioMode.value : 'full';

    console.log('üéµ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:', currentMode);

    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch (currentMode) {
        case 'sentence':
            // –í —Ä–µ–∂–∏–º–µ "–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∏ –ø–æ–ª—è
            updateWaveformForSentence(sentence);
            updateCurrentSentenceInfo(sentence);
            break;
        case 'full':
            // –í —Ä–µ–∂–∏–º–µ "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª" —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updateCurrentSentenceInfo(sentence);
            break;
        case 'auto':
            // –í —Ä–µ–∂–∏–º–µ "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updateCurrentSentenceInfo(sentence);
            break;
        case 'mic':
            // –í —Ä–µ–∂–∏–º–µ "–ú–∏–∫—Ä–æ—Ñ–æ–Ω" —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updateCurrentSentenceInfo(sentence);
            break;
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ª–Ω—É –∏ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ sentence)
 */
function updateWaveformForSentence(sentence) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –≤ –≤–æ–ª–Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const waveformCanvas = window.waveformCanvas;
    if (waveformCanvas) {
        waveformCanvas.setRegion(sentence.start, sentence.end);
        console.log('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start/end
    const startTimeInput = document.getElementById('audioStartTime');
    const endTimeInput = document.getElementById('audioEndTime');

    if (startTimeInput && endTimeInput) {
        startTimeInput.value = sentence.start.toFixed(2);
        endTimeInput.value = sentence.end.toFixed(2);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è start/end:', sentence.start.toFixed(2), '-', sentence.end.toFixed(2));
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
 */
function updateCurrentSentenceInfo(sentence) {
    const currentAudioInfo = document.getElementById('currentAudioInfo');
    if (currentAudioInfo) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        currentAudioInfo.textContent = sentence.text || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:', sentence.text);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä (Promise –≤–µ—Ä—Å–∏—è)
 */
function uploadAudioFileToServer(file) {
    return new Promise((resolve, reject) => {
        console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', file.name);

        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        const formData = new FormData();
        formData.append('audioFile', file);
        formData.append('language', currentDictation.language_original);
        formData.append('dictation_id', currentDictation.id);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/upload-audio', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', data.filename);
                    resolve({
                        success: true,
                        filename: data.filename,
                        filepath: data.filepath
                    });
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', data.error);
                    reject(new Error(data.error));
                }
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
                reject(error);
            });
    });
}

/**
 * –û–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–æ–∂–Ω–∏—Ü–∞–º–∏
 */
async function trimAudioFile(audioFile, startTime, endTime) {
    console.log('‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª:', audioFile.filename, '—Å', startTime, '–ø–æ', endTime);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingOverlay('–û–±—Ä–µ–∑–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...');

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        console.log('üì§ –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', audioFile.filepath);

        // –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const response = await fetch('/cut-audio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
                // ,
                // 'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            },
            body: JSON.stringify({
                filename: audioFile.filename,
                filepath: audioFile.filepath,
                start_time: startTime,
                end_time: endTime,
                language: currentDictation.language_original,
                dictation_id: currentDictation.id  // –¥–æ–±–∞–≤–ª—è–µ–º ID –¥–∏–∫—Ç–∞–Ω—Ç–∞
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const data = await response.json();

        if (data.success) {
            console.log('‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω:', data.filename);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ workingData
            if (workingData && workingData.original) {
                workingData.original.audio_user_shared = data.filename;
                workingData.original.audio_user_shared_start = 0; // –ü–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
                workingData.original.audio_user_shared_end = data.end_time - data.start_time; // –ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            }
            if (workingData && workingData.translation) {
                workingData.translation.audio_user_shared = data.filename;
                workingData.translation.audio_user_shared_start = 0;
                workingData.translation.audio_user_shared_end = data.end_time - data.start_time;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            const startTimeInput = document.getElementById('audioStartTime');
            const endTimeInput = document.getElementById('audioEndTime');
            if (startTimeInput) startTimeInput.value = '0.00';
            if (endTimeInput) endTimeInput.value = (data.end_time - data.start_time).toFixed(2);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ª–Ω—É —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            if (data.filepath) {
                loadWaveformForFile(data.filepath);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
            updateCurrentAudioInfoForFile(data.filename);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π sentences.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            saveSentencesJsonToServer();

            alert('–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω!');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', data.error);
            alert('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + error.message);
    } finally {
        hideLoadingOverlay();
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
 */
function handleAudioPlay() {
    console.log('‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start
 */
function handleAudioStart() {
    console.log('‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞');

    const waveformCanvas = window.waveformCanvas;
    if (!waveformCanvas) {
        console.log('‚ùå –í–æ–ª–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é playhead
    const currentTime = waveformCanvas.getCurrentTime();

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ Start
    const startTimeInput = document.getElementById('audioStartTime');
    if (startTimeInput) {
        startTimeInput.value = currentTime.toFixed(2);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –≤–æ–ª–Ω—ã
    const currentRegion = waveformCanvas.getRegion();
    waveformCanvas.setRegion(currentTime, currentRegion.end);

    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', currentTime.toFixed(2));
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ End
 */
function handleAudioEnd() {
    console.log('‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è');

    const waveformCanvas = window.waveformCanvas;
    if (!waveformCanvas) {
        console.log('‚ùå –í–æ–ª–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é playhead
    const currentTime = waveformCanvas.getCurrentTime();

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ End
    const endTimeInput = document.getElementById('audioEndTime');
    if (endTimeInput) {
        endTimeInput.value = currentTime.toFixed(2);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –≤–æ–ª–Ω—ã
    const currentRegion = waveformCanvas.getRegion();
    waveformCanvas.setRegion(currentRegion.start, currentTime);

    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:', currentTime.toFixed(2));
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¢–ê–†–¢–û–í–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
// ============================================================================

function setupStartModalHandlers() {
    // –ß–µ–∫–±–æ–∫—Å –¥–∏–∞–ª–æ–≥–∞
    const isDialogCheckbox = document.getElementById('isDialogCheckbox');
    if (isDialogCheckbox) {
        isDialogCheckbox.addEventListener('change', (e) => {
            toggleSpeakersTable(e.target.checked);
            updateCheckboxIcon(e.target.checked);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ textarea
    const startTextInput = document.getElementById('startTextInput');
    if (startTextInput) {
        setupTextareaHighlighting(startTextInput);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');
    setupColumnToggleHandlers();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥
    const table = document.getElementById('sentences-table');
    if (table) {
        console.log('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', table.className);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        const originalElements = table.querySelectorAll('.panel-original');
        const translationElements = table.querySelectorAll('.panel-translation');
        const editingElements = table.querySelectorAll('.panel-editing-avto, .panel-editing-user, .panel-editing-mic');

        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:');
        console.log('  - .panel-original:', originalElements.length);
        console.log('  - .panel-translation:', translationElements.length);
        console.log('  - .panel-editing-*:', editingElements.length);

        table.classList.add('state-original-translation');
        console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', table.className);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateToggleButtonIcon('open_left_panel_original', 'translation');
    } else {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ sentences-table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    setupAudioSettingsModalHandlers();

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞
    const addSpeakerBtn = document.getElementById('addSpeakerBtn');
    if (addSpeakerBtn) {
        addSpeakerBtn.addEventListener('click', addSpeaker);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-speaker')) {
            removeSpeaker(e.target);
        }
    });

    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const cancelStartBtn = document.getElementById('cancelStartBtn');
    if (cancelStartBtn) {
        cancelStartBtn.addEventListener('click', cancelDictationCreation);
    }

    const createDictationBtn = document.getElementById('createDictationBtn');
    if (createDictationBtn) {
        createDictationBtn.addEventListener('click', createDictationFromStart);
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ"
    const reenterTextBtn = document.getElementById('reenterTextBtn');
    if (reenterTextBtn) {
        reenterTextBtn.addEventListener('click', () => {
            if (confirm('–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                const tbody = document.querySelector('#sentences-table tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                }

                // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
                const reenterTextSection = document.getElementById('reenterTextSection');
                if (reenterTextSection) {
                    reenterTextSection.style.display = 'none';
                }

                // –û—á–∏—Å—Ç–∏—Ç—å workingData
                workingData.original.sentences = [];
                workingData.translation.sentences = [];

                // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                openStartModal();
            }
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤—ã–π—Ç–∏"
    const saveAndExitBtn = document.getElementById('saveAndExitBtn');
    if (saveAndExitBtn) {
        saveAndExitBtn.addEventListener('click', () => {
            if (confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É?')) {
                saveDictationAndExit();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const startModal = document.getElementById('startModal');
    if (startModal) {
        startModal.addEventListener('click', (e) => {
            if (e.target === startModal) {
                closeStartModal();
            }
        });
    }
}

function openStartModal() {
    console.log('üîç DEBUG: openStartModal() –≤—ã–∑–≤–∞–Ω–∞');
    const modal = document.getElementById('startModal');
    console.log('üîç DEBUG: modal —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!modal);

    if (modal) {
        console.log('üîç DEBUG: modal –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
            display: modal.style.display,
            computedDisplay: window.getComputedStyle(modal).display
        });

        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        console.log('üîç DEBUG: modal –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
            display: modal.style.display,
            computedDisplay: window.getComputedStyle(modal).display
        });
        console.log('‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ');
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç startModal –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
}

function closeStartModal() {
    const modal = document.getElementById('startModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

async function cancelDictationCreation() {
    try {
        console.log('üö´ –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

        // –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ —Ä–∞–±–æ—Ç–µ
        if (currentDictation && currentDictation.id && currentDictation.isNew) {
            console.log('üßπ –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫—É –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', currentDictation.id);

            const response = await fetch('/cleanup_temp_dictation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dictation_id: currentDictation.id,
                    safe_email: currentDictation.safe_email
                })
            });

            if (response.ok) {
                console.log('‚úÖ Temp –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞');
            } else {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å temp –ø–∞–ø–∫—É');
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        // –ü–æ–∑–∏—Ü–∏—è –≤ –¥–µ—Ä–µ–≤–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º sessionStorage
        console.log('üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        window.location.href = '/';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        window.location.href = '/';
    }
}

function toggleSpeakersTable(show) {
    const speakersTable = document.getElementById('speakersTable');
    if (speakersTable) {
        speakersTable.style.display = show ? 'table' : 'none';
    }
}

function updateCheckboxIcon(isChecked) {
    const checkboxIcon = document.querySelector('#isDialogCheckbox + .checkbox-icon');
    if (checkboxIcon) {
        checkboxIcon.setAttribute('data-lucide', isChecked ? 'circle-check-big' : 'circle');
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

function addSpeaker() {
    const tbody = document.querySelector('#speakersTable tbody');
    if (!tbody) return;

    const speakerCount = tbody.children.length + 1;
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${speakerCount}:</td>
        <td><input type="text" value="–°–ø–∏–∫–µ—Ä ${speakerCount}" class="speaker-name-input"></td>
        <td><button type="button" class="remove-speaker" title="–£–¥–∞–ª–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞">
        <i data-lucide="trash-2"></i>
        </button></td>
    `;
    tbody.appendChild(row);
}

function removeSpeaker(button) {
    const row = button.closest('tr');
    if (row && document.querySelector('#speakersTable tbody').children.length > 1) {
        row.remove();
        // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ø–∏–∫–µ—Ä–æ–≤
        const rows = document.querySelectorAll('#speakersTable tbody tr');
        rows.forEach((row, index) => {
            row.cells[0].textContent = index + 1;
        });
    }
}

async function createDictationFromStart() {
    const text = (document.getElementById('startTextInput').innerText || document.getElementById('startTextInput').textContent).trim();
    const delimiter = document.getElementById('translationDelimiter').value.trim();
    const isDialog = document.getElementById('isDialogCheckbox').checked;

    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∫—Ç–∞–Ω—Ç–∞');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

    try {
        const speakers = isDialog ? getSpeakersFromTable() : { '1': '–°–ø–∏–∫–µ—Ä 1' };

        // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
        const parsedData = await parseInputText(text, delimiter, isDialog, speakers);

        // –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentDictation.is_dialog = isDialog;
        currentDictation.speakers = speakers;

        workingData.original = {
            language: currentDictation.language_original,
            title: document.getElementById('title').value || '–î–∏–∫—Ç–∞–Ω—Ç',
            speakers: speakers,
            sentences: parsedData.original
        };

        workingData.translation = {
            language: currentDictation.language_translation,
            title: document.getElementById('title_translation').value || '–ü–µ—Ä–µ–≤–æ–¥',
            speakers: speakers,
            sentences: parsedData.translation
        };

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
        const reenterTextSection = document.getElementById('reenterTextSection');
        if (reenterTextSection) {
            reenterTextSection.style.display = 'block';
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥
        if (isDialog) {
            showSpeakersInHeader(speakers);
        }

        // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        await createTable();

        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const startTextInput = document.getElementById('startTextInput');
        if (startTextInput) {
            startTextInput.innerHTML = '';
        }

        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeStartModal();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + error.message);
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingIndicator();
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –í–´–•–û–î–ê
// ============================================================================

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å sentences.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
async function saveSentencesJsonToServer() {
    try {
        if (!workingData || !workingData.original) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É sentences.json
        const sentencesPath = `static/data/temp/${currentDictation.id}/${currentDictation.language_original}/sentences.json`;

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º sentences.json:', sentencesPath);
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', workingData.original);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/save_json', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            },
            body: JSON.stringify({
                path: sentencesPath,
                data: workingData.original
            })
        });

        const result = await response.json();

        if (result.success) {
            console.log('‚úÖ sentences.json —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sentences.json:', result.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ sentences.json:', error);
    }
}

async function saveDictationAndExit() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveData = {
            id: currentDictation.id,
            language_original: currentDictation.language_original,
            language_translation: currentDictation.language_translation,
            title: document.getElementById('title') ? document.getElementById('title').value : '–î–∏–∫—Ç–∞–Ω—Ç',
            level: currentDictation.level || 'A1',
            is_dialog: currentDictation.is_dialog,
            speakers: currentDictation.speakers,
            sentences: {
                [currentDictation.language_original]: workingData.original,
                [currentDictation.language_translation]: workingData.translation
            }
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!saveData.id) {
            alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –¥–∏–∫—Ç–∞–Ω—Ç–∞');
            hideLoadingIndicator();
            return;
        }

        if (!currentDictation.category_key) {
            alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞');
            hideLoadingIndicator();
            return;
        }


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∫—Ç–∞–Ω—Ç —Å—Ä–∞–∑—É –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const requestData = {
            ...saveData,
            category_key: currentDictation.category_key
        };


        const response = await fetch('/save_dictation_final', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });

        const result = await response.json();


        if (result.success) {
            console.log('–î–∏–∫—Ç–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ sessionStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const currentCategoryData = {
                key: currentDictation.category_key,
                title: currentDictation.category_title,
                path: currentDictation.category_path,
                language_original: currentDictation.language_original,
                language_translation: currentDictation.language_translation
            };
            sessionStorage.setItem('selectedCategoryForDictation', JSON.stringify(currentCategoryData));

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–∑–∏—Ü–∏—è –≤ –¥–µ—Ä–µ–≤–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            window.location.href = '/';
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', result);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            hideLoadingIndicator();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + error.message);
        hideLoadingIndicator();
    }
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ò–ö–¢–ê–ù–¢–ê
// ============================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 */
function getSpeakersFromTable() {
    const speakers = {};
    const speakerInputs = document.querySelectorAll('.speaker-name');
    speakerInputs.forEach((input, index) => {
        const speakerId = (index + 1).toString();
        const speakerName = input.value.trim() || `–°–ø–∏–∫–µ—Ä ${speakerId}`;
        speakers[speakerId] = speakerName;
    });
    return speakers;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 */
function generateAudioFileName(key, language, tipe_audio = 'avto') {
    return `${key}_${language}_${tipe_audio}.mp3`;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
 */
async function autoTranslate(text, fromLanguage, toLanguage) {
    try {
        const response = await fetch('/translate_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                text: text,
                from_language: fromLanguage,
                to_language: toLanguage
            })
        });

        if (response.ok) {
            const result = await response.json();
            return result.translated_text || text;
        } else {
            console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç');
            return text;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
        return text;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
async function generateAudioForSentence(sentence, language) {
    if (!sentence.text.trim()) return null;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let filename = sentence.audio;
    if (!filename) {
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞ –∏ —è–∑—ã–∫–∞
        const key = sentence.key || '000';
        filename = `${key}_${language}_avto.mp3`;
    }

    try {
        const response = await fetch('/generate_audio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                text: sentence.text,
                language: language,
                filename: filename,
                filename_audio: filename,
                tipe_audio: 'avto',
                dictation_id: currentDictation.id,
                safe_email: currentDictation.safe_email
            })
        });

        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${filename}`);
            return result.filename || filename; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        } else {
            const errorText = await response.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è ${filename}: ${response.status} ${errorText}`);
            return null;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, error);
        return null;
    }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
 */
async function parseInputText(text, delimiter, isDialog, speakers) {
    // –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);

    if (lines.length === 0) {
        return { original: [], translation: [] };
    }

    const language_original = currentDictation.language_original;
    const language_translation = currentDictation.language_translation;
    const original = [];
    const translation = [];
    let key_i = 0; // –∏–Ω–¥–µ–∫—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
    let i_next = 0; // –∏–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É —ç /* —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ —Ç–µ—Ä–µ–±–∞ 
    let original_line = "";
    let translation_line = "";
    let translation_mistake = [];
    for (let i = 0; i < lines.length; i++) {
        // !!! –¥–∏–≤–∏–º–æ—Å—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ —ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫

        // –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        original_line = lines[i];
        if (original_line.startsWith(delimiter)) {
            // –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ 
            // –∞–ª–µ –∑–±–µ—Ä–µ–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É –±–µ–∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
            translation_mistake.push({
                id: i,
                text: original_line,
            });
            continue;
        }

        const key = key_i.toString().padStart(3, '0'); // –∫–ª—é—á –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è);
        key_i++; // –Ω–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è
        const audio_originalFileName = generateAudioFileName(key, language_original);
        const audio_translationFileName = generateAudioFileName(key, language_translation);

        const s_original = {
            key: key,
            speaker: '1',
            text: original_line,
            audio: audio_originalFileName, //–∞—É–¥–∏–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –¥–∏–∫—Ç–∞–Ω—Ç–µ! –ò—Ç–æ–≥–æ–≤–æ–µ
            audio_avto: audio_originalFileName, // –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            audio_user: '', // –æ—Ç—Ä–µ–∑–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫
            audio_mic: '', // –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            // audio_user_shared: '', // –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
            start: 0,
            end: 0,
            chain: false
        };
        // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        await generateAudioForSentence(s_original, language_original);
        original.push(s_original);

        // –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ - –ø–µ—Ä–µ–∫–ª–∞–¥
        i_next = i + 1; // —ñ–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É —ç /* —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ —Ç–µ—Ä–µ–±–∞ 
        translation_line = "";
        if (i_next < lines.length) {
            if (lines[i_next].startsWith(delimiter)) {
                // –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –±–µ—Ä–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ
                translation_line = lines[i_next].substring(2).trim(); // —É–¥–∞–ª–∏—Ç—å /*;
                i++;
            }
            else {
                // –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ–º–∞—î, —Ä–æ–±–∏–º–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥
                translation_line = await autoTranslate(original_line, language_original, language_translation);
            }
        } else {
            // –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ —ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ–º–∞—î, —Ä–æ–±–∏–º–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥
            translation_line = await autoTranslate(original_line, language_original, language_translation);
        }

        const s_translation = {
            key: key,
            speaker: '1',
            text: translation_line,
            audio: audio_translationFileName,
            audio_avto: audio_translationFileName, // –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            audio_user: '', // –æ—Ç—Ä–µ–∑–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫
            audio_mic: '', // –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            // audio_user_shared: '', // –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
            start: 0,
            end: 0,
            chain: false
        };
        // –≥–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await generateAudioForSentence(s_translation, language_translation);
        translation.push(s_translation);

    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    if (translation_mistake.length > 0) {
        let message = `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ–∫—Å—Ç–∞:\n`;
        translation_mistake.forEach(item => {
            message += `–°—Ç—Ä–æ–∫–∞ ${item.id + 1}: ${item.text}\n`;
        });
        message += `\n–≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;
        alert(message);
    }

    if (isDialog) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        const speakerIds = Object.keys(speakers);
        const speakerNumbers = speakerIds.map(id => id + ':');
        const linesWithoutSpeakers = [];
        let currentSpeakerIndex = 0;

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É original –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤
        for (let i = 0; i < original.length; i++) {
            const sentence = original[i];
            const text = sentence.text;
            let speakerId = null;
            let cleanText = text;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞ (1:, 2:, –∏ —Ç.–¥.)
            const speakerMatch = text.match(/^(\d+):\s*(.+)$/);
            if (speakerMatch) {
                const foundSpeakerId = speakerMatch[1];
                cleanText = speakerMatch[2].trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–ø–∏–∫–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ
                if (speakers[foundSpeakerId]) {
                    speakerId = foundSpeakerId;
                    sentence.text = cleanText; // –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                }
            }

            // –ï—Å–ª–∏ —Å–ø–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤
            if (!speakerId) {
                linesWithoutSpeakers.push({
                    index: i + 1,
                    text: text
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º speaker –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            sentence.speaker = speakerId;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤
        if (linesWithoutSpeakers.length > 0) {
            let message = `–í —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ø–∏–∫–µ—Ä:\n`;
            linesWithoutSpeakers.forEach(item => {
                message += `${item.index}. ${item.text}\n`;
            });

            if (linesWithoutSpeakers.length === original.length) {
                // –ï—Å–ª–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤, —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –∫—Ä—É–≥—É
                message += `\n–°–ø–∏–∫–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–ª–∏–∫–∏!`;

                for (let i = 0; i < original.length; i++) {
                    const speakerId = speakerIds[currentSpeakerIndex % speakerIds.length];
                    original[i].speaker = speakerId;
                    currentSpeakerIndex++;
                }
            } else {
                // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
                message += `\n–í —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä "1".`;

                linesWithoutSpeakers.forEach(item => {
                    const index = item.index - 1; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
                    if (original[index]) {
                        original[index].speaker = '1';
                    }
                });
            }

            alert(message);
        }
    }


    return { original, translation };
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ
 */
function showSpeakersInHeader(speakers) {
    const speakersDisplay = document.getElementById('speakersDisplay');
    const speakersList = document.getElementById('speakersList');

    if (speakersDisplay && speakersList) {
        speakersDisplay.style.display = 'block';
        speakersList.innerHTML = '';

        Object.entries(speakers).forEach(([id, name]) => {
            const span = document.createElement('span');
            span.className = 'speaker-badge';
            span.textContent = `${id}: ${name}`;
            span.style.backgroundColor = getSpeakerColor(id);
            speakersList.appendChild(span);
        });
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
 */
function getSpeakerColor(speakerId) {
    const colors = ['#ff9999', '#99ff99', '#9999ff', '#ffff99', '#ff99ff', '#99ffff'];
    const index = parseInt(speakerId) - 1;
    return colors[index % colors.length];
}

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–ª–µ–µ—Ä—ã
 */
async function preloadAudioFiles() {
    console.log('üéµ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...');

    const originalSentences = workingData.original.sentences || [];
    const translationSentences = workingData.translation.sentences || [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    for (const sentence of originalSentences) {
        if (sentence.audio && !audioPlayers[sentence.audio]) {
            try {
                const audioUrl = `/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/${sentence.audio}`;
                const audio = new Audio(audioUrl);
                audioPlayers[sentence.audio] = audio;
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–µ–µ—Ä –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: ${sentence.audio}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: ${sentence.audio}`, error);
            }
        }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    for (const sentence of translationSentences) {
        if (sentence.audio && !audioPlayers[sentence.audio]) {
            try {
                const audioUrl = `/static/data/temp/${currentDictation.id}/${currentDictation.language_translation}/${sentence.audio}`;
                const audio = new Audio(audioUrl);
                audioPlayers[sentence.audio] = audio;
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–µ–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${sentence.audio}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞: ${sentence.audio}`, error);
            }
        }
    }

    console.log(`üéµ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–µ–µ—Ä–æ–≤: ${Object.keys(audioPlayers).length}`);
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
async function createTable() {
    const tbody = document.querySelector('#sentences-table tbody');
    if (!tbody) return;

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å–ø–∏–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const speakerCol = document.querySelector('.col-speaker');
    if (speakerCol) {
        speakerCol.style.display = currentDictation.is_dialog ? 'table-cell' : 'none';
    }

    // –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const originalSentences = workingData.original.sentences || [];
    const translationSentences = workingData.translation.sentences || [];

    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á–∞–º
    const allKeys = new Set();
    originalSentences.forEach(s => allKeys.add(s.key));
    translationSentences.forEach(s => allKeys.add(s.key));

    Array.from(allKeys).sort().forEach(key => {
        const originalSentence = originalSentences.find(s => s.key === key);
        const translationSentence = translationSentences.find(s => s.key === key);

        const row = createTableRow(key, originalSentence, translationSentence);
        tbody.appendChild(row);
    });

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ –ø–ª–µ–µ—Ä—ã
    await preloadAudioFiles();

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
    setTimeout(() => {
        const firstRow = document.querySelector('#sentences-table tbody tr:first-child');
        if (firstRow) {
            selectSentenceRow(firstRow);
            console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã');
        }
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
 */
function createTableRow(key, originalSentence, translationSentence) {
    const row = document.createElement('tr');
    row.dataset.key = key;
    row.className = 'sentence-row';

    // –ö–æ–ª–æ–Ω–∫–∞ 0: ‚Ññ
    const numberCell = document.createElement('td');
    numberCell.className = 'col-number';
    numberCell.dataset.col_id = 'col-number';
    numberCell.textContent = parseInt(key) + 1;
    row.appendChild(numberCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 1: –°–ø–∏–∫–µ—Ä (–µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥)
    if (currentDictation.is_dialog) {
        const speakerCell = document.createElement('td');
        speakerCell.className = 'col-speaker';
        speakerCell.dataset.col_id = 'col-speaker';
        if (originalSentence && originalSentence.speaker) {
            const speakerName = currentDictation.speakers[originalSentence.speaker] || originalSentence.speaker;
            speakerCell.textContent = speakerName;
            speakerCell.style.backgroundColor = getSpeakerColor(originalSentence.speaker);
        }
        row.appendChild(speakerCell);
    }

    // –ö–æ–ª–æ–Ω–∫–∞ 2: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalCell = document.createElement('td');
    originalCell.className = 'col-original panel-original';
    originalCell.dataset.col_id = 'col-or-text';
    if (originalSentence) {
        const textarea = document.createElement('textarea');
        textarea.value = originalSentence.text || '';
        textarea.className = 'sentence-text';
        textarea.dataset.key = key;
        textarea.dataset.type = 'original';

        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        textarea.addEventListener('input', function () {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            if (originalSentence) {
                originalSentence.text = textarea.value;
            }

            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
            const audioBtn = row.querySelector('.col-audio .audio-btn[data-language="' + currentDictation.language_original + '"]');
            if (audioBtn) {
                audioBtn.dataset.create = 'true';
                audioBtn.title = '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
                audioBtn.dataset.state = 'creating';
                setButtonState(audioBtn);
            }
        });

        originalCell.appendChild(textarea);
    }
    row.appendChild(originalCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 3: –ê—É–¥–∏–æ –û—Ä–∏–≥—ñ–Ω–∞–ª
    const audioCellOriginal = document.createElement('td');
    audioCellOriginal.className = 'col-audio panel-original';
    audioCellOriginal.dataset.col_id = 'col-or-audio';
    // –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    const audioBtnOriginal = document.createElement('button');
    audioBtnOriginal.className = 'audio-btn audio-btn-table state-ready';
    audioBtnOriginal.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginal.dataset.language = currentDictation.language_original;
    audioBtnOriginal.dataset.fieldName = 'audio';
    // audioBtnOriginal.dataset.create = 'folse';
    state = (!originalSentence || !originalSentence.audio) ? 'creating' : 'ready';
    audioBtnOriginal.dataset.state = state;
    audioBtnOriginal.dataset.originalState = state; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    setButtonState(audioBtnOriginal);
    audioBtnOriginal.title = (!originalSentence || !originalSentence.audio) ? '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginal.addEventListener('click', handleAudioPlayback);
    audioCellOriginal.appendChild(audioBtnOriginal);
    row.appendChild(audioCellOriginal);

    // –ö–æ–ª–æ–Ω–∫–∞ 4: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞—É–¥–∏–æ
    const audioSettingsCell = document.createElement('td');
    audioSettingsCell.className = 'col-audio-settings panel-original';
    audioSettingsCell.dataset.col_id = 'col-or-open-settings';
    audioSettingsCell.style.backgroundColor = 'var(--color-hover)';
    audioSettingsCell.style.padding = '0';
    // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç
    const audioSettingsBtn = document.createElement('button');
    audioSettingsBtn.className = 'audio-settings-btn';
    audioSettingsBtn.innerHTML = ''; // –ë–µ–∑ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞
    audioSettingsBtn.title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ';
    audioSettingsBtn.style.width = '100%';
    audioSettingsBtn.style.height = '100%';
    audioSettingsBtn.style.background = 'transparent';
    audioSettingsBtn.style.border = 'none';
    audioSettingsBtn.style.cursor = 'pointer';
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    audioSettingsBtn.addEventListener('click', (e) => {
        console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', key);
        e.preventDefault();
        e.stopPropagation();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ
        const table = document.getElementById('sentences-table');
        console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ —Å—Ç—Ä–æ–∫–∏):', table.className);

        if (table.classList.contains('state-original-translation')) {
            console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing (–∏–∑ —Å—Ç—Ä–æ–∫–∏)');
            toggleColumnGroup('original');
        } else {
            console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation (–∏–∑ —Å—Ç—Ä–æ–∫–∏)');
            toggleColumnGroup('translation');
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        console.log('üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É–¥–∏–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', key);
        openAudioSettingsPanel('original', key);
    });
    audioSettingsCell.appendChild(audioSettingsBtn);
    row.appendChild(audioSettingsCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 5: –ü–µ—Ä–µ–≤–æ–¥
    const translationCell = document.createElement('td');
    translationCell.className = 'col-translation panel-translation';
    translationCell.dataset.col_id = 'col-tr-text';
    if (translationSentence) {
        const textarea = document.createElement('textarea');
        textarea.value = translationSentence.text || '';
        textarea.className = 'sentence-text';
        textarea.dataset.key = key;
        textarea.dataset.type = 'translation';
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        textarea.addEventListener('input', function () {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            if (translationSentence) {
                translationSentence.text = textarea.value;
            }
            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            setTimeout(() => {
                const audioBtn = row.querySelector('.col-audio .audio-btn[data-language="' + currentDictation.language_translation + '"]');
                if (audioBtn) {
                    audioBtn.dataset.create = 'true';
                    audioBtn.title = '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞';
                    setButtonState(audioBtn, 'ready');
                }
            }, 0);
        });
        translationCell.appendChild(textarea);
    }
    row.appendChild(translationCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 6: –ê—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    const audioCell = document.createElement('td');
    audioCell.className = 'col-audio panel-translation';
    audioCell.dataset.col_id = 'col-tr-audio';
    // –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnTranslation = document.createElement('button');
    audioBtnTranslation.className = 'audio-btn audio-btn-table state-ready';
    audioBtnTranslation.innerHTML = '<i data-lucide="play"></i>';
    audioBtnTranslation.dataset.language = currentDictation.language_translation;
    audioBtnTranslation.dataset.fieldName = 'audio';
    // audioBtnTranslation.dataset.create = 'folse';
    state = (!translationSentence || !translationSentence.audio) ? 'creating' : 'ready';
    audioBtnTranslation.dataset.state = state;
    audioBtnTranslation.dataset.originalState = state; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    setButtonState(audioBtnTranslation);
    audioBtnTranslation.title = (!translationSentence || !translationSentence.audio) ? '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞';
    audioBtnTranslation.addEventListener('click', handleAudioPlayback);
    audioCell.appendChild(audioBtnTranslation);
    row.appendChild(audioCell);


    // –ë–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
    // –ö–æ–ª–æ–Ω–∫–∞ AVTO1: –ê—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ (–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS)
    const generateTtsCell = document.createElement('td');
    generateTtsCell.className = 'col-generate-tts panel-editing-avto';
    generateTtsCell.dataset.col_id = 'col-or-avto-play';
    // generateTtsCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // –∫–Ω–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnOriginalAvto = document.createElement('button');
    audioBtnOriginalAvto.className = 'audio-btn audio-btn-table state-ready';
    audioBtnOriginalAvto.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginalAvto.dataset.language = currentDictation.language_original;
    audioBtnOriginalAvto.dataset.fieldName = 'audio_avto';
    // audioBtnOriginalAvto.dataset.create === 'folse';
    state = (!originalSentence || !originalSentence.audio_avto) ? 'creating' : 'ready';
    audioBtnOriginalAvto.dataset.state = state;
    audioBtnOriginalAvto.dataset.originalState = state; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    setButtonState(audioBtnOriginalAvto);
    audioBtnOriginalAvto.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginalAvto.addEventListener('click', handleAudioPlayback);
    generateTtsCell.appendChild(audioBtnOriginalAvto);
    row.appendChild(generateTtsCell);

    // –ö–æ–ª–æ–Ω–∫–∞  AVTO2: –ü—Ä–∏–º–µ–Ω–∏—Ç—å audio_avto
    const applyCellAvto = document.createElement('td');
    applyCellAvto.className = 'col-apply-avto panel-editing-avto';
    applyCellAvto.dataset.col_id = 'col-or-avto-apply';
    // applyCellAvto.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    applyCellAvto.innerHTML = '<i data-lucide="arrow-big-left-dash"></i>';
    applyCellAvto.title = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥';
    row.appendChild(applyCellAvto);

    // –ö–æ–ª–æ–Ω–∫–∞ USER1: Start
    const startCell = document.createElement('td');
    startCell.className = 'col-start panel-editing-user';
    startCell.dataset.col_id = 'col-or-user-start';
    // startCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞

    const startInput = document.createElement('input');
    startInput.type = 'number';
    startInput.className = 'start-input';
    startInput.step = '0.01';
    startInput.min = '0';
    startInput.value = originalSentence.start ? originalSentence.start.toFixed(2) : '0.00';
    startCell.appendChild(startInput);
    row.appendChild(startCell);

    // –ö–æ–ª–æ–Ω–∫–∞ USER2: End
    const endCell = document.createElement('td');
    endCell.className = 'col-end panel-editing-user';
    endCell.dataset.col_id = 'col-or-user-end';
    // endCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞

    const endInput = document.createElement('input');
    endInput.type = 'number';
    endInput.className = 'end-input';
    endInput.step = '0.01';
    endInput.min = '0';
    endInput.value = originalSentence.end ? originalSentence.end.toFixed(2) : '0.00';
    endCell.appendChild(endInput);
    row.appendChild(endCell);

    // –ö–æ–ª–æ–Ω–∫–∞ USER3: üîó (—Ü–µ–ø–æ—á–∫–∞)
    const chainCell = document.createElement('td');
    chainCell.className = 'col-chain panel-editing-user';
    chainCell.dataset.col_id = 'col-or-user-chain';
    // chainCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    chainCell.innerHTML = originalSentence.chain ? '<i data-lucide="link"></i>' : '<i data-lucide="unlink"></i>';
    row.appendChild(chainCell);

    // // –ö–æ–ª–æ–Ω–∫–∞ –ë8: –°-—Ç—å (—Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ)
    // const createAudioCell = document.createElement('td');
    // createAudioCell.className = 'col-create-audio';
    // // createAudioCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // createAudioCell.textContent = '–°-—Ç—å';
    // row.appendChild(createAudioCell);

    // –ö–æ–ª–æ–Ω–∫–∞ USER4: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
    const playAudioUserCell = document.createElement('td');
    playAudioUserCell.className = 'col-play-audio panel-editing-user';
    playAudioUserCell.dataset.col_id = 'col-or-user-play';
    // playAudioCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnOriginalUser = document.createElement('button');
    audioBtnOriginalUser.className = 'audio-btn audio-btn-table state-ready';
    audioBtnOriginalUser.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginalUser.dataset.language = currentDictation.language_original;
    audioBtnOriginalUser.dataset.fieldName = 'audio_user';
    // audioBtnOriginalUser.dataset.create = 'folse';
    state = (!originalSentence || !originalSentence.audio_user) ? 'creating' : 'ready';
    audioBtnOriginalUser.dataset.state = state;
    audioBtnOriginalUser.dataset.originalState = state; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    setButtonState(audioBtnOriginalUser);
    audioBtnOriginalUser.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginalUser.addEventListener('click', handleAudioPlayback);
    playAudioUserCell.appendChild(audioBtnOriginalUser);
    row.appendChild(playAudioUserCell);

    // –ö–æ–ª–æ–Ω–∫–∞  USER5: –ü—Ä–∏–º–µ–Ω–∏—Ç—å audio_user
    const applyCellUser = document.createElement('td');
    applyCellUser.className = 'col-apply-user panel-editing-user';
    applyCellUser.dataset.col_id = 'col-or-user-apply';
    // applyCellUser.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    applyCellUser.innerHTML = '<i data-lucide="arrow-big-left-dash"></i>';
    applyCellUser.title = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    row.appendChild(applyCellUser);


    // –ø–∞–Ω–µ–ª—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    // –ö–æ–ª–æ–Ω–∫–∞ MIC1: –ê—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ (–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS)
    const generateAudioMicCell = document.createElement('td');
    generateAudioMicCell.className = 'col-generate-tts panel-editing-mic';
    generateAudioMicCell.dataset.col_id = 'col-or-mic-play';
    // generateTtsCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // –∫–Ω–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const audioBtnAudioMic = document.createElement('button');
    audioBtnAudioMic.className = 'audio-btn audio-btn-table state-ready';
    audioBtnAudioMic.innerHTML = '<i data-lucide="play"></i>';
    audioBtnAudioMic.dataset.language = currentDictation.language_original;
    audioBtnAudioMic.dataset.fieldName = 'audio_mic';
    // audioBtnAudioMic.dataset.create = 'folse';
    state = (!originalSentence || !originalSentence.audio_mic) ? 'creating_mic' : 'ready';
    audioBtnAudioMic.dataset.state = state;
    audioBtnAudioMic.dataset.originalState = state; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
    setButtonState(audioBtnAudioMic);
    audioBtnAudioMic.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞';
    audioBtnAudioMic.addEventListener('click', handleAudioPlayback);
    generateAudioMicCell.appendChild(audioBtnAudioMic);
    row.appendChild(generateAudioMicCell);

    // –ö–æ–ª–æ–Ω–∫–∞  MIC3: –ü—Ä–∏–º–µ–Ω–∏—Ç—å audio_avto
    const applyCellMic = document.createElement('td');
    applyCellMic.className = 'col-apply-avto panel-editing-mic';
    applyCellMic.dataset.col_id = 'col-or-mic-apply';
    // applyCellMic.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    applyCellMic.innerHTML = '<i data-lucide="arrow-big-left-dash"></i>';
    applyCellMic.title = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞';
    row.appendChild(applyCellMic);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    setupInputHandlers(row);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
    setupRowHandlers(row);

    return row;
}

// ==================== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è =====================

function setupTitleTranslationHandler() {
    const titleInput = document.getElementById('title');
    const translationTitleInput = document.getElementById('title_translation');

    console.log('üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è:', {
        titleInput: !!titleInput,
        translationTitleInput: !!translationTitleInput
    });

    if (!titleInput) {
        console.log('‚ùå –ü–æ–ª–µ title –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    if (!translationTitleInput) {
        console.log('‚ùå –ü–æ–ª–µ title_translation –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ Enter
    titleInput.addEventListener('keydown', async function (event) {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        if (event.key === 'Enter') {
            event.preventDefault();

            const originalTitle = titleInput.value.trim();
            console.log('üîÑ Enter –Ω–∞–∂–∞—Ç –≤ –ø–æ–ª–µ title:', originalTitle);

            if (!originalTitle || !translationTitleInput) {
                console.log('‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                return;
            }

            try {
                console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥:', {
                    text: originalTitle,
                    source_lang: currentDictation.language_original,
                    target_lang: currentDictation.language_translation
                });

                const response = await fetch('/translate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        text: originalTitle,
                        source_lang: currentDictation.language_original,
                        target_lang: currentDictation.language_translation
                    })
                });

                console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.ok);

                if (response.ok) {
                    const result = await response.json();
                    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:', result);

                    if (result.translation) {
                        translationTitleInput.value = result.translation;
                        console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–æ–ª–µ:', result.translation);
                        // –û–±–Ω–æ–≤–ª—è–µ–º title –≤ workingData –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                        updateTitlesInWorkingData();
                    } else {
                        console.log('‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', error);
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workingData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    titleInput.addEventListener('input', updateTitlesInWorkingData);
    if (translationTitleInput) {
        translationTitleInput.addEventListener('input', updateTitlesInWorkingData);
    }

    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ Enter –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

function updateTitlesInWorkingData() {
    const titleInput = document.getElementById('title');
    const translationTitleInput = document.getElementById('title_translation');

    if (!titleInput || !workingData) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if (workingData.original) {
        workingData.original.title = titleInput.value || '–î–∏–∫—Ç–∞–Ω—Ç';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–ª—è —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    if (workingData.translation && translationTitleInput) {
        workingData.translation.title = translationTitleInput.value || '–ü–µ—Ä–µ–≤–æ–¥';
    }
}

// ============================================================================
// –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –°–¢–ê–†–¢–û–í–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û
// ===========================================================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–Ω—ã –∞—É–¥–∏–æ
 */
async function initWaveform(audioUrl) {
    if (audioUrl) lastAudioUrl = audioUrl;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º
    const waveformContainer = document.getElementById('audioWaveform');
    if (!waveformContainer) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä audioWaveform –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
    if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä audioWaveform –Ω–µ –≤–∏–¥–∏–º, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        waveformContainer.style.width = '100%';
        waveformContainer.style.height = '100px';
        waveformContainer.style.minHeight = '100px';

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ –µ—â–µ 0, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            return;
        }
    }

    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WaveformCanvas —Å URL:', audioUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WaveformCanvas –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof WaveformCanvas === 'undefined') {
        console.error('‚ùå WaveformCanvas –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return;
    }

    if (waveformCanvas) {
        waveformCanvas.destroy();
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WaveformCanvas
        // –ö–ª–∞—Å—Å —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        waveformCanvas = new WaveformCanvas(waveformContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        waveformCanvas.onPlaybackEnd(() => {
            console.log('üéØ WaveformCanvas: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            if (currentPlayingButton) {
                const originalState = currentPlayingButton.dataset.originalState || 'ready';
                setButtonState(currentPlayingButton, originalState);
                currentPlayingButton = null;
            }
            currentAudio = null;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        const audioFileName = audioUrl.split('/').pop();
        let audioElement = null;

        // –ò—â–µ–º –≤ audioPlayers –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        for (const [key, audio] of Object.entries(audioPlayers)) {
            if (audio.src && audio.src.includes(audioFileName)) {
                audioElement = audio;
                console.log('üéµ –ù–∞–π–¥–µ–Ω–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –≤–æ–ª–Ω—ã:', key);
                break;
            }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (audioElement) {
            await waveformCanvas.loadAudioFromElement(audioElement);
        } else {
            // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ URL
            await waveformCanvas.loadAudio(audioUrl);
        }

        console.log('üéâ WaveformCanvas –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');

        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        const duration = waveformCanvas.getDuration();
        console.log('‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ:', duration);

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        const roundedDuration = Math.floor(duration * 100) / 100;
        console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 -', roundedDuration);

        waveformCanvas.setRegion(0, roundedDuration);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ DOM
        const startTimeInput = document.getElementById('audioStartTime');
        const endTimeInput = document.getElementById('audioEndTime');
        if (startTimeInput) startTimeInput.value = '0.00';
        if (endTimeInput) endTimeInput.value = roundedDuration.toFixed(2);
        console.log('‚úÖ –ü–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.00 -', roundedDuration.toFixed(2));

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
        waveformCanvas.onRegionUpdate((region) => {
            const startTimeInput = document.getElementById('audioStartTime');
            const endTimeInput = document.getElementById('audioEndTime');
            if (startTimeInput) startTimeInput.value = region.start.toFixed(2);
            if (endTimeInput) endTimeInput.value = region.end.toFixed(2);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ workingData
            if (workingData && workingData.original) {
                workingData.original.audio_user_shared_start = region.start;
                workingData.original.audio_user_shared_end = region.end;
            }
            if (workingData && workingData.translation) {
                workingData.translation.audio_user_shared_start = region.start;
                workingData.translation.audio_user_shared_end = region.end;
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WaveformCanvas:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingOverlay(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏:', message);
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Å–ø–∏–Ω–Ω–µ—Ä
}

/**
 * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingOverlay() {
    console.log('‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Å–ø–∏–Ω–Ω–µ—Ä
}
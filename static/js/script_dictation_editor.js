const userManager = window.UM;
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
const audioPlayers = {};

// –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫ –Ω–µ–º—É
// const modal = document.getElementById('modal');
// const titleField = document.getElementById('modalTitle');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
let startModal = null; // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
let audioSettingsModal = null; // –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ

let currentAudioFile = null; // —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞—É–¥–∏–æ

let data = [];
let currentDictation = {
    id: '', // ID —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    isNew: true, // –§–ª–∞–≥ - –Ω–æ–≤—ã–π —ç—Ç–æ –¥–∏–∫—Ç–∞–Ω—Ç –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    safe_email: '',  // –∏–º—è –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –≤ –≤–∏–¥–µ test_at_example_dot_com
    language_original: '',
    language_translation: '',
    category_key: '', // –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    category_title: '', // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_path: '', // –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
    dictationStartTime: 0, // –Ω–∞—á–∞–ª–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    dictationEndTime: 0, // –∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞
    tableFilled: false, // —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    is_dialog: false, // —Ñ–ª–∞–≥ –¥–∏–∞–ª–æ–≥–∞
    speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
    current_edit_mode: null, // 'original' | 'translation' | null
    current_row_key: null // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
};

let currentRowIndex = 0;
let sentenceRows = [];
let waveformCanvas = null;
let lastAudioUrl = null;
let currentRegion = null;
let wordPointer = 0; // –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
// –¶–≤–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ WaveformCanvas –∫–ª–∞—Å—Å–µ

let sentences_original = [];
let sentence_translation = [];

let workingData = {
    original: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [] // {key, speaker, text, audio, audio_users_shared, start, end, chain}
    },
    translation: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [] // {key, speaker, text, audio, shared_audio, start, end, chain}
    }
};














// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
let isPlaying = false;
let playheadAnimationId = null;



// ==================== —Åover –æ–±–ª–æ–∂–∫–∞ ========================================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ cover
function setupCoverHandlers() {
    const coverUploadBtn = document.getElementById('coverUploadBtn');
    const coverFile = document.getElementById('coverFile');
    const coverImage = document.getElementById('coverImage');

    if (coverUploadBtn && coverFile) {
        // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å" –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        coverUploadBtn.addEventListener('click', () => {
            coverFile.click();
        });

        // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        coverFile.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (!file.type.startsWith('image/')) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }

            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const reader = new FileReader();
                reader.onload = (e) => {
                    if (coverImage) {
                        coverImage.src = e.target.result;
                    }
                };
                reader.readAsDataURL(file);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const formData = new FormData();
                formData.append('cover', file);
                formData.append('dictation_id', currentDictation.id);

                const response = await fetch('/api/cover', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Cover —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result.cover_url);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    currentDictation.coverFile = file;
                } else {
                    const error = await response.json();
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cover:', error.error);
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cover:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cover —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function loadCoverForExistingDictation(dictationId, originalLanguage) {
    const coverImage = document.getElementById('coverImage');
    if (!coverImage) return;

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å cover –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const dictationCoverUrl = `/static/data/dictations/${dictationId}/cover.webp`;

    try {
        const response = await fetch(dictationCoverUrl, { method: 'HEAD' });
        if (response.ok) {
            coverImage.src = dictationCoverUrl;
            return;
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    // –ï—Å–ª–∏ cover –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º cover –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultCoverUrl = `/static/data/covers/cover_${originalLanguage}.webp`;
    coverImage.src = defaultCoverUrl;
}




// –§—É–Ω–∫—Ü–∏—è loadCategoryInfoForDictation —É–¥–∞–ª–µ–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
function getCategoryPathFromNode(node) {
    const path = [];
    let currentNode = node;

    while (currentNode && currentNode.title !== 'root') {
        path.unshift(currentNode.title);
        currentNode = currentNode.parent;
    }

    return path.join(' > ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function updateCategoryPathDisplay(categoryPath) {
    const categoryPathElement = document.getElementById('category-path');
    if (categoryPathElement && categoryPath) {
        categoryPathElement.innerHTML = `<i data-lucide="folder"></i> ${categoryPath}`;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

function newSentances(key, text, key_audio, start = '', end = '') {
    return {
        key: key,
        text: text,
        audio: key_audio,
        start: start,
        end: end
    };

}

// ============================================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
function initNewDictation(safe_email, initData) {
    const timestamp = Date.now();
    const dictation_id = `dicta_${timestamp}`;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —è–∑—ã–∫–∞—Ö –∏–∑ sessionStorage
    const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
    const categoryInfo = categoryDataStr ? JSON.parse(categoryDataStr) : {};
    const language_original = categoryInfo.language_original || 'en';
    const language_translation = categoryInfo.language_translation || 'ru';
    console.log('üîç DEBUG: categoryInfo –∏–∑ sessionStorage:', categoryInfo);

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ initData
    currentDictation = {
        id: dictation_id,
        isNew: true,
        safe_email: safe_email,
        language_original: language_original,
        language_translation: language_translation,
        category_key: categoryInfo.key || '',
        category_title: categoryInfo.title || '',
        category_path: categoryInfo.path || '',
        coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
        is_dialog: false,
        speakers: {},
        current_edit_mode: null, // 'original' | 'translation' | null - –≥—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        current_row_key: null // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    };

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('title').value = '';
    document.getElementById('title_translation').value = '';
    // document.getElementById('text').value = ''; // TODO: –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç text –≤ —à–∞–±–ª–æ–Ω
    // document.querySelector('#sentences-table tbody').innerHTML = ''; // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É sentences –≤ —à–∞–±–ª–æ–Ω
    document.getElementById('dictation-id').textContent = `–ù–æ–≤—ã–π –¥–∏–∫—Ç–∞–Ω—Ç: ` + dictation_id;

    // ==================== –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ ========================================
    console.log('üîç DEBUG: –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const startModal = document.getElementById('startModal');
    console.log('üîç DEBUG: startModal —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!startModal);

    if (startModal) {
        console.log('üîç DEBUG: startModal —Ç–µ–∫—É—â–∏–π display:', startModal.style.display);
        console.log('üîç DEBUG: startModal computed style:', window.getComputedStyle(startModal).display);
    }

    // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    setTimeout(() => {
        console.log('üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º openStartModal()...');
        openStartModal();
    }, 100);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    console.log('üîç DEBUG: currentDictation.category_path:', currentDictation.category_path);
    if (currentDictation.category_path) {
        updateCategoryPathDisplay(currentDictation.category_path);
        console.log('‚úÖ –ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω:', currentDictation.category_path);
    } else {
        console.log('‚ùå –ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç–æ–π!');
    }


    // TODO: –∑–∞—á–µ–º —ç—Ç–æ?
    // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è input (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    // const input = document.getElementById('audioFile');
    // if (input) {
    //     input.value = '';
    // }

}


// ==================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞ ========================================
async function loadExistingDictation(initData) {

    const {
        dictation_id,
        original_language,
        translation_language,
        title,
        level,
        original_data,
        translation_data,
        audio_file,
        audio_words,
        safe_email
    } = initData;

    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ sessionStorage (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–µ—Ä–µ–≤–µ)
    const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
    const categoryInfo = categoryDataStr ? JSON.parse(categoryDataStr) : {};

    currentDictation = {
        id: dictation_id,
        isNew: false,
        safe_email: safe_email,
        language_original: original_language,
        language_translation: translation_language,
        audio_words: audio_words,
        category_key: categoryInfo.key || '',
        category_title: categoryInfo.title || '',
        category_path: categoryInfo.path || '',
        coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
        is_dialog: original_data?.is_dialog || false,
        speakers: original_data?.speakers || {}
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    document.getElementById('dictation-id').textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º: ` + dictation_id;
    document.getElementById('title').value = title;
    document.getElementById('title_translation').value = translation_data?.title || "";

    // –ó–∞–≥—Ä—É–∂–∞–µ–º cover –µ—Å–ª–∏ –µ—Å—Ç—å
    await loadCoverForExistingDictation(dictation_id, original_language);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ info.json)
    if (currentDictation.category_path) {
        updateCategoryPathDisplay(currentDictation.category_path);
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
        const response = await fetch('/copy_dictation_to_temp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictation_id,
                language_original: original_language,
                language_translation: translation_language
            })
        });

        if (response.ok) {
            console.log('‚úÖ –î–∏–∫—Ç–∞–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤ temp:', error);
    }


    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    workingData = {
        original: original_data || {},
        translation: translation_data || {}
    };

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    createTable();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Lucide –∏–∫–æ–Ω–∫–∏
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// document.addEventListener('DOMContentLoaded', () => {
function initDictationGenerator() {
    // const path = window.location.pathname;


    // 1. –ü–æ–ª—É—á–∞–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const initRaw = document.getElementById("init-data")?.textContent;

    // 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
    const initData = JSON.parse(initRaw);

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ UserManager
    let safe_email = window.UM.getSafeEmail();
    if (safe_email === 'anonymous') {
        safe_email = initData.safe_email || 'anonymous';
    }

    console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ", initData);

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dictation_id –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    if (initData.dictation_id !== 'new') {
        console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ loadExistingDictation ");
        loadExistingDictation(initData);
    } else {
        console.log("‚úÖ‚úÖ‚úÖ4.‚úÖ‚úÖ‚úÖ initNewDictation");
        initNewDictation(safe_email, initData);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º language_selector –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
    initLanguageFlags(initData);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–≤–µ—Ä–∞
    setupCoverHandlers();

    // setupButtons(); // –£–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    // initializeUser(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JWT –≤–µ—Ä—Å–∏—è)
    // setupAuthHandlers(); // –î–û–ë–ê–í–ò–¢–¨ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    // setupExitHandlers(); // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—Ö–æ–¥–∞
    setupStartModalHandlers(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setupTitleTranslationHandler(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è

}



// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–õ–ê–ì–û–í –Ø–ó–´–ö–û–í
function initLanguageFlags(initData) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–æ–≤
        const langPairContainer = document.getElementById('langPair');
        if (!langPairContainer) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä langPair –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤ –∏–∑ initData –∏–ª–∏ sessionStorage
        let language_original = initData.original_language;
        let language_translation = initData.translation_language;

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–∏–∫—Ç–∞–Ω—Ç, –±–µ—Ä–µ–º —è–∑—ã–∫–∏ –∏–∑ sessionStorage
        if (initData.dictation_id === 'new') {
            const categoryDataStr = sessionStorage.getItem('selectedCategoryForDictation');
            if (categoryDataStr) {
                const categoryData = JSON.parse(categoryDataStr);
                language_original = categoryData.language_original || language_original;
                language_translation = categoryData.language_translation || language_translation;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LanguageManager –∏ LanguageSelector –¥–æ—Å—Ç—É–ø–Ω—ã
        if (typeof window.LanguageManager === 'undefined') {
            console.warn('LanguageManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (typeof LanguageSelector === 'undefined') {
            console.warn('LanguageSelector –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤
        const languageData = window.LanguageManager.getLanguageData();
        if (!languageData) {
            console.warn('–î–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥–∏ —Å –ø–æ–º–æ—â—å—é LanguageSelector
        const flagCombo = new LanguageSelector({
            container: langPairContainer,
            mode: 'flag-combo',
            nativeLanguage: language_translation, // —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ (–ø–µ—Ä–µ–≤–æ–¥)
            currentLearning: language_original,   // –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
            languageData: languageData
        });

        console.log('‚úÖ –§–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
            original: language_original,
            translation: language_translation
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤:', error);
    }
}

// ============================================================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ò–ì–†–´–í–ê–ù–ò–Ø –ê–£–î–ò–û
// ============================================================================

let currentPlayingButton = null;
let currentAudio = null;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
 * @param {Event} event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
async function handleAudioPlayback(event) {
    const button = event.target.closest('button.audio-btn');
    if (!button) return;

    const language = button.dataset.language; // 'en' –∏–ª–∏ 'ru'
    const fieldName = button.dataset.fieldName; // 'audio', 'audio_user_shared', 'audio_avto', 'audio_user'
    const shouldCreate = button.dataset.create === 'true'; // –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª

    // –ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (currentAudio && currentPlayingButton) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
        setButtonState(currentPlayingButton, 'ready');
    }

    try {
        if (shouldCreate) {
            await createAndPlayAudio(button, language, fieldName);
        } else {
            await playExistingAudio(button, language, fieldName);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
        setButtonState(button, 'ready');
    }
}



/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
 */
function updateAudioButtonState(audioBtn) {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const sentence = getSentenceForButton(audioBtn);
    const hasAudio = sentence && sentence[audioBtn.dataset.fieldName];

    // –û–±–Ω–æ–≤–ª—è–µ–º dataset.create –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ
    audioBtn.dataset.create = hasAudio ? 'false' : 'true';
    audioBtn.title = hasAudio ? '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ' : '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    setButtonState(audioBtn, 'ready');
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∞—É–¥–∏–æ
 */
async function createAndPlayAudio(button, language, fieldName) {
    setButtonState(button, 'creating');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const sentence = getSentenceForButton(button);
        if (!sentence) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏');
        }

        // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        const audioFile = await generateAudioForSentence(sentence, language);

        if (!audioFile) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentence[fieldName] = audioFile;

        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Ñ–∞–π–ª —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        button.dataset.create = 'false';
        button.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        currentPlayingButton = button;
        await playAudioFile(audioFile, language);

        // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'ready'
        // —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onended –≤ playAudioFile

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
        setButtonState(button, 'ready');
        throw error;
    }
}

/**
 * –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
 */
async function playExistingAudio(button, language, fieldName) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const audioFile = getAudioFileName(button, language, fieldName);

    if (!audioFile) {
        console.warn('‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
    currentPlayingButton = button;
    setButtonState(button, 'playing');
    await playAudioFile(audioFile, language);
}

/**
 * –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª
 */
async function playAudioFile(audioFile, language) {
    if (currentAudio) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
    }

    const audioUrl = `/static/data/temp/${currentDictation.id}/${language}/${audioFile}`;

    currentAudio = new Audio(audioUrl);

    return new Promise((resolve, reject) => {
        currentAudio.onended = () => {
            if (currentPlayingButton) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≥–æ—Ç–æ–≤" —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
                setButtonState(currentPlayingButton, 'ready');
                currentPlayingButton = null;
            }
            currentAudio = null;
            resolve();
        };

        currentAudio.onerror = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error);
            if (currentPlayingButton) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≥–æ—Ç–æ–≤" —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
                setButtonState(currentPlayingButton, 'ready');
                currentPlayingButton = null;
            }
            currentAudio = null;
            reject(error);
        };

        currentAudio.play().catch(reject);
    });
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ
 */
async function stopCurrentPlayback() {
    if (currentAudio) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
        currentAudio = null;
    }

    if (currentPlayingButton) {
        setButtonState(currentPlayingButton, 'ready');
        currentPlayingButton = null;
    }

}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
 */
function getSentenceForButton(button) {
    const row = button.closest('tr');
    const key = row.dataset.key;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    const language = button.dataset.language;

    if (language === currentDictation.language_original) {
        return workingData.original.sentences.find(s => s.key === key);
    } else {
        return workingData.translation.sentences.find(s => s.key === key);
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
 */
function getAudioFileName(button, language, fieldName) {
    const sentence = getSentenceForButton(button);
    return sentence ? sentence[fieldName] : null;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
 */
function setButtonState(button, state) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    button.classList.remove('state-ready', 'state-playing', 'state-creating');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    button.classList.add(`state-${state}`);


    let newIcon = '';
    switch (state) {
        case 'ready':
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≥–æ—Ç–æ–≤" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç dataset.create
            newIcon = button.dataset.create === 'true' ? 'hammer' : 'play';
            break;
        case 'playing':
            newIcon = 'pause';
            break;
        case 'creating':
            newIcon = 'hammer';
            break;
    }
    button.innerHTML = `<i data-lucide="${newIcon}"></i>`;

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É Lucide
    lucide.createIcons();
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–î–ò–ö–ê–¢–û–†–ê –ó–ê–ì–†–£–ó–ö–ò
// ============================================================================

function showLoadingIndicator(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    // –°–æ–∑–¥–∞–µ–º overlay
    let overlay = document.getElementById('loading-overlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">${message}</div>
            </div>
        `;
        document.body.appendChild(overlay);
    } else {
        overlay.querySelector('.loading-text').textContent = message;
    }
    overlay.style.display = 'flex';
}

function hideLoadingIndicator() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–°–í–ï–¢–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê –í TEXTAREA
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è contenteditable div
 * @param {HTMLElement} editor - —ç–ª–µ–º–µ–Ω—Ç contenteditable
 */
function setupTextareaHighlighting(editor) {
    let isUpdating = false;

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    function updateHighlight() {
        if (isUpdating) return;

        const text = editor.innerText || editor.textContent;
        const lines = text.split('\n');
        const delimiter = document.getElementById('translationDelimiter')?.value || '/*';

        const highlightedText = lines.map(line => {
            if (line.trim().startsWith(delimiter)) {
                return `<span class="line-translation">${escapeHtml(line)}</span>`;
            }
            return escapeHtml(line);
        }).join('\n');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        const selection = window.getSelection();
        const range = selection.rangeCount > 0 ? selection.getRangeAt(0) : null;
        const cursorOffset = range ? getCursorOffset(editor, range) : 0;

        isUpdating = true;
        editor.innerHTML = highlightedText;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        if (cursorOffset !== null) {
            setCursorAtOffset(editor, cursorOffset);
        }
        isUpdating = false;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    editor.addEventListener('input', () => {
        if (!isUpdating) {
            setTimeout(updateHighlight, 10);
        }
    });

    editor.addEventListener('paste', (e) => {
        e.preventDefault();
        const text = (e.clipboardData || window.clipboardData).getData('text');
        document.execCommand('insertText', false, text);
        setTimeout(updateHighlight, 10);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    const delimiterInput = document.getElementById('translationDelimiter');
    if (delimiterInput) {
        delimiterInput.addEventListener('input', updateHighlight);
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    updateHighlight();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç
 * @param {Range} range - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è
 * @returns {number} - –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
 */
function getCursorOffset(element, range) {
    let offset = 0;
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
        false
    );

    let node;
    while (node = walker.nextNode()) {
        if (node === range.startContainer) {
            offset += range.startOffset;
            break;
        }
        offset += node.textContent.length;
    }

    return offset;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
 * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç
 * @param {number} offset - –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
 */
function setCursorAtOffset(element, offset) {
    const range = document.createRange();
    const selection = window.getSelection();

    let currentOffset = 0;
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
        false
    );

    let node;
    while (node = walker.nextNode()) {
        const nodeLength = node.textContent.length;
        if (currentOffset + nodeLength >= offset) {
            range.setStart(node, offset - currentOffset);
            range.setEnd(node, offset - currentOffset);
            break;
        }
        currentOffset += nodeLength;
    }

    selection.removeAllRanges();
    selection.addRange(range);
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
 * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–¨–Æ –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–û
// ============================================================================

/**
 * –û—Ç–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 * @param {string} language - 'original' –∏–ª–∏ 'translation'
 * @param {string} rowKey - –∫–ª—é—á —Å—Ç—Ä–æ–∫–∏
 */
function openAudioSettingsPanel(language, rowKey) {
    console.log('üéµ openAudioSettingsPanel –≤—ã–∑–≤–∞–Ω–∞:', language, rowKey);
    
    const modal = document.getElementById('audioSettingsModal');
    console.log('üîç –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ:', modal);
    
    if (modal) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentDictation.current_edit_mode = language;
        currentDictation.current_row_key = rowKey;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
        modal.style.display = 'block';

        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
        console.log('üìã –°—Ç–∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
            display: modal.style.display,
            zIndex: window.getComputedStyle(modal).zIndex
        });
    } else {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ audioSettingsModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function closeAudioSettingsPanel() {
    const modal = document.getElementById('audioSettingsModal');
    if (modal) {
        modal.style.display = 'none';

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentDictation.current_edit_mode = null;
        currentDictation.current_row_key = null;

        console.log('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞');
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ò–î–ò–ú–û–°–¢–ò –ö–û–õ–û–ù–û–ö
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫
 */
function setupColumnToggleHandlers() {
    const toggleOriginalBtn = document.getElementById('open_left_panel_original');

    if (toggleOriginalBtn) {
        toggleOriginalBtn.addEventListener('click', () => {
            console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤ –®–ê–ü–ö–ï —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–∞—Ç–∞');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            const table = document.getElementById('sentences-table');
            console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã:', table.className);
            
            if (table.classList.contains('state-original-translation')) {
                console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing');
                toggleColumnGroup('original');
            } else {
                console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation');
                toggleColumnGroup('translation');
            }
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
            console.log('üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É–¥–∏–æ –∏–∑ —à–∞–ø–∫–∏');
            openAudioSettingsPanel('original', 'header');
        });
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ open_left_panel_original –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –º–µ–∂–¥—É original-translation –∏ original-editing
 * @param {string} group - 'original' –∏–ª–∏ 'translation'
 */
function toggleColumnGroup(group) {
    console.log('üîÑ toggleColumnGroup –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', group);
    
    const table = document.getElementById('sentences-table');
    if (!table) {
        console.warn('‚ùå –¢–∞–±–ª–∏—Ü–∞ sentences-table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', table.className);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    table.classList.remove('state-original-translation', 'state-original-editing');

    if (group === 'original') {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing (–æ—Ä–∏–≥–∏–Ω–∞–ª + –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
        table.classList.add('state-original-editing');
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å state-original-editing');
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        updateToggleButtonIcon('open_left_panel_original', 'original');
    } else if (group === 'translation') {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation (–æ—Ä–∏–≥–∏–Ω–∞–ª + –ø–µ—Ä–µ–≤–æ–¥)
        table.classList.add('state-original-translation');
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å state-original-translation');
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        updateToggleButtonIcon('open_left_panel_original', 'translation');
    }

    console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', table.className);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CSS
    setTimeout(() => {
        const testElement = document.querySelector('.panel-editing');
        if (testElement) {
            const computedStyle = window.getComputedStyle(testElement);
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –¥–ª—è .panel-editing:', {
                display: computedStyle.display,
                visibility: computedStyle.visibility,
                className: testElement.className
            });
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç .panel-editing –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º panel-editing
        const allEditingElements = document.querySelectorAll('.panel-editing');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .panel-editing:', allEditingElements.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º panel-original
        const allOriginalElements = document.querySelectorAll('.panel-original');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .panel-original:', allOriginalElements.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º panel-translation
        const allTranslationElements = document.querySelectorAll('.panel-translation');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .panel-translation:', allTranslationElements.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ .panel-translation
        if (allTranslationElements.length > 0) {
            const firstTranslationElement = allTranslationElements[0];
            const translationStyle = window.getComputedStyle(firstTranslationElement);
            console.log('üîç CSS –¥–ª—è .panel-translation:', {
                display: translationStyle.display,
                visibility: translationStyle.visibility,
                className: firstTranslationElement.className
            });
        }
    }, 100);
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} buttonId - ID –∫–Ω–æ–ø–∫–∏
 * @param {string} state - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ('original' –∏–ª–∏ 'translation')
 */
function updateToggleButtonIcon(buttonId, state) {
    console.log('üé® updateToggleButtonIcon –≤—ã–∑–≤–∞–Ω–∞:', buttonId, state);
    
    const button = document.getElementById(buttonId);
    
    if (button) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', button);
        
        if (state === 'original') {
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ original-editing –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É "–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
            button.innerHTML = `<i data-lucide="panel-left-close"></i>`;
            console.log('üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: panel-left-close');
        } else if (state === 'translation') {
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ original-translation –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É "–æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
            button.innerHTML = `<i data-lucide="panel-left-open"></i>`;
            console.log('üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: panel-left-open');
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
            console.log('üé® –ò–∫–æ–Ω–∫–∏ Lucide –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã');
        } else {
            console.warn('‚ö†Ô∏è Lucide –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', buttonId);
    }
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–û
// ============================================================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function setupAudioSettingsModalHandlers() {
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    const cancelAudioBtn = document.getElementById('cancelAudioBtn');
    if (cancelAudioBtn) {
        cancelAudioBtn.addEventListener('click', closeAudioSettingsPanel);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    const applyAudioBtn = document.getElementById('applyAudioBtn');
    if (applyAudioBtn) {
        applyAudioBtn.addEventListener('click', () => {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ');
            closeAudioSettingsPanel();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const audioSettingsModal = document.getElementById('audioSettingsModal');
    if (audioSettingsModal) {
        audioSettingsModal.addEventListener('click', (e) => {
            if (e.target === audioSettingsModal) {
                closeAudioSettingsPanel();
            }
        });
    }
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¢–ê–†–¢–û–í–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
// ============================================================================

function setupStartModalHandlers() {
    // –ß–µ–∫–±–æ–∫—Å –¥–∏–∞–ª–æ–≥–∞
    const isDialogCheckbox = document.getElementById('isDialogCheckbox');
    if (isDialogCheckbox) {
        isDialogCheckbox.addEventListener('change', (e) => {
            toggleSpeakersTable(e.target.checked);
            updateCheckboxIcon(e.target.checked);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ textarea
    const startTextInput = document.getElementById('startTextInput');
    if (startTextInput) {
        setupTextareaHighlighting(startTextInput);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...');
    setupColumnToggleHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥
    const table = document.getElementById('sentences-table');
    if (table) {
        console.log('üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', table.className);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        const originalElements = table.querySelectorAll('.panel-original');
        const translationElements = table.querySelectorAll('.panel-translation');
        const editingElements = table.querySelectorAll('.panel-editing');
        
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:');
        console.log('  - .panel-original:', originalElements.length);
        console.log('  - .panel-translation:', translationElements.length);
        console.log('  - .panel-editing:', editingElements.length);
        
        table.classList.add('state-original-translation');
        console.log('üìã –ö–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', table.className);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateToggleButtonIcon('open_left_panel_original', 'translation');
    } else {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ sentences-table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    setupAudioSettingsModalHandlers();

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞
    const addSpeakerBtn = document.getElementById('addSpeakerBtn');
    if (addSpeakerBtn) {
        addSpeakerBtn.addEventListener('click', addSpeaker);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-speaker')) {
            removeSpeaker(e.target);
        }
    });

    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const cancelStartBtn = document.getElementById('cancelStartBtn');
    if (cancelStartBtn) {
        cancelStartBtn.addEventListener('click', cancelDictationCreation);
    }

    const createDictationBtn = document.getElementById('createDictationBtn');
    if (createDictationBtn) {
        createDictationBtn.addEventListener('click', createDictationFromStart);
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ"
    const reenterTextBtn = document.getElementById('reenterTextBtn');
    if (reenterTextBtn) {
        reenterTextBtn.addEventListener('click', () => {
            if (confirm('–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                const tbody = document.querySelector('#sentences-table tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                }

                // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
                const reenterTextSection = document.getElementById('reenterTextSection');
                if (reenterTextSection) {
                    reenterTextSection.style.display = 'none';
                }

                // –û—á–∏—Å—Ç–∏—Ç—å workingData
                workingData.original.sentences = [];
                workingData.translation.sentences = [];

                // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                openStartModal();
            }
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤—ã–π—Ç–∏"
    const saveAndExitBtn = document.getElementById('saveAndExitBtn');
    if (saveAndExitBtn) {
        saveAndExitBtn.addEventListener('click', () => {
            if (confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É?')) {
                saveDictationAndExit();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const startModal = document.getElementById('startModal');
    if (startModal) {
        startModal.addEventListener('click', (e) => {
            if (e.target === startModal) {
                closeStartModal();
            }
        });
    }
}

function openStartModal() {
    console.log('üîç DEBUG: openStartModal() –≤—ã–∑–≤–∞–Ω–∞');
    const modal = document.getElementById('startModal');
    console.log('üîç DEBUG: modal —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!modal);

    if (modal) {
        console.log('üîç DEBUG: modal –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
            display: modal.style.display,
            computedDisplay: window.getComputedStyle(modal).display
        });

        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        console.log('üîç DEBUG: modal –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
            display: modal.style.display,
            computedDisplay: window.getComputedStyle(modal).display
        });
        console.log('‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ');
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç startModal –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
}

function closeStartModal() {
    const modal = document.getElementById('startModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

async function cancelDictationCreation() {
    try {
        console.log('üö´ –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

        // –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ —Ä–∞–±–æ—Ç–µ
        if (currentDictation && currentDictation.id && currentDictation.isNew) {
            console.log('üßπ –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫—É –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', currentDictation.id);

            const response = await fetch('/cleanup_temp_dictation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dictation_id: currentDictation.id,
                    safe_email: currentDictation.safe_email
                })
            });

            if (response.ok) {
                console.log('‚úÖ Temp –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞');
            } else {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å temp –ø–∞–ø–∫—É');
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        // –ü–æ–∑–∏—Ü–∏—è –≤ –¥–µ—Ä–µ–≤–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º sessionStorage
        console.log('üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        window.location.href = '/';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        window.location.href = '/';
    }
}

function toggleSpeakersTable(show) {
    const speakersTable = document.getElementById('speakersTable');
    if (speakersTable) {
        speakersTable.style.display = show ? 'table' : 'none';
    }
}

function updateCheckboxIcon(isChecked) {
    const checkboxIcon = document.querySelector('#isDialogCheckbox + .checkbox-icon');
    if (checkboxIcon) {
        checkboxIcon.setAttribute('data-lucide', isChecked ? 'circle-check-big' : 'circle');
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

function addSpeaker() {
    const tbody = document.querySelector('#speakersTable tbody');
    if (!tbody) return;

    const speakerCount = tbody.children.length + 1;
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${speakerCount}:</td>
        <td><input type="text" value="–°–ø–∏–∫–µ—Ä ${speakerCount}" class="speaker-name-input"></td>
        <td><button type="button" class="remove-speaker" title="–£–¥–∞–ª–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞">
        <i data-lucide="trash-2"></i>
        </button></td>
    `;
    tbody.appendChild(row);
}

function removeSpeaker(button) {
    const row = button.closest('tr');
    if (row && document.querySelector('#speakersTable tbody').children.length > 1) {
        row.remove();
        // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ø–∏–∫–µ—Ä–æ–≤
        const rows = document.querySelectorAll('#speakersTable tbody tr');
        rows.forEach((row, index) => {
            row.cells[0].textContent = index + 1;
        });
    }
}

async function createDictationFromStart() {
    const text = (document.getElementById('startTextInput').innerText || document.getElementById('startTextInput').textContent).trim();
    const delimiter = document.getElementById('translationDelimiter').value.trim();
    const isDialog = document.getElementById('isDialogCheckbox').checked;

    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∫—Ç–∞–Ω—Ç–∞');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

    try {
        const speakers = isDialog ? getSpeakersFromTable() : { '1': '–°–ø–∏–∫–µ—Ä 1' };

        // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
        const parsedData = await parseInputText(text, delimiter, isDialog, speakers);

        // –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentDictation.is_dialog = isDialog;
        currentDictation.speakers = speakers;

        workingData.original = {
            language: currentDictation.language_original,
            title: document.getElementById('title').value || '–î–∏–∫—Ç–∞–Ω—Ç',
            speakers: speakers,
            sentences: parsedData.original
        };

        workingData.translation = {
            language: currentDictation.language_translation,
            title: document.getElementById('title_translation').value || '–ü–µ—Ä–µ–≤–æ–¥',
            speakers: speakers,
            sentences: parsedData.translation
        };

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
        const reenterTextSection = document.getElementById('reenterTextSection');
        if (reenterTextSection) {
            reenterTextSection.style.display = 'block';
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥
        if (isDialog) {
            showSpeakersInHeader(speakers);
        }

        // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        createTable();

        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const startTextInput = document.getElementById('startTextInput');
        if (startTextInput) {
            startTextInput.innerHTML = '';
        }

        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeStartModal();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + error.message);
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingIndicator();
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –í–´–•–û–î–ê
// ============================================================================

async function saveDictationAndExit() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞...');

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveData = {
            id: currentDictation.id,
            language_original: currentDictation.language_original,
            language_translation: currentDictation.language_translation,
            title: document.getElementById('title') ? document.getElementById('title').value : '–î–∏–∫—Ç–∞–Ω—Ç',
            level: currentDictation.level || 'A1',
            is_dialog: currentDictation.is_dialog,
            speakers: currentDictation.speakers,
            sentences: {
                [currentDictation.language_original]: workingData.original,
                [currentDictation.language_translation]: workingData.translation
            }
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!saveData.id) {
            alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –¥–∏–∫—Ç–∞–Ω—Ç–∞');
            hideLoadingIndicator();
            return;
        }

        if (!currentDictation.category_key) {
            alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞');
            hideLoadingIndicator();
            return;
        }


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∫—Ç–∞–Ω—Ç —Å—Ä–∞–∑—É –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const requestData = {
            ...saveData,
            category_key: currentDictation.category_key
        };


        const response = await fetch('/save_dictation_final', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });

        const result = await response.json();


        if (result.success) {
            console.log('–î–∏–∫—Ç–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ sessionStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const currentCategoryData = {
                key: currentDictation.category_key,
                title: currentDictation.category_title,
                path: currentDictation.category_path,
                language_original: currentDictation.language_original,
                language_translation: currentDictation.language_translation
            };
            sessionStorage.setItem('selectedCategoryForDictation', JSON.stringify(currentCategoryData));

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–∑–∏—Ü–∏—è –≤ –¥–µ—Ä–µ–≤–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            window.location.href = '/';
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞:', result);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            hideLoadingIndicator();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + error.message);
        hideLoadingIndicator();
    }
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ò–ö–¢–ê–ù–¢–ê
// ============================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 */
function getSpeakersFromTable() {
    const speakers = {};
    const speakerInputs = document.querySelectorAll('.speaker-name');
    speakerInputs.forEach((input, index) => {
        const speakerId = (index + 1).toString();
        const speakerName = input.value.trim() || `–°–ø–∏–∫–µ—Ä ${speakerId}`;
        speakers[speakerId] = speakerName;
    });
    return speakers;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 */
function generateAudioFileName(key, language, tipe_audio = 'avto') {
    return `${key}_${language}_${tipe_audio}.mp3`;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
 */
async function autoTranslate(text, fromLanguage, toLanguage) {
    try {
        const response = await fetch('/translate_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                text: text,
                from_language: fromLanguage,
                to_language: toLanguage
            })
        });

        if (response.ok) {
            const result = await response.json();
            return result.translated_text || text;
        } else {
            console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç');
            return text;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
        return text;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
async function generateAudioForSentence(sentence, language) {
    if (!sentence.text.trim()) return null;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let filename = sentence.audio;
    if (!filename) {
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞ –∏ —è–∑—ã–∫–∞
        const key = sentence.key || '000';
        filename = `${key}_${language}_avto.mp3`;
    }

    try {
        const response = await fetch('/generate_audio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                text: sentence.text,
                language: language,
                filename: filename,
                filename_audio: filename,
                tipe_audio: 'avto',
                dictation_id: currentDictation.id,
                safe_email: currentDictation.safe_email
            })
        });

        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${filename}`);
            return result.filename || filename; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        } else {
            const errorText = await response.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è ${filename}: ${response.status} ${errorText}`);
            return null;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, error);
        return null;
    }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
 */
async function parseInputText(text, delimiter, isDialog, speakers) {
    // –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);

    if (lines.length === 0) {
        return { original: [], translation: [] };
    }

    const language_original = currentDictation.language_original;
    const language_translation = currentDictation.language_translation;
    const original = [];
    const translation = [];
    let key_i = 0; // –∏–Ω–¥–µ–∫—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
    let i_next = 0; // –∏–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É —ç /* —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ —Ç–µ—Ä–µ–±–∞ 
    let original_line = "";
    let translation_line = "";
    let translation_mistake = [];
    for (let i = 0; i < lines.length; i++) {
        // !!! –¥–∏–≤–∏–º–æ—Å—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ —ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫

        // –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        original_line = lines[i];
        if (original_line.startsWith(delimiter)) {
            // –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ 
            // –∞–ª–µ –∑–±–µ—Ä–µ–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É –±–µ–∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
            translation_mistake.push({
                id: i,
                text: original_line,
            });
            continue;
        }

        const key = key_i.toString().padStart(3, '0'); // –∫–ª—é—á –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è);
        key_i++; // –Ω–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è
        const audio_originalFileName = generateAudioFileName(key, language_original);
        const audio_translationFileName = generateAudioFileName(key, language_translation);

        const s_original = {
            key: key,
            speaker: '1',
            text: original_line,
            audio: audio_originalFileName, //–∞—É–¥–∏–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –¥–∏–∫—Ç–∞–Ω—Ç–µ! –ò—Ç–æ–≥–æ–≤–æ–µ
            audio_avto: audio_originalFileName, // –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            audio_user: '', // –æ—Ç—Ä–µ–∑–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫
            audio_user_shared: '', // –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
            start: 0,
            end: 0,
            chain: false
        };
        // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        await generateAudioForSentence(s_original, language_original);
        original.push(s_original);

        // –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ - –ø–µ—Ä–µ–∫–ª–∞–¥
        i_next = i + 1; // —ñ–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É —ç /* —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ —Ç–µ—Ä–µ–±–∞ 
        translation_line = "";
        if (i_next < lines.length) {
            if (lines[i_next].startsWith(delimiter)) {
                // –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –±–µ—Ä–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ
                translation_line = lines[i_next].substring(2).trim(); // —É–¥–∞–ª–∏—Ç—å /*;
                i++;
            }
            else {
                // –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ–º–∞—î, —Ä–æ–±–∏–º–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥
                translation_line = await autoTranslate(original_line, language_original, language_translation);
            }
        } else {
            // –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ —ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ–º–∞—î, —Ä–æ–±–∏–º–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥
            translation_line = await autoTranslate(original_line, language_original, language_translation);
        }

        const s_translation = {
            key: key,
            speaker: '1',
            text: translation_line,
            audio: audio_translationFileName,
            audio_avto: audio_translationFileName, // –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
            audio_user: '', // –æ—Ç—Ä–µ–∑–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫
            audio_user_shared: '', // –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
            start: 0,
            end: 0,
            chain: false
        };
        // –≥–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        await generateAudioForSentence(s_translation, language_translation);
        translation.push(s_translation);

    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    if (translation_mistake.length > 0) {
        let message = `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ–∫—Å—Ç–∞:\n`;
        translation_mistake.forEach(item => {
            message += `–°—Ç—Ä–æ–∫–∞ ${item.id + 1}: ${item.text}\n`;
        });
        message += `\n–≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;
        alert(message);
    }

    if (isDialog) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        const speakerIds = Object.keys(speakers);
        const speakerNumbers = speakerIds.map(id => id + ':');
        const linesWithoutSpeakers = [];
        let currentSpeakerIndex = 0;

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É original –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤
        for (let i = 0; i < original.length; i++) {
            const sentence = original[i];
            const text = sentence.text;
            let speakerId = null;
            let cleanText = text;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞ (1:, 2:, –∏ —Ç.–¥.)
            const speakerMatch = text.match(/^(\d+):\s*(.+)$/);
            if (speakerMatch) {
                const foundSpeakerId = speakerMatch[1];
                cleanText = speakerMatch[2].trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–ø–∏–∫–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ
                if (speakers[foundSpeakerId]) {
                    speakerId = foundSpeakerId;
                    sentence.text = cleanText; // –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                }
            }

            // –ï—Å–ª–∏ —Å–ø–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤
            if (!speakerId) {
                linesWithoutSpeakers.push({
                    index: i + 1,
                    text: text
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º speaker –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            sentence.speaker = speakerId;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–ø–∏–∫–µ—Ä–æ–≤
        if (linesWithoutSpeakers.length > 0) {
            let message = `–í —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ø–∏–∫–µ—Ä:\n`;
            linesWithoutSpeakers.forEach(item => {
                message += `${item.index}. ${item.text}\n`;
            });

            if (linesWithoutSpeakers.length === original.length) {
                // –ï—Å–ª–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤, —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –∫—Ä—É–≥—É
                message += `\n–°–ø–∏–∫–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–ª–∏–∫–∏!`;

                for (let i = 0; i < original.length; i++) {
                    const speakerId = speakerIds[currentSpeakerIndex % speakerIds.length];
                    original[i].speaker = speakerId;
                    currentSpeakerIndex++;
                }
            } else {
                // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
                message += `\n–í —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä "1".`;

                linesWithoutSpeakers.forEach(item => {
                    const index = item.index - 1; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
                    if (original[index]) {
                        original[index].speaker = '1';
                    }
                });
            }

            alert(message);
        }
    }


    return { original, translation };
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ
 */
function showSpeakersInHeader(speakers) {
    const speakersDisplay = document.getElementById('speakersDisplay');
    const speakersList = document.getElementById('speakersList');

    if (speakersDisplay && speakersList) {
        speakersDisplay.style.display = 'block';
        speakersList.innerHTML = '';

        Object.entries(speakers).forEach(([id, name]) => {
            const span = document.createElement('span');
            span.className = 'speaker-badge';
            span.textContent = `${id}: ${name}`;
            span.style.backgroundColor = getSpeakerColor(id);
            speakersList.appendChild(span);
        });
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
 */
function getSpeakerColor(speakerId) {
    const colors = ['#ff9999', '#99ff99', '#9999ff', '#ffff99', '#ff99ff', '#99ffff'];
    const index = parseInt(speakerId) - 1;
    return colors[index % colors.length];
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
function createTable() {
    const tbody = document.querySelector('#sentences-table tbody');
    if (!tbody) return;

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å–ø–∏–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const speakerCol = document.querySelector('.col-speaker');
    if (speakerCol) {
        speakerCol.style.display = currentDictation.is_dialog ? 'table-cell' : 'none';
    }

    // –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const originalSentences = workingData.original.sentences || [];
    const translationSentences = workingData.translation.sentences || [];

    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á–∞–º
    const allKeys = new Set();
    originalSentences.forEach(s => allKeys.add(s.key));
    translationSentences.forEach(s => allKeys.add(s.key));

    Array.from(allKeys).sort().forEach(key => {
        const originalSentence = originalSentences.find(s => s.key === key);
        const translationSentence = translationSentences.find(s => s.key === key);

        const row = createTableRow(key, originalSentence, translationSentence);
        tbody.appendChild(row);
    });

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
 */
function createTableRow(key, originalSentence, translationSentence) {
    const row = document.createElement('tr');
    row.dataset.key = key;
    row.className = 'sentence-row';

    // –ö–æ–ª–æ–Ω–∫–∞ 0: ‚Ññ
    const numberCell = document.createElement('td');
    numberCell.className = 'col-number';
    numberCell.textContent = parseInt(key) + 1;
    row.appendChild(numberCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 1: –°–ø–∏–∫–µ—Ä (–µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥)
    if (currentDictation.is_dialog) {
        const speakerCell = document.createElement('td');
        speakerCell.className = 'col-speaker';
        if (originalSentence && originalSentence.speaker) {
            const speakerName = currentDictation.speakers[originalSentence.speaker] || originalSentence.speaker;
            speakerCell.textContent = speakerName;
            speakerCell.style.backgroundColor = getSpeakerColor(originalSentence.speaker);
        }
        row.appendChild(speakerCell);
    }

    // –ö–æ–ª–æ–Ω–∫–∞ 2: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalCell = document.createElement('td');
    originalCell.className = 'col-original panel-original';
    if (originalSentence) {
        const textarea = document.createElement('textarea');
        textarea.value = originalSentence.text || '';
        textarea.className = 'sentence-text';
        textarea.dataset.key = key;
        textarea.dataset.type = 'original';

        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        textarea.addEventListener('input', function () {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            if (originalSentence) {
                originalSentence.text = textarea.value;
            }

            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
            const audioBtn = row.querySelector('.col-audio .audio-btn[data-language="' + currentDictation.language_original + '"]');
            if (audioBtn) {
                audioBtn.dataset.create = 'true';
                audioBtn.title = '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
                setButtonState(audioBtn, 'ready');
            }
        });

        originalCell.appendChild(textarea);
    }
    row.appendChild(originalCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 3: –ê—É–¥–∏–æ –û—Ä–∏–≥—ñ–Ω–∞–ª
    const audioCellOriginal = document.createElement('td');
    audioCellOriginal.className = 'col-audio panel-original';
    // –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    const audioBtnOriginal = document.createElement('button');
    audioBtnOriginal.className = 'audio-btn state-ready';
    audioBtnOriginal.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginal.dataset.language = currentDictation.language_original;
    audioBtnOriginal.dataset.fieldName = 'audio';
    audioBtnOriginal.dataset.create === 'folse';
    state = (!originalSentence || !originalSentence.audio) ? 'creating' : 'ready';
    setButtonState(audioBtnOriginal, state);
    audioBtnOriginal.title = (!originalSentence || !originalSentence.audio) ? '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginal.addEventListener('click', handleAudioPlayback);
    audioCellOriginal.appendChild(audioBtnOriginal);
    row.appendChild(audioCellOriginal);

    // –ö–æ–ª–æ–Ω–∫–∞ 4: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞—É–¥–∏–æ
    const audioSettingsCell = document.createElement('td');
    audioSettingsCell.className = 'col-audio-settings panel-original';
    audioSettingsCell.style.backgroundColor = 'var(--color-hover)';
    audioSettingsCell.style.padding = '0';
    // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç
    const audioSettingsBtn = document.createElement('button');
    audioSettingsBtn.className = 'audio-settings-btn';
    audioSettingsBtn.innerHTML = ''; // –ë–µ–∑ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞
    audioSettingsBtn.title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ';
    audioSettingsBtn.style.width = '100%';
    audioSettingsBtn.style.height = '100%';
    audioSettingsBtn.style.background = 'transparent';
    audioSettingsBtn.style.border = 'none';
    audioSettingsBtn.style.cursor = 'pointer';
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    audioSettingsBtn.addEventListener('click', (e) => {
        console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', key);
        e.preventDefault();
        e.stopPropagation();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–≥–æ
        const table = document.getElementById('sentences-table');
        console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ —Å—Ç—Ä–æ–∫–∏):', table.className);
        
        if (table.classList.contains('state-original-translation')) {
            console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-editing (–∏–∑ —Å—Ç—Ä–æ–∫–∏)');
            toggleColumnGroup('original');
        } else {
            console.log('‚û°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ original-translation (–∏–∑ —Å—Ç—Ä–æ–∫–∏)');
            toggleColumnGroup('translation');
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        console.log('üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É–¥–∏–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', key);
        openAudioSettingsPanel('original', key);
    });
    audioSettingsCell.appendChild(audioSettingsBtn);
    row.appendChild(audioSettingsCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 5: –ü–µ—Ä–µ–≤–æ–¥
    const translationCell = document.createElement('td');
    translationCell.className = 'col-translation panel-translation';
    if (translationSentence) {
        const textarea = document.createElement('textarea');
        textarea.value = translationSentence.text || '';
        textarea.className = 'sentence-text';
        textarea.dataset.key = key;
        textarea.dataset.type = 'translation';
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        textarea.addEventListener('input', function () {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
            if (translationSentence) {
                translationSentence.text = textarea.value;
            }
            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            setTimeout(() => {
                const audioBtn = row.querySelector('.col-audio .audio-btn[data-language="' + currentDictation.language_translation + '"]');
                if (audioBtn) {
                    audioBtn.dataset.create = 'true';
                    audioBtn.title = '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞';
                    setButtonState(audioBtn, 'ready');
                }
            }, 0);
        });
        translationCell.appendChild(textarea);
    }
    row.appendChild(translationCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 6: –ê—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    const audioCell = document.createElement('td');
    audioCell.className = 'col-audio panel-translation';
    // –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnTranslation = document.createElement('button');
    audioBtnTranslation.className = 'audio-btn state-ready';
    audioBtnTranslation.innerHTML = '<i data-lucide="play"></i>';
    audioBtnTranslation.dataset.language = currentDictation.language_translation;
    audioBtnTranslation.dataset.fieldName = 'audio';
    audioBtnTranslation.dataset.create === 'folse';
    state = (!translationSentence || !translationSentence.audio) ? 'creating' : 'ready';
    setButtonState(audioBtnTranslation, state);
    audioBtnTranslation.title = (!translationSentence || !translationSentence.audio) ? '–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞';
    audioBtnTranslation.addEventListener('click', handleAudioPlayback);
    audioCell.appendChild(audioBtnTranslation);
    row.appendChild(audioCell);

 
    // –ë–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
    // –ö–æ–ª–æ–Ω–∫–∞ –ë1: –ê—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ (–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS)
    const generateTtsCell = document.createElement('td');
    generateTtsCell.className = 'col-generate-tts panel-editing';
    // generateTtsCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // –∫–Ω–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnOriginalAvto = document.createElement('button');
    audioBtnOriginalAvto.className = 'audio-btn state-ready';
    audioBtnOriginalAvto.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginalAvto.dataset.language = currentDictation.language_original;
    audioBtnOriginalAvto.dataset.fieldName = 'audio_avto';
    audioBtnOriginalAvto.dataset.create === 'folse';
    state = (!originalSentence || !originalSentence.audio_avto) ? 'creating' : 'ready';
    setButtonState(audioBtnOriginalAvto, state);
    audioBtnOriginalAvto.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginalAvto.addEventListener('click', handleAudioPlayback);
    generateTtsCell.appendChild(audioBtnOriginalAvto);
    row.appendChild(generateTtsCell);

    // –ö–æ–ª–æ–Ω–∫–∞  –ë2: –ü—Ä–∏–º–µ–Ω–∏—Ç—å audio_avto
    const applyCellAvto = document.createElement('td');
    applyCellAvto.className = 'col-apply-avto panel-editing';
    // applyCellAvto.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    applyCellAvto.innerHTML = '<i data-lucide="arrow-big-left-dash"></i>';
    applyCellAvto.title = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥';
    row.appendChild(applyCellAvto);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë3: ‚úîÔ∏è (—á–µ–∫–±–æ–∫—Å)
    const checkboxCell = document.createElement('td');
    checkboxCell.className = 'col-checkbox panel-editing';
    // checkboxCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    checkboxCell.innerHTML = '<i data-lucide="check"></i>';
    row.appendChild(checkboxCell);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë4: –§–∞–π–ª
    const audioFileCell = document.createElement('td');
    audioFileCell.className = 'col-audio-file panel-editing';
    // audioFileCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    audioFileCell.textContent = originalSentence.audio_user_shared;
    row.appendChild(audioFileCell);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë5: Start
    const startCell = document.createElement('td');
    startCell.className = 'col-start panel-editing';
    // startCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    startCell.textContent = originalSentence.start;
    row.appendChild(startCell);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë6: End
    const endCell = document.createElement('td');
    endCell.className = 'col-end panel-editing';
    // endCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    endCell.textContent = originalSentence.end;
    row.appendChild(endCell);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë7: üîó (—Ü–µ–ø–æ—á–∫–∞)
    const chainCell = document.createElement('td');
    chainCell.className = 'col-chain panel-editing';
    // chainCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    chainCell.innerHTML = originalSentence.chain ? '<i data-lucide="link"></i>' : '<i data-lucide="unlink"></i>';
    row.appendChild(chainCell);

    // // –ö–æ–ª–æ–Ω–∫–∞ –ë8: –°-—Ç—å (—Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ)
    // const createAudioCell = document.createElement('td');
    // createAudioCell.className = 'col-create-audio';
    // // createAudioCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // createAudioCell.textContent = '–°-—Ç—å';
    // row.appendChild(createAudioCell);

    // –ö–æ–ª–æ–Ω–∫–∞ –ë8: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
    const playAudioUserCell = document.createElement('td');
    playAudioUserCell.className = 'col-play-audio panel-editing';
    // playAudioCell.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    // –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    const audioBtnOriginalUser = document.createElement('button');
    audioBtnOriginalUser.className = 'audio-btn state-ready';
    audioBtnOriginalUser.innerHTML = '<i data-lucide="play"></i>';
    audioBtnOriginalUser.dataset.language = currentDictation.language_original;
    audioBtnOriginalUser.dataset.fieldName = 'audio_user';
    audioBtnOriginalUser.dataset.create === 'folse';
    state = (!originalSentence || !originalSentence.audio_user) ? 'creating' : 'ready';
    setButtonState(audioBtnOriginalUser, state);
    audioBtnOriginalUser.title = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞';
    audioBtnOriginalUser.addEventListener('click', handleAudioPlayback);
    playAudioUserCell.appendChild(audioBtnOriginalUser);
    row.appendChild(playAudioUserCell);

    // –ö–æ–ª–æ–Ω–∫–∞  –ë9: –ü—Ä–∏–º–µ–Ω–∏—Ç—å audio_user
    const applyCellUser = document.createElement('td');
    applyCellUser.className = 'col-apply-user panel-editing';
    // applyCellUser.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
    applyCellUser.innerHTML = '<i data-lucide="arrow-big-left-dash"></i>';
    applyCellUser.title = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥';
    row.appendChild(applyCellUser);

    return row;
}

// ==================== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è =====================

function setupTitleTranslationHandler() {
    const titleInput = document.getElementById('title');
    const translationTitleInput = document.getElementById('title_translation');

    console.log('üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è:', {
        titleInput: !!titleInput,
        translationTitleInput: !!translationTitleInput
    });

    if (!titleInput) {
        console.log('‚ùå –ü–æ–ª–µ title –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    if (!translationTitleInput) {
        console.log('‚ùå –ü–æ–ª–µ title_translation –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ Enter
    titleInput.addEventListener('keydown', async function (event) {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        if (event.key === 'Enter') {
            event.preventDefault();

            const originalTitle = titleInput.value.trim();
            console.log('üîÑ Enter –Ω–∞–∂–∞—Ç –≤ –ø–æ–ª–µ title:', originalTitle);

            if (!originalTitle || !translationTitleInput) {
                console.log('‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                return;
            }

            try {
                console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥:', {
                    text: originalTitle,
                    source_lang: currentDictation.language_original,
                    target_lang: currentDictation.language_translation
                });

                const response = await fetch('/translate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        text: originalTitle,
                        source_lang: currentDictation.language_original,
                        target_lang: currentDictation.language_translation
                    })
                });

                console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.ok);

                if (response.ok) {
                    const result = await response.json();
                    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:', result);

                    if (result.translation) {
                        translationTitleInput.value = result.translation;
                        console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–æ–ª–µ:', result.translation);
                        // –û–±–Ω–æ–≤–ª—è–µ–º title –≤ workingData –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                        updateTitlesInWorkingData();
                    } else {
                        console.log('‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', error);
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workingData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    titleInput.addEventListener('input', updateTitlesInWorkingData);
    if (translationTitleInput) {
        translationTitleInput.addEventListener('input', updateTitlesInWorkingData);
    }

    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ Enter –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

function updateTitlesInWorkingData() {
    const titleInput = document.getElementById('title');
    const translationTitleInput = document.getElementById('title_translation');

    if (!titleInput || !workingData) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if (workingData.original) {
        workingData.original.title = titleInput.value || '–î–∏–∫—Ç–∞–Ω—Ç';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–ª—è —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    if (workingData.translation && translationTitleInput) {
        workingData.translation.title = translationTitleInput.value || '–ü–µ—Ä–µ–≤–æ–¥';
    }
}

// ============================================================================
// –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –°–¢–ê–†–¢–û–í–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û
// ===========================================================================
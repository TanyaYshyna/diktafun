class UserManager {
  constructor() {
    if (window.UM) {
      // console.warn('‚ö†Ô∏è UserManager —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä');
      return window.UM;
    }

    this.token = localStorage.getItem('jwt_token');
    this.userData = null;
    this.isInitialized = false;


    // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    this.init().then(() => {
      // console.log('‚úÖ UserManager –∞–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    });
  }

  getSafeEmail() {
    if (this.userData && this.userData.email) {
      return this.userData.email.replace('@', '_at_').replace('.', '_dot_');
    }
    return 'anonymous';
  }

  isAuthenticated() {
    return !!this.userData;
  }

  getCurrentUser() {
    return this.userData;
  }
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async init() {
    try {
      // console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserManager, —Ç–æ–∫–µ–Ω:', this.token);

      if (this.token) {
        this.userData = await this.validateToken(this.token);

        if (this.userData) {
          // console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', this.userData.username);
          this.setupAuthenticatedUser(this.userData);
        } else {
          // console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—á–∏—â–∞–µ–º');
          localStorage.removeItem('jwt_token');
          this.token = null;
          this.setupGuestMode();
        }
      } else {
        // console.log('üë§ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
        this.setupGuestMode();
      }

      this.setupAuthHandlers();
      this.isInitialized = true;
      // console.log('‚úÖ UserManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      this.setupGuestMode();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∞
  getAvatarUrl(size = 'small') {

    if (!this.userData?.avatar) {
      return null;
    }

    // avatar - –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ large –∏ small
    const avatarUrl = this.userData.avatar[size];

    return avatarUrl || null;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
  async validateToken(token) {
    try {
      // console.log('üîê –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞:', token);

      const response = await fetch('/user/api/me', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      // console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

      if (response.ok) {
        const userData = await response.json();
        // console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
        return userData;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å:', response.status);
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        try {
          const errorText = await response.text();
          console.log('üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
        } catch (e) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
        }
        return null;
      }
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return null;
    }
  }

  // –í—ã—Ö–æ–¥
  logout() {
    localStorage.removeItem('jwt_token');
    // console.log('‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ 2 ‚úÖtoken  –í—ã—Ö–æ–¥', this.token);
    this.token = null;
    this.userData = null;
    this.setupGuestMode();
    window.location.href = '/';
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setupAuthenticatedUser(userData) {
    const userSection = document.getElementById('user-section');
    if (!userSection) {
      console.error('‚ùå user-section –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
      return;
    }

    // console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫–∏
    const authButtons = userSection.querySelector('.auth-buttons');
    const userInfo = userSection.querySelector('.user-info');
    const usernameElement = userSection.querySelector('.username-text');
    const avatarElement = userSection.querySelector('.user-avatar-small');
    const streakElement = userSection.querySelector('.streak-days');

    // console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
    //   authButtons,
    //   userInfo,
    //   usernameElement,
    //   avatarElement,
    //   streakElement
    // });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (usernameElement) {
      usernameElement.textContent = userData.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    // –ê–≤–∞—Ç–∞—Ä
    if (avatarElement && userData.avatar) {
      const avatarUrl = this.getAvatarUrl('small');

      if (avatarUrl) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const avatarUrlWithTimestamp = `${avatarUrl}&t=${Date.now()}`;
        avatarElement.style.backgroundImage = `url(${avatarUrlWithTimestamp})`;
        avatarElement.style.backgroundSize = 'cover';
        avatarElement.style.backgroundPosition = 'center';
        avatarElement.style.width = '32px';
        avatarElement.style.height = '32px';
        avatarElement.style.borderRadius = '50%';
        avatarElement.style.display = 'block';
      } else {
        console.warn('‚ö†Ô∏è URL –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        avatarElement.style.backgroundImage = 'url(/static/icons/default-avatar-small.svg)';
      }
    }

    // Streak
    if (streakElement) {
      streakElement.textContent = userData.streak_days || 0;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –±–ª–æ–∫–æ–≤
    if (authButtons) authButtons.style.display = 'none';
    if (userInfo) userInfo.style.display = 'flex';

    // console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  // –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
  setupGuestMode() {
    const userSection = document.getElementById('user-section');
    if (!userSection) {
      console.error('‚ùå user-section –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
      return;
    }

    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞');

    const authButtons = userSection.querySelector('.auth-buttons');
    const userInfo = userSection.querySelector('.user-info');

    if (authButtons) authButtons.style.display = 'flex';
    if (userInfo) userInfo.style.display = 'none';

    // console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≥–æ—Å—Ç—è');
  }



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  setupAuthHandlers() {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const logoutBtn = document.getElementById('logoutBtn');

    if (loginBtn) {
      loginBtn.addEventListener('click', () => {
        window.location.href = 'user/login';
      });
    }

    if (registerBtn) {
      registerBtn.addEventListener('click', () => {
        window.location.href = 'user/register';
      });
    }

    if (logoutBtn) {
      logoutBtn.addEventListener('click', () => this.logout());
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async saveProgress(progressData) {
    try {
      if (!this.token) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return false;
      }

      const response = await fetch('/api/progress/save', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(progressData)
      });

      if (response.ok) {
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return true;
      }
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async loadProgress() {
    try {
      if (!this.token) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return null;
      }

      const response = await fetch('/api/progress/load', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        return await response.json();
      }
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      return null;
    }
  }

  async login(email, password) {
    try {
      console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å ' + email);

      const response = await fetch('/user/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
      });

      // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
      const data = await response.json();
      console.log('üîê –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (response.ok) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º access_token –≤–º–µ—Å—Ç–æ token
        const token = data.access_token;
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω:', token);

        localStorage.setItem('jwt_token', token);
        this.token = token;
        this.userData = data.user;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.setupAuthenticatedUser(this.userData);

        return { success: true, user: this.userData };
      } else {
        return { success: false, error: data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      return { success: false, error: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞' };
    }
  }


  async register(username, email, password) {
    try {
      const response = await fetch('/user/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, email, password })
      });

      // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
      const data = await response.json();

      if (response.ok) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º access_token –≤–º–µ—Å—Ç–æ token
        const token = data.access_token;
        localStorage.setItem('jwt_token', token);
        this.token = token;
        this.userData = data.user;

        this.setupAuthenticatedUser(this.userData);
        return { success: true, user: this.userData };
      } else {
        return { success: false, error: data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return { success: false, error: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞' };
    }
  }

  async updateProfile(updateData) {
    try {
      const response = await fetch('/user/api/profile', {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updateData)
      });

      if (response.ok) {
        const updatedUser = await response.json();
        this.userData = updatedUser.user;
        return updatedUser.user;
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }

}



if (!window.UM) {
  window.UM = new UserManager();
}
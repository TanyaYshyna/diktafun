/*
UserManager - –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω—ã
–§–∞–π–ª: static/js/user_manager.js

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω—ã (Bearer authentication)
- –•—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω –≤ localStorage
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
- –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const UM = new UserManager({ apiBase: '/user/api' });
await UM.init();
await UM.login('test@example.com', 'password');
*/

class UserManager {
  constructor(options = {}) {
    this.apiBase = options.apiBase || '/user/api';
    this.tokenKey = options.tokenKey || 'auth_token';
    this.currentUser = null;
    this.authToken = localStorage.getItem(this.tokenKey);
    this.onChangeCallbacks = [];

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.onChange((user) => {
      this.updateUI();
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async init() {
    if (this.authToken) {
      try {
        await this.fetchCurrentUser();
        this._updateGlobalUserData();
      } catch (error) {
        console.warn('Invalid token, clearing storage:', error);
        this.logout();
      }
    }
    this._emitChange();
    return this.currentUser;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
  async fetchCurrentUser() {
    try {
      const response = await this._apiFetch('/me');
      this.currentUser = response;
      return this.currentUser;
    } catch (error) {
      console.error('Failed to fetch current user:', error);
      throw error;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(userData) {
    const { email, password, username, native_language = 'ru', learning_languages = ['en'] } = userData;

    if (!email || !password || !username) {
      throw new Error('Email, password –∏ username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const response = await this._apiFetch('/register', {
      method: 'POST',
      body: {
        email,
        password,
        username,
        native_language,
        learning_languages
      }
    });

    this._handleAuthResponse(response);
    this._updateGlobalUserData();
    return this.currentUser;
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(email, password) {
    if (!email || !password) {
      throw new Error('Email –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const response = await this._apiFetch('/login', {
      method: 'POST',
      body: { email, password }
    });

    this._handleAuthResponse(response);
    this._updateGlobalUserData();
    return this.currentUser;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  logout() {
    this.currentUser = null;
    this.authToken = null;
    localStorage.removeItem(this.tokenKey);
    this._updateGlobalUserData();
    this._emitChange();

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    window.location.href = '/user/login';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated() {
    return !!this.currentUser && !!this.authToken;
  }

  // ---------------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----------------------------------
  async updateProfile(updates) {
    if (!this.isAuthenticated()) {
      throw new Error('Not authenticated');
    }

    const response = await this._apiFetch('/profile', {
      method: 'PUT',
      body: updates
    });

    this.currentUser = { ...this.currentUser, ...response };
    this._updateGlobalUserData();
    this._emitChange();
    return this.currentUser;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  async uploadAvatar(file) {
    if (!file) throw new Error('No file provided');
    if (!this.isAuthenticated()) throw new Error('Not authenticated');

    const formData = new FormData();
    formData.append('avatar', file);

    const response = await this._apiFetch('/avatar', {
      method: 'POST',
      formData: formData
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤–∞—Ç–∞—Ä–µ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (response.avatar_urls) {
      this.currentUser.avatar = response.avatar_urls;
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await this.fetchCurrentUser();

    this._emitChange();
    return response;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∞–≤–∞—Ç–∞—Ä–∞
  getAvatarUrl(size = 'medium') {
    if (!this.currentUser || !this.currentUser.avatar) {
      return null;
    }
    return this.currentUser.avatar[size] || this.currentUser.avatar.medium || this.currentUser.avatar.original;
  }

  // ----------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ -----------------------

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  _updateGlobalUserData() {
    if (this.isAuthenticated()) {
      window.USER_LANGUAGE_DATA = {
        nativeLanguage: this.currentUser.native_language || 'ru',
        learningLanguages: this.currentUser.learning_languages || ['en'],
        currentLearning: this.currentUser.current_learning || this.currentUser.learning_languages?.[0] || 'en'
      };
    } else {
      window.USER_LANGUAGE_DATA = {
        nativeLanguage: 'ru',
        learningLanguages: ['en'],
        currentLearning: 'en'
      };
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this._emitLanguageChange();
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  _emitLanguageChange() {
    if (window.onUserLanguageChange) {
      window.onUserLanguageChange(window.USER_LANGUAGE_DATA);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  _handleAuthResponse(response) {
    if (response.access_token && response.user) {
      this.authToken = response.access_token;
      this.currentUser = response.user;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      localStorage.setItem(this.tokenKey, this.authToken);
      this._emitChange();
    } else {
      throw new Error('Invalid auth response: missing token or user data');
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  async _apiFetch(path, options = {}) {
    const url = this.apiBase + path;
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.authToken) {
      headers['Authorization'] = `Bearer ${this.authToken}`;
    }

    const config = {
      method: options.method || 'GET',
      headers: headers
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
    if (options.formData) {
      config.body = options.formData;
      // –£–±–∏—Ä–∞–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary
      delete config.headers['Content-Type'];
    } else if (options.body) {
      config.body = JSON.stringify(options.body);
    }

    const response = await fetch(url, config);

    if (!response.ok) {
      let errorMessage = `HTTP ${response.status}`;
      try {
        const errorData = await response.json();
        errorMessage = errorData.error || errorData.message || errorMessage;
      } catch (e) {
        const text = await response.text();
        errorMessage = text || errorMessage;
      }
      throw new Error(errorMessage);
    }

    // –î–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ç–µ–ª–∞
    if (response.status === 204 || response.headers.get('content-length') === '0') {
      return null;
    }

    return await response.json();
  }

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  _emitChange() {
    this.onChangeCallbacks.forEach(cb => {
      try {
        cb(this.currentUser);
      } catch (e) {
        console.error('Error in onChange callback:', e);
      }
    });
  }

  onChange(callback) {
    if (typeof callback === 'function') {
      this.onChangeCallbacks.push(callback);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
  offChange(callback) {
    const index = this.onChangeCallbacks.indexOf(callback);
    if (index > -1) {
      this.onChangeCallbacks.splice(index, 1);
    }
  }

  updateUI() {
    try {
      const userSection = document.querySelector('.user-section');
      if (!userSection) return;

      if (this.isAuthenticated()) {
        //<div id="header-language-selector"></div>
        userSection.innerHTML = `        
        <a href="/user/profile" class="username">${this.currentUser.username}</a>
        <button class="streak">üî• ${this.currentUser.streak_days || 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</button>
        <a href="#" onclick="UM.logout(); return false;">–í—ã–π—Ç–∏</a>
      `;
      } else {
        userSection.innerHTML = `
        <a href="/user/login">–í–æ–π—Ç–∏</a>
        <a href="/user/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
      `;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (window.initializeLanguageSelector) {
        window.initializeLanguageSelector();
      }
    } catch (error) {
      console.error('Error updating UI:', error);
    }
  }


  // –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å UserManager:

  // async updateProfile(updates) {
  //   if (!this.isAuthenticated()) {
  //     throw new Error('Not authenticated');
  //   }

  //   const response = await this._apiFetch('/profile', {
  //     method: 'PUT',
  //     body: updates
  //   });

  //   // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  //   this.currentUser = { ...this.currentUser, ...response.user };
  //   this._emitChange();
  //   return this.currentUser;
  // }

  // async uploadAvatar(file) {
  //   if (!file) throw new Error('No file provided');
  //   if (!this.isAuthenticated()) throw new Error('Not authenticated');

  //   const formData = new FormData();
  //   formData.append('avatar', file);

  //   const response = await this._apiFetch('/avatar', {
  //     method: 'POST',
  //     formData: formData
  //   });

  //   // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤–∞—Ç–∞—Ä–µ
  //   this.currentUser.avatar_uploaded = response.avatar_uploaded;
  //   this._emitChange();
  //   return response;
  // }

  // async getAvatarUrl(size = 'large') {
  //   if (!this.isAuthenticated()) return null;

  //   try {
  //     const response = await this._apiFetch(`/avatar?size=${size}`);
  //     return response.avatar;
  //   } catch (error) {
  //     console.warn('Error loading avatar:', error);
  //     return null;
  //   }
  // }


}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// UserManager.prototype.updateUI = function() {
//   const userSection = document.querySelector('.user-section');
//   if (!userSection) return;

//   if (this.isAuthenticated()) {
//     userSection.innerHTML = `
//       <div id="header-language-selector"></div>
//       <a href="/user/profile" class="username">${this.currentUser.username}</a>
//       <button class="streak">üî• ${this.currentUser.streak_days || 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</button>
//       <a href="#" onclick="UM.logout(); return false;">–í—ã–π—Ç–∏</a>
//     `;
//   } else {
//     userSection.innerHTML = `
//       <a href="/user/login">–í–æ–π—Ç–∏</a>
//       <a href="/user/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
//     `;
//   }
// };

// // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
// UserManager.prototype.onChange(function(user) {
//   this.updateUI();
// }.bind(UserManager.prototype));

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
if (typeof window !== 'undefined') {
  window.UserManager = UserManager;
}




/*
---------------------- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤  –ø—Ä–æ–µ–∫—Ç–µ: ----------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const UM = new UserManager({ apiBase: '/user/api' });

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
await UM.init();

// –ü–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è:
// - window.USER_LANGUAGE_DATA
// - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// - –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

-----------------------------------------------------------------------------------------------
*/

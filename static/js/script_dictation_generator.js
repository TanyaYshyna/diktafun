const userManager = window.UM;
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
const audioPlayers = {};

// –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫ –Ω–µ–º—É
// const modal = document.getElementById('modal');
// const titleField = document.getElementById('modalTitle');

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
let startModal = null; // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
let audioSettingsModal = null; // –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ

let currentAudioFile = null; // —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞—É–¥–∏–æ

let selectedCategory = null;
let currentPath = []; // –¢–µ–∫—É—â–∏–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["–ö–Ω–∏–≥–∞ 2", "–†–∞–∑–¥–µ–ª 1"])
let currentLevel = null; // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

let data = [];
let currentDictation = {
    id: '', // ID —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    isNew: true, // –§–ª–∞–≥ - –Ω–æ–≤—ã–π —ç—Ç–æ –¥–∏–∫—Ç–∞–Ω—Ç –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    safe_email: '',  // –∏–º—è –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –≤ –≤–∏–¥–µ test_at_example_dot_com
    language_original: '',
    language_translation: '',
    category_key: '', // –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    category_title: '', // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_path: '', // –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
    coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
    dictationStartTime: 0, // –Ω–∞—á–∞–ª–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    dictationEndTime: 0, // –∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞
    tableFilled: false, // —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    is_dialog: false, // —Ñ–ª–∞–≥ –¥–∏–∞–ª–æ–≥–∞
    speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
    current_edit_mode: null, // 'original' | 'translation' | null
    current_row_key: null // —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
};

let currentRowIndex = 0;
let sentenceRows = [];
let waveformCanvas = null;
let lastAudioUrl = null;
let currentRegion = null;
let wordPointer = 0; // –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
// –¶–≤–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ WaveformCanvas –∫–ª–∞—Å—Å–µ

let sentences_original = [];
let sentence_translation = [];

let workingData = {
    original: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [] // {key, speaker, text, audio, shared_audio, start, end, chain}
    },
    translation: {
        language: '',
        title: '',
        speakers: {}, // —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏–∫–µ—Ä–æ–≤ {"1": "–¢–∞–Ω—è", "2": "–í–∞–Ω—è"}
        sentences: [] // {key, speaker, text, audio, shared_audio, start, end, chain}
    }
};


// ------------- –î–í–ò–ì–ê–ï–ú –ü–ê–ù–ï–õ–ò –° –ê–£–î–ò–û --------------------------------------------------   
// const resizer = document.querySelector('.resizer');
// const leftPanel = document.querySelector('.left-panel');
// const rightPanel = document.querySelector('.right-panel');
// let isResizing = false;


function setupExitHandlers() {
    const exitModal = document.getElementById('exitModal');
    const confirmExitBtn = document.getElementById('confirmExitBtn');
    const cancelExitBtn = document.getElementById('cancelExitBtn');
    const backButton = document.getElementById('btnBackToMain');

    if (backButton) {
        backButton.addEventListener('click', showExitModal);
    }

    if (confirmExitBtn) {
        confirmExitBtn.addEventListener('click', () => {
            window.location.href = "/";
        });
    }

    if (cancelExitBtn) {
        cancelExitBtn.addEventListener('click', hideExitModal);
    }

    if (exitModal) {
        exitModal.addEventListener('click', (e) => {
            if (e.target === exitModal) {
                hideExitModal();
            }
        });
    }

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && exitModal && exitModal.style.display === 'flex') {
            hideExitModal();
        }
    });
}


function showExitModal() {
    const exitModal = document.getElementById('exitModal');
    if (exitModal) {
        exitModal.style.display = 'flex';
        const cancelBtn = document.getElementById('cancelExitBtn');
        if (cancelBtn) cancelBtn.focus();
    }
}

function hideExitModal() {
    const exitModal = document.getElementById('exitModal');
    if (exitModal) {
        exitModal.style.display = 'none';
    }
}






// ------------- –ö–ù–ò–ì–ò --------------------------------------------------   
// ------------- –ö–ù–ò–ì–ò --------------------------------------------------   
// ------------- –ö–ù–ò–ì–ò --------------------------------------------------   
document.querySelectorAll('.tabs button').forEach(btn => {
    btn.addEventListener('click', () => {
        // —É–±—Ä–∞—Ç—å active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        document.querySelectorAll('.tabs button').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));

        // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        btn.classList.add('active');
        const targetPage = document.getElementById(btn.dataset.target);
        if (targetPage) {
            targetPage.classList.add('active');
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É MP3, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            if (targetPage.id === 'page-audio-mp3-1' && window.pendingAudioUrl) {
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É MP3, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ...');
                setTimeout(() => {
                    loadPendingAudio();
                }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
        }
    });
});

// –°—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.querySelector('.tabs button')?.click();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3 –∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        const mp3Page = document.getElementById('page-audio-mp3-1');
        if (mp3Page && mp3Page.classList.contains('active') && window.pendingAudioUrl) {
            console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ MP3 —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ...');
            loadPendingAudio();
        }
    }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});














// ------------- –î–í–ò–ì–ê–ï–ú –ü–ê–ù–ï–õ–ò –° –ê–£–î–ò–û --------------------------------------------------   
// ------------- –î–í–ò–ì–ê–ï–ú –ü–ê–ù–ï–õ–ò –° –ê–£–î–ò–û --------------------------------------------------   
// ------------- –î–í–ò–ì–ê–ï–ú –ü–ê–ù–ï–õ–ò –° –ê–£–î–ò–û --------------------------------------------------   

// resizer.addEventListener('mousedown', (e) => {
//     isResizing = true;
//     document.body.style.cursor = 'col-resize';
// });

// document.addEventListener('mousemove', (e) => {
//     if (!isResizing) return;

//     let containerOffsetLeft = resizer.parentNode.offsetLeft;
//     let pointerRelativeXpos = e.clientX - containerOffsetLeft;

//     let containerWidth = resizer.parentNode.offsetWidth;
//     let leftWidth = (pointerRelativeXpos / containerWidth) * 100;
//     let rightWidth = 100 - leftWidth;

//     leftPanel.style.flex = `0 0 ${leftWidth}%`;
//     rightPanel.style.flex = `0 0 ${rightWidth}%`;

//     if (waveSurfer) {
//         // –¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω—É
//         requestAnimationFrame(() => {
//             try { waveSurfer.setOptions({}); } catch (e) { }
//         });
//     }
// });

// document.addEventListener('mouseup', () => {
//     isResizing = false;
//     document.body.style.cursor = 'default';
// });

// window.addEventListener('resize', () => {
//     if (waveSurfer) {
//         try { waveSurfer.setOptions({}); } catch (e) { }
//     }
// });

// -------------–ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –°–¢–†–û–ö–ê–ú –¢–ê–ë–õ–ú–¶–´ --------------------------------------------------
let selectedKey = null;

function getTbody() {
    return document.querySelector('#sentences-table tbody');
}

function getTopRows() {
    // –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –ø–æ–ª–æ–≤–∏–Ω–∫–∏, –ø–æ –Ω–∏–º –±—É–¥–µ–º –±–µ–≥–∞—Ç—å ‚Üë/‚Üì
    return Array.from(getTbody().querySelectorAll('tr.sentence-row-top'));
}

function clearSelection() {
    const tb = getTbody();
    tb.querySelectorAll('tr.sentence-row.selected, tr.sentence-row.selected-top, tr.sentence-row.selected-bottom')
        .forEach(tr => {
            tr.classList.remove('selected', 'selected-top', 'selected-bottom');
        });
}

function selectRowByKey(key, { scrollIntoView = true, focusEditable = false } = {}) {
    const tb = getTbody();
    const top = tb.querySelector(`tr.sentence-row-top[data-key="${key}"]`);
    const bottom = tb.querySelector(`tr.sentence-row-bottom[data-key="${key}"]`);
    if (!top || !bottom) return;

    clearSelection();

    top.classList.add('selected', 'selected-top');
    bottom.classList.add('selected', 'selected-bottom');
    selectedKey = key;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const originalText = top.querySelector('.text-original')?.textContent || '';

    const label = document.getElementById('text-original-row');
    if (label) {
        const rowNumber = parseInt(key) + 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "001" –≤ 1 –∏ —Ç.–¥.
        label.textContent = `(${rowNumber}) ${originalText}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏
    const startTime = parseFloat(top.querySelector('.start-time')?.textContent) || 0;
    const endTime = parseFloat(top.querySelector('.end-time')?.textContent) || 0;

    // safeGetElementById('startTime').value = startTime.toFixed(2);
    // safeGetElementById('endTime').value = endTime.toFixed(2);

    // –ï—Å–ª–∏ –µ—Å—Ç—å WaveformCanvas - —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
    if (waveformCanvas) {
        console.log('üéØ –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –≤ WaveformCanvas:', startTime, '-', endTime);
        createSegment(startTime, endTime, key);
    } else {
        console.log('‚ö†Ô∏è WaveformCanvas –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞');
    }

    if (scrollIntoView) {
        // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ
        top.scrollIntoView({ block: 'nearest', inline: 'nearest' });
    }

    if (focusEditable) {
        // –°—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const editable = top.querySelector('.text-original[contenteditable="true"]') ||
            bottom.querySelector('.text-translation[contenteditable="true"]');
        if (editable) {
            // –º–∞–ª–µ–Ω—å–∫–∏–π —Ç—Ä—é–∫, —á—Ç–æ–±—ã —Ñ–æ–∫—É—Å —Ç–æ—á–Ω–æ –≤—Å—Ç–∞–ª
            editable.focus();
            const sel = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(editable);
            range.collapse(false);
            sel.removeAllRanges();
            sel.addRange(range);
        }
    }
}

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–∞–±–ª–∏—Ü–µ: –∫–ª–∏–∫ –ø–æ –ª—é–±–æ–π —è—á–µ–π–∫–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä—É
document.addEventListener('click', (e) => {
    const tr = e.target.closest('#sentences-table tr.sentence-row');
    if (!tr) return;
    const key = tr.dataset.key;
    if (!key) return;
    selectRowByKey(key, { focusEditable: false });
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏ ‚Üë/‚Üì
document.addEventListener('keydown', (e) => {
    if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;

    const rowsTop = getTopRows();
    if (rowsTop.length === 0) return;

    e.preventDefault();

    let idx = 0;
    if (selectedKey) {
        idx = rowsTop.findIndex(r => r.dataset.key === selectedKey);
        if (idx < 0) idx = 0;
    }

    if (e.key === 'ArrowUp') {
        idx = Math.max(0, idx - 1);
    } else if (e.key === 'ArrowDown') {
        idx = Math.min(rowsTop.length - 1, idx + 1);
    }

    const nextKey = rowsTop[idx].dataset.key;
    selectRowByKey(nextKey, { focusEditable: false });
});

// –ü—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ ‚Äî –≤—ã–¥–µ–ª–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
function selectFirstRowIfAny() {
    const rowsTop = getTopRows();
    if (rowsTop.length > 0) {
        selectRowByKey(rowsTop[0].dataset.key, { scrollIntoView: false });
    }
}



//------------------–í–û–õ–ù–ê----------------------------------------------------------------------    
function setupRegionListeners(region) {
    currentRegion = region;
    updateRegionInputs(region);
}

function togglePanel(headerElement) {
    const panel = headerElement.closest('.toggle-panel');
    panel.classList.toggle('open');

    if (panel.classList.contains('open')) {
        // –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π
        requestAnimationFrame(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3
            const mp3Page = document.getElementById('page-audio-mp3');
            const isMp3Page = mp3Page && mp3Page.classList.contains('active');
            
            if (!waveformCanvas && lastAudioUrl && !isMp3Page) {
                // –≤–æ–ª–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º —É–∂–µ –≤ –≤–∏–¥–∏–º–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3)
                initWaveform(lastAudioUrl);
            } else if (waveformCanvas) {
                // –≤–æ–ª–Ω–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî "–ø–æ–¥—Ç–æ–ª–∫–Ω—ë–º" –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
                waveformCanvas.render();
            }
        });
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ--------------------------------------------
function updateCurrentRowTimes(start, end) {
    if (!selectedKey) return;

    const topRow = getTbody().querySelector(`tr.sentence-row-top[data-key="${selectedKey}"]`);
    if (topRow) {
        const startElement = topRow.querySelector('.start-time');
        const endElement = topRow.querySelector('.end-time');

        if (startElement) startElement.textContent = start.toFixed(2);
        if (endElement) endElement.textContent = end.toFixed(2);
    }
}

function updateRegionInputs(region) {
    if (!region) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞
    const duration = waveformCanvas ? waveformCanvas.getDuration() : 0;
    const isValid = region.start >= 0 && 
                   region.end > region.start && 
                   region.end <= duration;
    
    if (!isValid) {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω:', region.start, '-', region.end, '(duration:', duration, ')');
        return;
    }

    // startTime –∏ endTime —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    // const startInput = safeGetElementById('startTime');
    // const endInput = safeGetElementById('endTime');
    // if (startInput) startInput.value = region.start.toFixed(2);
    // if (endInput) endInput.value = region.end.toFixed(2);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    // updateCurrentRowTimes(region.start, region.end); // –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
}

// Event listener –¥–ª—è startTime —É–¥–∞–ª–µ–Ω - —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

// Event listener –¥–ª—è endTime —É–¥–∞–ª–µ–Ω - —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function getElementByIdSafe(id) {
    const element = document.getElementById(id);
    if (!element) {
        console.warn(`Element with id '${id}' not found`);
        return null;
    }
    return element;
}

// –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã getElementById('startTime') –∏ getElementById('endTime')
// –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
function safeGetStartTimeElement() { return null; }
function safeGetEndTimeElement() { return null; }

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
function safeGetElementById(id) {
    if (id === 'startTime' || id === 'endTime') {
        return null;
    }
    return document.getElementById(id);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
function getAudioStartTimeElement() {
    return document.getElementById('audioStartTime');
}

function getAudioEndTimeElement() {
    return document.getElementById('audioEndTime');
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∏–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏ (audioStartTime/audioEndTime) –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ (startTime/endTime)
function syncTimeFields() {
    const audioStart = document.getElementById('audioStartTime');
    const audioEnd = document.getElementById('audioEndTime');
    const startTime = document.getElementById('startTime');
    const endTime = document.getElementById('endTime');
    
    if (audioStart && startTime) {
        audioStart.value = startTime.value;
    }
    if (audioEnd && endTime) {
        audioEnd.value = endTime.value;
    }
}

// –û–±—Ä–∞—Ç–Ω—ã–µ event listeners –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function setupTimeFieldSync() {
    const audioStart = document.getElementById('audioStartTime');
    const audioEnd = document.getElementById('audioEndTime');
    const startTime = document.getElementById('startTime');
    const endTime = document.getElementById('endTime');
    
    if (audioStart && startTime) {
        audioStart.addEventListener('input', () => {
            startTime.value = audioStart.value;
        });
    }
    
    if (audioEnd && endTime) {
        audioEnd.addEventListener('input', () => {
            endTime.value = audioEnd.value;
        });
    }
}

async function initWaveform(audioUrl) {
    if (audioUrl) lastAudioUrl = audioUrl;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º
    const waveformContainer = document.getElementById('waveform');
    if (!waveformContainer) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä waveform –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
    if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
        console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä waveform –Ω–µ –≤–∏–¥–∏–º, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        waveformContainer.style.width = '100%';
        waveformContainer.style.height = '100px';
        waveformContainer.style.minHeight = '100px';
        
        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ –µ—â–µ 0, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            // –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º pendingAudioUrl, –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            return;
        }
    }

    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WaveformCanvas —Å URL:', audioUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WaveformCanvas –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof WaveformCanvas === 'undefined') {
        console.error('‚ùå WaveformCanvas –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return;
    }

    if (waveformCanvas) {
        waveformCanvas.destroy();
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WaveformCanvas
        // –ö–ª–∞—Å—Å —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        waveformCanvas = new WaveformCanvas(waveformContainer);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
        await waveformCanvas.loadAudio(audioUrl);

        console.log('üéâ WaveformCanvas –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');

        // –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ–Ω–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∫—Ç–∞–Ω—Ç–∞
        const duration = waveformCanvas.getDuration();
        console.log('‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ:', duration);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ currentDictation
        if (currentDictation.dictationStartTime && currentDictation.dictationEndTime) {
            const start = currentDictation.dictationStartTime;
            const end = currentDictation.dictationEndTime;
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ currentDictation:', start, '-', end, 'duration =', duration);
            
            // –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            const roundedStart = Math.floor(start * 100) / 100;
            const roundedEnd = Math.floor(end * 100) / 100;
            const roundedDuration = Math.floor(duration * 100) / 100;
            
            if (roundedStart >= 0 && roundedEnd > roundedStart && roundedEnd <= roundedDuration) {
                console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω:', roundedStart, '-', roundedEnd);
                waveformCanvas.setRegion(roundedStart, roundedEnd);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ DOM
                // const startTimeInput = safeGetElementById('startTime');
                // const endTimeInput = safeGetElementById('endTime');
                // if (startTimeInput) startTimeInput.value = roundedStart.toFixed(2);
                // if (endTimeInput) endTimeInput.value = roundedEnd.toFixed(2);
                console.log('‚úÖ –ü–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ currentDictation:', roundedStart.toFixed(2), '-', roundedEnd.toFixed(2));
            } else {
                console.log('‚ö†Ô∏è initWaveform: –í—Ä–µ–º–µ–Ω–∞ –∏–∑ currentDictation –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
            }
        } else {
            console.log('‚ö†Ô∏è initWaveform: –í currentDictation –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω dictationStartTime/dictationEndTime');
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            // –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
            const roundedDuration = Math.floor(duration * 100) / 100;
            console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 -', roundedDuration);
            
            waveformCanvas.setRegion(0, roundedDuration);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ DOM
            // const startTimeInput = safeGetElementById('startTime');
            // const endTimeInput = safeGetElementById('endTime');
            // if (startTimeInput) startTimeInput.value = '0.00';
            // if (endTimeInput) endTimeInput.value = roundedDuration.toFixed(2);
            console.log('‚úÖ –ü–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.00 -', roundedDuration.toFixed(2));
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
        waveformCanvas.onRegionUpdate((region) => {
            // const startTimeInput = safeGetElementById('startTime');
            // const endTimeInput = safeGetElementById('endTime');
            // if (startTimeInput) startTimeInput.value = region.start.toFixed(2);
            // if (endTimeInput) endTimeInput.value = region.end.toFixed(2);
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏
        waveformCanvas.onSeek((time) => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å audio —ç–ª–µ–º–µ–Ω—Ç–æ–º
            console.log('Seek to:', time);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WaveformCanvas:', error);
    }
}

async function loadAudioToCanvas(audioUrl) {
    try {
        console.log('üåä –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ Canvas:', audioUrl);
        
        const response = await fetch(audioUrl);
        const arrayBuffer = await response.arrayBuffer();
        audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        
        console.log('‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', audioBuffer.duration);
        
        // –†–∏—Å—É–µ–º –≤–æ–ª–Ω—É
        drawWaveform();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ endTime —Ä–µ–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞—É–¥–∏–æ
        const duration = audioBuffer.duration;
        if (duration && duration > 0) {
            const endTimeInput = safeGetElementById('endTime');
            if (endTimeInput && (!endTimeInput.value || parseFloat(endTimeInput.value) <= 0)) {
                endTimeInput.value = duration.toFixed(2);
                console.log('‚úÖ –ü–æ–ª–µ endTime –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', endTimeInput.value);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –≤ Canvas:', error);
    }
}

function drawWaveform() {
    if (!canvas || !canvasCtx || !audioBuffer) return;
    
    const width = canvas.width;
    const height = canvas.height;
    const data = audioBuffer.getChannelData(0);
    const step = Math.ceil(data.length / width);
    const amp = height / 2;
    
    canvasCtx.clearRect(0, 0, width, height);
    canvasCtx.fillStyle = '#333';
    canvasCtx.beginPath();
    
    for (let i = 0; i < width; i++) {
        let min = 1.0;
        let max = -1.0;
        
        for (let j = 0; j < step; j++) {
            const datum = data[(i * step) + j];
            if (datum < min) min = datum;
            if (datum > max) max = datum;
        }
        
        canvasCtx.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));
    }
    
    console.log('‚úÖ –í–æ–ª–Ω–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –Ω–∞ Canvas');
}

function drawSelection(startTime, endTime) {
    if (!canvas || !canvasCtx || !audioBuffer) return;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–æ–ª–Ω—É
    drawWaveform();
    
    // –†–∏—Å—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const width = canvas.width;
    const height = canvas.height;
    const duration = audioBuffer.duration;
    
    const startX = (startTime / duration) * width;
    const endX = (endTime / duration) * width;
    
    canvasCtx.fillStyle = 'rgba(255, 212, 0, 0.3)'; // –ñ–µ–ª—Ç–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    canvasCtx.fillRect(startX, 0, endX - startX, height);
    
    // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    canvasCtx.strokeStyle = '#ffd400';
    canvasCtx.lineWidth = 2;
    canvasCtx.beginPath();
    canvasCtx.moveTo(startX, 0);
    canvasCtx.lineTo(startX, height);
    canvasCtx.moveTo(endX, 0);
    canvasCtx.lineTo(endX, height);
    canvasCtx.stroke();
    
    console.log('‚úÖ –í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ:', startTime, '-', endTime);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ WaveformCanvas
function createSegment(startTime, endTime, index) {
    if (!waveformCanvas) {
        console.log('‚ö†Ô∏è createSegment: WaveformCanvas –Ω–µ –≥–æ—Ç–æ–≤');
        return null;
    }

    console.log('üéØ createSegment: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω', startTime, '-', endTime, '–¥–ª—è –∏–Ω–¥–µ–∫—Å–∞', index);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –≤ WaveformCanvas
    waveformCanvas.setRegion(startTime, endTime);

    return { startTime, endTime, index };
}

    // –°—Ç–∞—Ä—ã–π –∫–æ–¥ WaveSurfer —É–¥–∞–ª–µ–Ω

//     // updateCurrentTimesUI(0, 5);

//     waveSurfer.on('error', (error) => {
//         console.error('‚ùå –û—à–∏–±–∫–∞ WaveSurfer:', error);
//     });
    
//     waveSurfer.on('ready', () => {
//         console.log('üéâ WaveSurfer –≥–æ—Ç–æ–≤! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', waveSurfer.getDuration());
        
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∏–¥–∏–º
//         const waveformContainer = document.getElementById('waveform');
//         console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä waveform:', waveformContainer);
//         if (waveformContainer) {
//             console.log('üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', {
//                 width: waveformContainer.offsetWidth,
//                 height: waveformContainer.offsetHeight,
//                 display: getComputedStyle(waveformContainer).display,
//                 visibility: getComputedStyle(waveformContainer).visibility
//             });
            
//             // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã 0, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
//             if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
//                 console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ WaveSurfer...');
//                 setTimeout(() => {
//                     if (waveSurfer) {
//                         waveSurfer.drawBuffer();
//                         console.log('‚úÖ WaveSurfer –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω');
//                     }
//                 }, 100);
//             }
//         }
        
//         const allRegions = waveSurfer.regions.list;
//         const firstRegion = Object.values(allRegions)[0];

//         if (firstRegion) {
//             setupRegionListeners(firstRegion);
//             updateRegionInputs(firstRegion); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
//         }

//         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ endTime —Ä–µ–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞—É–¥–∏–æ
//         const duration = waveSurfer.getDuration();
//         console.log('‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ:', duration);
//         if (duration && duration > 0) {
//             const endTimeInput = safeGetElementById('endTime');
//             if (endTimeInput && (!endTimeInput.value || parseFloat(endTimeInput.value) <= 0)) {
//                 endTimeInput.value = duration.toFixed(2);
//                 console.log('‚úÖ –ü–æ–ª–µ endTime –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', endTimeInput.value);
//             }
//         }

//         // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ª–Ω—ã
//         if (selectedKey) {
//             const top = getTbody().querySelector(`tr.sentence-row-top[data-key="${selectedKey}"]`);
//             if (top) {
//                 const start = parseFloat(top.querySelector('.start-time')?.textContent) || 0;
//                 const end = parseFloat(top.querySelector('.end-time')?.textContent) || waveSurfer.getDuration();
//                 createRegion(start, end, selectedKey);
//             }
//         }

//         // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
//         const activeRow = document.querySelector('.row-active');
//         if (activeRow) {
//             const index = activeRow.dataset.key;
//             const start = parseFloat(activeRow.querySelector('.start-time')?.value || 0);
//             const end = parseFloat(activeRow.querySelector('.end-time')?.value || waveSurfer.getDuration());
//             createRegion(start, end, index);
//         }
//     });

//     waveSurfer.on('region-updated', (region) => {
//         currentRegion = region;
//         updateRegionInputs(region);
//     });

//     waveSurfer.on('region-click', (region, e) => {
//         e.stopPropagation(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω
//         currentRegion = region;
//         updateRegionInputs(region);
//     });

//     waveSurfer.on("region-in", (region) => {
//         currentRegion = region;
//         updateRegionInputs(region);
//     });

//     waveSurfer.on('play', () => {
//         const btn = document.getElementById("playPauseBtn");
//         if (btn) {
//             // btn.textContent = '<i data-lucide="pause"></i>';
//             btn.innerHTML = '<i data-lucide="pause"></i>';
//             lucide.createIcons();;
//         }
//     });

//     waveSurfer.on('pause', () => {
//         const btn = document.getElementById("playPauseBtn");
//         if (btn) {
//             // btn.textContent = '<i data-lucide="play"></i>';
//             btn.innerHTML = '<i data-lucide="play"></i>';
//             lucide.createIcons();;
//         }
//     });

//     waveSurfer.on('finish', () => {
//         const btn = document.getElementById("playPauseBtn");
//         if (btn) {
//             // btn.textContent = '<i data-lucide="play"></i>';
//             btn.innerHTML = '<i data-lucide="play"></i>';
//             lucide.createIcons();;
//         }
//     });

//     waveSurfer.on('audioprocess', (time) => {
//         if (currentRegion && time > currentRegion.end) {
//             waveSurfer.pause();
//         }
//     });
//     // <-- –í–ê–ñ–ù–û! –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
//     if (audioUrl) {
//         waveSurfer.load(audioUrl);
//     }

// }


function handleAudioFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const url = URL.createObjectURL(file);
    initWaveform(url);

}



function setupRegionListeners(region) {
    currentRegion = region;
    updateRegionInputs(region);

    region.on('update-end', () => {
        updateRegionInputs(region);
    });
}

function createRegion(start, end, index) {
    if (!waveformCanvas) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω
    const duration = waveformCanvas.getDuration();
    const isValid = start >= 0 && end > start && end <= duration;
    
    if (!isValid) {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞:', start, '-', end, '(duration:', duration, ')');
        return null;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –≤ WaveformCanvas
    waveformCanvas.setRegion(start, end);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ DOM
    const startTimeInput = safeGetElementById('startTime');
    const endTimeInput = safeGetElementById('endTime');
    if (startTimeInput) startTimeInput.value = start.toFixed(2);
    if (endTimeInput) endTimeInput.value = end.toFixed(2);
    
    console.log('üéØ –°–æ–∑–¥–∞–Ω —Ä–µ–≥–∏–æ–Ω:', start.toFixed(2), '-', end.toFixed(2));
    return { start, end, id: "active_" + index };
}

function updateCurrentTimesUI(start, end) {
    const startSpan = safeGetElementById('startTime');
    const endSpan = safeGetElementById('endTime');

    if (startSpan) startSpan.textContent = start.toFixed(2);
    if (endSpan) endSpan.textContent = end.toFixed(2);
}


//=============================================================================================

function toggleAudioDependentElements(hasAudio) {
    console.log(`toggleAudioDependentElements --------- ` + hasAudio);
    if (hasAudio) {
        document.querySelectorAll('.audio-dependent-column-display').forEach(el => {
            el.style.display = 'table-cell'; // –¥–ª—è <td>
        });
    }
    else {
        document.querySelectorAll('.audio-dependent-column-display').forEach(el => {
            el.style.display = 'none';
        });
    }
}


function onRowClick(index, text) {
    if (!waveformCanvas) return;

    const start = parseFloat(document.querySelector(`.start-time[data-index="${index}"]`)?.value || 0);
    const end = parseFloat(document.querySelector(`.end-time[data-index="${index}"]`)?.value || waveformCanvas?.getDuration() || 1);

    const key = String(index).padStart(3, '0'); // –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É "000", "001" –∏ —Ç.–¥.
    selectRowByKey(key, { focusEditable: false });

    updateCurrentPhraseUI(text, start, end);
    createRegion(start, end, index);
}

// =======================================================================================
// –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º
// –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª–æ–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input
const fakeAudioFileBtn = document.getElementById("fakeAudioFileBtn");
if (fakeAudioFileBtn) {
    fakeAudioFileBtn.addEventListener("click", () => {
        const audioFile = document.getElementById("audioFile");
        if (audioFile) {
            audioFile.click();
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MP3 —Ñ–∞–π–ª–æ–≤
const fakeMp3FileBtn = document.getElementById("fakeMp3FileBtn");
if (fakeMp3FileBtn) {
    fakeMp3FileBtn.addEventListener("click", () => {
        const mp3File = document.getElementById("mp3File");
        if (mp3File) {
            mp3File.click();
        }
    });
}

function handleAudioAfterUpload(audioUrl) {
    if (!audioUrl) {
        console.warn("–ü—É—Ç—å –∫ –∞—É–¥–∏–æ –Ω–µ –∑–∞–¥–∞–Ω");
        return;
    }
    lastAudioUrl = audioUrl;
    initWaveform(audioUrl);  // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å await, –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ async

    // 2.–≤–∏–¥–∏–º–æ—Å—Ç—å –≤–æ–ª–Ω—ã ----------------------------------------------------
    const waveform = document.getElementById('waveform');
    // –ï—Å–ª–∏ —É waveform —É–∂–µ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–Ω–µ–ª—å
    if (waveform && waveform.children.length > 0) {
        const panel = waveform.closest('.toggle-panel');
        if (panel) panel.classList.add('open');
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
    const audioFileStatus = document.getElementById("audioFileStatus");
    const fileName = audioUrl.split('/').pop();
    if (audioFileStatus) {
        audioFileStatus.textContent = `–§–∞–π–ª: ${fileName}`;
    }
}

const audioFile = document.getElementById("audioFile");
if (audioFile) {
    audioFile.addEventListener("change", async function (event) {
        const file = event.target.files[0];
        if (!file) return;

        const dictationId = currentDictation?.id;
        if (!dictationId) {
            alert("Dictation ID –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        const formData = new FormData();
        formData.append("file", file);
        formData.append("dictation_id", dictationId);

        try {
            const response = await fetch("/upload_audio", {
                method: "POST",
                body: formData
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞");

            const result = await response.json();
            const audioUrl = result.audio_url;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            handleAudioAfterUpload(audioUrl);
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:", err);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ");
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤
const mp3File = document.getElementById("mp3File");
if (mp3File) {
    mp3File.addEventListener("change", async function (event) {
    const file = event.target.files[0];
    if (!file) return;

    const dictationId = currentDictation?.id;
    if (!dictationId) {
        alert("Dictation ID –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("dictation_id", dictationId);
    formData.append("language", currentDictation.language_original);

    try {
        const response = await fetch("/upload_mp3_file", {
            method: "POST",
            body: formData
        });

        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ MP3 —Ñ–∞–π–ª–∞");

        const result = await response.json();
        if (result.success) {
            const audioUrl = result.audio_url;
            const filename = result.filename;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
            const statusDiv = document.getElementById("mp3FileStatus");
            if (statusDiv) {
                statusDiv.textContent = `–§–∞–π–ª: ${filename}`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.title = `–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ - ${filename}`;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ –≤–æ–ª–Ω–æ–≤–æ–π –ø–ª–µ–µ—Ä
            handleAudioAfterUpload(audioUrl);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            currentDictation.mp3File = {
                url: audioUrl,
                filename: filename
            };
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MP3:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MP3 —Ñ–∞–π–ª");
    }
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
let currentAudio = null;
let isPlaying = false;
let playheadAnimationId = null;

// –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –ø–æ–¥ –≤–æ–ª–Ω–æ–π
function funClick() {
    if (!lastAudioUrl) {
        console.error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }

    if (isPlaying) {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        stopPlayback();
    } else {
        // –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        startPlayback();
    }
}

function startPlayback() {
    if (!lastAudioUrl) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞
    const startTime = parseFloat(safeGetElementById('startTime').value) || 0;
    const endTime = parseFloat(safeGetElementById('endTime').value) || (waveformCanvas?.getDuration() || 0);
    
    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:', startTime, '-', endTime);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
    currentAudio = new Audio(lastAudioUrl);
    currentAudio.currentTime = startTime;
    
    currentAudio.addEventListener('ended', stopPlayback);
    currentAudio.addEventListener('timeupdate', updatePlayhead);
    
    currentAudio.play().then(() => {
        isPlaying = true;
        updatePlayButton();
        startPlayheadAnimation();
    }).catch(e => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', e);
    });
}

function stopPlayback() {
    if (currentAudio) {
        currentAudio.pause();
        currentAudio.removeEventListener('ended', stopPlayback);
        currentAudio.removeEventListener('timeupdate', updatePlayhead);
        currentAudio = null;
    }
    
    isPlaying = false;
    updatePlayButton();
    stopPlayheadAnimation();
    
    console.log('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
}

function updatePlayButton() {
    const btn = document.getElementById('playPauseBtn');
    if (btn) {
        if (isPlaying) {
            btn.innerHTML = '<i data-lucide="pause"></i>';
        } else {
            btn.innerHTML = '<i data-lucide="play"></i>';
        }
        lucide.createIcons();
    }
}

function updatePlayhead() {
    if (currentAudio && waveformCanvas) {
        const currentTime = currentAudio.currentTime;
        waveformCanvas.setCurrentTime(currentTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏–æ–Ω–∞
        const endTime = parseFloat(safeGetElementById('endTime').value) || 0;
        if (currentTime >= endTime) {
            stopPlayback();
        }
    }
}

function startPlayheadAnimation() {
    function animate() {
        if (isPlaying && currentAudio && waveformCanvas) {
            updatePlayhead();
            playheadAnimationId = requestAnimationFrame(animate);
        }
    }
    animate();
}

function stopPlayheadAnimation() {
    if (playheadAnimationId) {
        cancelAnimationFrame(playheadAnimationId);
        playheadAnimationId = null;
    }
}

// =======================================================================================
// üß† –ê–ª–≥–æ—Ä–∏—Ç–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
function softCompare(textSentence, audioWords, wordPointer) {
    const normText = normalizeText(textSentence);
    const inputWords = normText.split(" ");

    const slice = audioWords.slice(wordPointer, wordPointer + inputWords.length + 3);
    const audioOnly = slice.map(w => normalizeText(w.word));

    let matches = 0;
    let firstMatchIndex = null;
    let lastMatchIndex = null;

    for (let i = 0; i < inputWords.length && i < audioOnly.length; i++) {
        if (inputWords[i] === audioOnly[i]) {
            if (firstMatchIndex === null) firstMatchIndex = i;
            lastMatchIndex = i;
            matches++;
        }
    }

    const similarity = matches / inputWords.length;
    const status = similarity > 0.9 ? "ok" : similarity > 0.6 ? "warn" : "fail";

    let startTime = null, endTime = null;

    if (firstMatchIndex !== null) {
        startTime = slice[firstMatchIndex]?.start ?? null;
        endTime = slice[lastMatchIndex]?.end ?? null;
    }

    return {
        status,
        usedCount: matches > 0 ? inputWords.length : 0,
        startTime,
        endTime
    };
}

// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω—é—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
function normalizeText(str) {
    return str.toLowerCase().replace(/[.,!?;:()"']/g, '').trim();
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// cut_avto –Ω–∞–¥–æ –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–¥–∏–æ, –µ—Å–ª–∏ false —Ç–æ –º—ã —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
async function handleAudioGeneration({
    filename_audio,
    tipe_audio = "avto",
    text,
    language
}) {
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = {
            'Content-Type': 'application/json'
        };
        
        if (window.UM && window.UM.authToken) {
            headers['Authorization'] = `Bearer ${window.UM.authToken}`;
        }

        let avto = true;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        console.log('üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è:', {
            safe_email: currentDictation.safe_email,
            dictation_id: currentDictation.id,
            filename_audio: filename_audio,
            language: language,
            text_length: text.length
        });
        
        const response = await fetch('/generate_audio', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                safe_email: currentDictation.safe_email,
                dictation_id: currentDictation.id,
                text: text,
                tipe_audio: tipe_audio,
                filename_audio: filename_audio, // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ "001_en_avto"
                language: language
            })
        });

        if (!response.ok) {
            // throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            const t = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ TTS: ${response.status} ${t}`);
        }

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ');
        }

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –∫–ª—é—á–æ–º = –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        await putAudioInPlayer(filename_audio, data.audio_url);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:', error);
        return false;
    }
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å
async function validateCutRange(start, end) {
    if (Number.isNaN(start) || Number.isNaN(end)) {
        throw new Error('–£–∫–∞–∂–∏ —á–∏—Å–ª–∞ –≤ Start/End.');
    }
    if (start < 0 || end <= 0 || end <= start) {
        throw new Error('–î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: End –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > Start, –æ–±–∞ ‚â• 0.');
    }
    const dur = waveformCanvas?.getDuration() ?? null;
    if (dur && (start >= dur || end > dur)) {
        throw new Error(`–î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–ª–∏–Ω—É –∞—É–¥–∏–æ (–¥–ª–∏–Ω–∞ ‚âà ${dur.toFixed(2)}s).`);
    }
}

async function cutAudioForLine({ key, start, end }) {
    // –æ—Ç–∫—É–¥–∞ —Ä–µ–∑–∞—Ç—å: –æ–±—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const source_url = window.currentOriginalAudioUrl  // –∑–∞–¥–∞–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        || currentDictation.source_audio; // –ª–∏–±–æ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏–∫—Ç–∞–Ω—Ç–∞
    if (!source_url) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –≤—ã—Ä–µ–∑–∫–∏.');

    const resp = await fetch('/api/trim-audio', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            key,
            source_url,
            start,
            end,
            dictation_id: currentDictation.id,
            // —Ü–µ–ª–µ–≤–æ–µ –∏–º—è –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±—ç–∫–µ, –Ω–∞–ø—Ä.:  "sentences/KEY.mp3"
        })
    });

    if (!resp.ok) {
        const t = await resp.text();
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: ${resp.status} ${t}`);
    }
    const data = await resp.json(); // { audio_url: "/media/dicta_xxx/sentences/001.mp3" }
    if (!data?.audio_url) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª audio_url.');
    return data.audio_url;
}



// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// async function putAudioInPlayer(key, language, audio_url) {
//     try {
//         // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
//         const audio = new Audio(audio_url);
//         const audioKey = `${key}_${language}`;
//         audioPlayers[audioKey] = audio;

//         return true;
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
//         return false;
//     }
// }
async function putAudioInPlayer(key_audio, audio_url) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        const audio = new Audio(audio_url);
        audioPlayers[key_audio] = audio;

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async function autoTranslate(text, sourceLanguage, target_language) {
    try {
        const response = await fetch('/translate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                text: text,
                source_language: sourceLanguage,
                target_language: target_language
            })
        });
        const data = await response.json();
        return data.translation || text + " [–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è]";
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", error);
        return text + " [–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞]";
    }
}

// ========================================================================
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
// —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç—ã


// –≤ –Ω–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Å–µ —á—Ç–æ –Ω–∞–¥–æ
async function createSentenceRow({
    tbody,
    key,
    index,
    original,
    translation,
    filename_audio_original = '',
    filename_audio_translation = '',
    audio_url_original = '',
    audio_url_translation = ''
}) {
    const row1 = document.createElement('tr');
    row1.classList.add('sentence-row', 'sentence-row-top');
    row1.dataset.key = key; // —ç—Ç–æ –∫–ª—é—á —Ç—Ä–æ–∫–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è

    // (1.1) –Ø—á–µ–π–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const keyCell = document.createElement('td'); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    keyCell.rowSpan = 2;
    keyCell.innerHTML = `<div id="key" data-index="${key}">${index + 1}</div>`;
    row1.appendChild(keyCell);
    // console.log("üîÑ ----------- (1.1) ----- ", index);

    // –æ—Ä–∏–≥–∏–Ω–∞–ª -  –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
    // (1.2) –°—Ç–æ–ª–±–µ—Ü "–¢–µ–∫—Å—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª + –ø–µ—Ä–µ–≤–æ–¥)"
    const textCell = document.createElement('td');
    textCell.innerHTML = `<div class="text-original" data-index="${key}" contenteditable="true">${original}</div>`;
    row1.appendChild(textCell);
    // –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    textCell.addEventListener('input', () => {
        const row = textCell.closest('tr');
        const key = row.dataset.key;
        const newText = textCell.querySelector('.text-original').textContent.trim();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        const sentenceIndex = sentences_original.findIndex(s => s.key === key);
        if (sentenceIndex !== -1) {
            sentences_original[sentenceIndex].text = newText;
        }

        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
        const genBtn = row.querySelector('.generate-audio[data-lang="original"]');
        if (genBtn) {
            genBtn.classList.add('changed');
            genBtn.disabled = false;
        }
        const playBtn = row.querySelector('.play-audio[data-lang="original"]');
        if (playBtn) {
            playBtn.classList.add('changed');
            playBtn.disabled = true;
        }
    });

    // (1.3) –°—Ç–æ–ª–±–µ—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    const audioGenerationOriginal = document.createElement('td');
    audioGenerationOriginal.innerHTML = `<button class="generate-audio table-button-original"        
            data-index="${key}" 
            data-lang="original" 
            title="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ">
            <i data-lucide="file-music"></i>
            <span class="status-text">${currentDictation.language_original}</span>
        </button>
    `;
    row1.appendChild(audioGenerationOriginal);
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    const genOriginalBtn = audioGenerationOriginal.querySelector('.generate-audio');
    genOriginalBtn.addEventListener('click', async () => {
        // console.log(`++++++++++++++++++–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${index}`);
        const text = row1.querySelector('.text-original').textContent.trim();
        if (!text) return;

        const genBtn = row1.querySelector('.generate-audio[data-lang="original"]');
        const playBtn = row1.querySelector('.play-audio[data-lang="original"]');
        try {
            const success = await handleAudioGeneration({
                filename_audio: filename_audio_original,
                tipe_audio: "avto",
                text: text,
                language: currentDictation.language_original
            });
            if (success) {
                genBtn.classList.remove("changed"); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                genBtn.disabled = true;
                playBtn.classList.remove("changed"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
                playBtn.disabled = false;
                // –ê–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
                const player = audioPlayers[filename_audio_original];
                if (player) {
                    try {
                        player.currentTime = 0;
                        await player.play();
                    } catch (e) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª:', e);
                    }
                }
            }
        } finally {
            genOriginalBtn.disabled = false;
        }
    });

    // (1.4) –°—Ç–æ–ª–±–µ—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
    const audioCellOriginal = document.createElement('td');
    audioCellOriginal.innerHTML = ` <button class="play-audio table-button-original"    
            data-index="${key}" 
            data-lang="original" 
            data-filename="${filename_audio_original}" 
            title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª">
            <i data-lucide="play"></i>
            <span class="status-text">${currentDictation.language_original}</span>
        </button>
    `;
    row1.appendChild(audioCellOriginal);
    // —É –Ω–∞—Å –µ—Å—Ç—å –∞–¥—Ä–µ—Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–ª–µ–µ—Ä
    const playBtnOriginal = audioCellOriginal.querySelector('.play-audio');
    playBtnOriginal.disabled = false;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –ø–ª–µ–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (audio_url_original && filename_audio_original) {
        try {
            await putAudioInPlayer(filename_audio_original, audio_url_original);
            console.log(`‚úÖ –ê—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${filename_audio_original}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –æ—Ä–∏–≥–∏–Ω–∞–ª: ${filename_audio_original}`, error);
            playBtnOriginal.disabled = true;
        }
    } else {
        playBtnOriginal.disabled = true;
    }
    
    tbody.appendChild(row1);


    // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ ========================================================
    const row2 = document.createElement("tr");
    row2.classList.add('sentence-row', 'sentence-row-bottom');
    row2.dataset.key = key;

    // (2.2) –°—Ç–æ–ª–±–µ—Ü —Å —Ç–µ–∫—Å—Ç–æ–º (–ø–µ—Ä–µ–≤–æ–¥)
    const textCellTranslation = document.createElement('td');
    // <div class="translation-text" contenteditable="true">${translation}</div>
    textCellTranslation.innerHTML = `
        <div class="text-translation" data-index="${key}" contenteditable="true">${translation}</div>
     `;
    row2.appendChild(textCellTranslation);
    // –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    textCellTranslation.addEventListener('input', () => {
        const row = textCellTranslation.closest('tr');
        const key = row.dataset.key;
        const newText = textCellTranslation.querySelector('.text-translation').textContent.trim();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        const sentenceIndex = sentence_translation.findIndex(s => s.key === key);
        if (sentenceIndex !== -1) {
            sentence_translation[sentenceIndex].text = newText;
        }

        const genBtn = row.querySelector('.generate-audio-tr[data-lang="translation"]');
        if (genBtn) {
            genBtn.classList.add('changed');
            genBtn.disabled = false;
        }

        const playBtn = row.querySelector('.play-audio-tr[data-lang="translation"]');
        if (playBtn) {
            playBtn.classList.add('changed');
            playBtn.disabled = true;
        }
    });

    // (2.3) –°—Ç–æ–ª–±–µ—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    const audioGenerationTranslation = document.createElement('td');
    audioGenerationTranslation.innerHTML = `<button class="generate-audio-tr" 
            data-index="${key}" 
            data-lang="translation" 
            title="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ">
            <i data-lucide="file-music"></i>
            <span class="status-text">${currentDictation.language_translation}</span>
        </button>
    `;
    row2.appendChild(audioGenerationTranslation);
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    const genTranslationBtn = audioGenerationTranslation.querySelector('.generate-audio-tr');
    genTranslationBtn.addEventListener('click', async () => {
        console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${key}`);

        const text = row2.querySelector('.text-translation').textContent.trim();
        if (!text) return;

        const genBtn = row2.querySelector('.generate-audio-tr[data-lang="translation"]');
        const playBtn = row2.querySelector('.play-audio-tr[data-lang="translation"]');

        try {
            const success = await handleAudioGeneration({
                filename_audio: filename_audio_translation,
                tipe_audio: "avto",
                text: text,
                language: currentDictation.language_translation
            });
            if (success) {
                genBtn.classList.remove("changed"); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                genBtn.disabled = true;
                playBtn.classList.remove("changed"); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
                playBtn.disabled = false;
                // –ê–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (–ø–µ—Ä–µ–≤–æ–¥)
                const player = audioPlayers[filename_audio_translation];
                if (player) {
                    try {
                        player.currentTime = 0;
                        await player.play();
                    } catch (e) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥:', e);
                    }
                }
            }
        } finally {
            genTranslationBtn.disabled = false;
        }
    });

    // (2.4) –°—Ç–æ–ª–±–µ—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
    const audioCellTranslation = document.createElement('td');
    audioCellTranslation.innerHTML = `
        <button class="play-audio-tr" 
        data-index="${key}" 
        data-lang="translation" 
        data-filename="${filename_audio_translation}" 
        title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥" 
        style="color: var(--color-button-text-yellow);">
            <i data-lucide="play"></i>
            <span class="status-text">${currentDictation.language_translation}</span>
        </button>
    `;
    row2.appendChild(audioCellTranslation);
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ play
    const playBtnTranslation = audioCellTranslation.querySelector('.play-audio-tr');
    playBtnTranslation.disabled = false;
    playBtnTranslation.querySelector('.status-text').textContent = currentDictation.language_translation;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø–ª–µ–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (audio_url_translation && filename_audio_translation) {
        try {
            await putAudioInPlayer(filename_audio_translation, audio_url_translation);
            console.log(`‚úÖ –ê—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${filename_audio_translation}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥: ${filename_audio_translation}`, error);
            playBtnTranslation.disabled = true;
        }
    } else {
        playBtnTranslation.disabled = true;
    }

    tbody.appendChild(row2);

    return row1;
}



// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
// -------------------------------------------------------------
// üîß –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveJSONToServer(filePath, data) {
    const response = await fetch('/save_json', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ path: filePath, data: data })
    });
    const result = await response.json();
    // console.log("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", result);
}

async function saveJSON_sentences(dictationId, language, title, sentences, speaker = "auto") {
    const tbody = document.querySelector('#sentences-table tbody');
    const sentences_original = {
        language: language,
        speaker: speaker,
        title: title,
        sentences: sentences  // ‚Üê –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ {key, text, audio}
    };
    await saveJSONToServer(`static/data/dictations/${dictationId}/${language}/${speaker}/sentences.json`, sentences_original);
}

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Å—Ç—Ä–æ–∫–µ¬ª
document.addEventListener('click', async (e) => {
    const btn = e.target.closest('.apply-audio');
    if (!btn) return;

    const key = btn.dataset.key;                         // "000", "001", ...
    const row = document.querySelector(`[data-row-key="${key}"]`)
        || btn.closest('tr')?.parentElement;        // –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ—é —Ä–∞–∑–º–µ—Ç–∫—É
    const sourceName = `audioSource-${key}`;
    const selected = document.querySelector(`input[name="${sourceName}"]:checked`)?.value;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ ‚Äî –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ)
    const lang = currentDictation.language_original || 'en';
    const textEl = row?.querySelector('.text-original') || row?.querySelector('.text-translation');
    const text = textEl?.textContent?.trim() || '';

    // UI-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    btn.disabled = true;
    const oldHtml = btn.innerHTML;
    btn.innerHTML = '‚è≥...';

    try {
        if (selected === 'auto') {
            // (1) –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ / –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è TTS
            let translationSuccess = false;
            // if (audio_url_translation === '') {
            // –∞—É–¥–∏–æ –µ—â–µ –Ω–µ—Ç -- —Å–æ–∑–¥–∞–µ–º
            translationSuccess = await handleAudioGeneration(key, text, lang);
            //   const audioUrl = await generateTTSForLine({ key, text, lang });
            //   await applyAudioToLine({ key, audioUrl });
        } else {
            // (2) –í—ã—Ä–µ–∑–∫–∞ –ø–æ Start/End –∏–∑ –≤–æ–ª–Ω—ã
            const start = parseFloat(safeGetElementById('startTime').value);
            const end = parseFloat(safeGetElementById('endTime').value);
            await validateCutRange(start, end);

            const audioUrl = await cutAudioForLine({ key, start, end });
            await applyAudioToLine({ key, audioUrl });
        }

        // –£—Å–ø–µ—Ö: –º–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–µ–∫—É–Ω–¥—É
        flashRow(row, 'success');
    } catch (err) {
        console.error(err);
        flashRow(row, 'error');
        alert(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏.');
    } finally {
        btn.disabled = false;
        btn.innerHTML = oldHtml;
    }
});

async function saveAvtoToDisk() {
    try {
        const dictationId = currentDictation.id;
        const folderName = 'avto';
        const audioExtensions = ['.mp3'];

        // –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        console.log('üßπ –û—á–∏—â–∞–µ–º temp –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');
        await fetch('/clear_temp_folders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictationId,
                language_original: currentDictation.language_original,
                language_translation: currentDictation.language_translation
            })
        });

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–î–ò–ù —è–∑—ã–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        const respOrig = await fetch('/save_audio_folder_single', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictationId,
                language: currentDictation.language_original,
                folder_name: folderName,
                title: document.getElementById('title')?.value || '',
                sentences: sentences_original,
                audio_extensions: audioExtensions
            })
        });
        const resJsonOrig = await respOrig.json();
        if (!respOrig.ok || !resJsonOrig.success) throw new Error(resJsonOrig.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞');

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–î–ò–ù —è–∑—ã–∫ (–ø–µ—Ä–µ–≤–æ–¥)
        const respTr = await fetch('/save_audio_folder_single', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictationId,
                language: currentDictation.language_translation,
                folder_name: folderName,
                title: document.getElementById('title_translation')?.value || '',
                sentences: sentence_translation,
                audio_extensions: audioExtensions
            })
        });
        const resJsonTr = await respTr.json();
        if (!respTr.ok || !resJsonTr.success) throw new Error(resJsonTr.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞');

        // info.json (—Ü–µ–Ω—Ç—Ä –æ–¥–∏–Ω –Ω–∞ –¥–∏–∫—Ç–∞–Ω—Ç) - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        const info_dictation = {
            id: dictationId,
            language_original: currentDictation.language_original,
            title: document.getElementById('title')?.value || '',
            level: "A1"
        };
        await saveJSONToServer(`static/data/dictations/${dictationId}/info.json`, info_dictation);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cover –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        if (currentDictation.coverFile) {
            try {
                const formData = new FormData();
                formData.append('cover', currentDictation.coverFile);
                formData.append('dictation_id', dictationId);
                
                const coverResponse = await fetch('/api/cover', {
                    method: 'POST',
                    body: formData
                });
                
                if (coverResponse.ok) {
                    const coverResult = await coverResponse.json();
                    console.log('‚úÖ Cover —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', coverResult.cover_url);
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cover');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ cover:', error);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∫—Ç–∞–Ω—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (currentDictation.category_key) {
            try {
                const response = await fetch('/save_dictation_with_category', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        dictation_id: dictationId,
                        category: {
                            key: currentDictation.category_key,
                            title: currentDictation.category_title,
                            path: currentDictation.category_path
                        }
                    })
                });
                
                if (response.ok) {
                    console.log('‚úÖ –î–∏–∫—Ç–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', currentDictation.category_key);
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', error);
            }
        }
        
        alert('–ì–æ—Ç–æ–≤–æ: –¥–∞–Ω–Ω—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /avto –¥–ª—è –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + (error.message || error));
    }
}

// –§—É–Ω–∫—Ü–∏—è setupButtons —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
/*
function setupButtons() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–±–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    document.getElementById('split-avto-btn').addEventListener('click', async function () {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "—Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ñ—Ä–∞–∑—ã –∏ –æ–∑–≤—É—á–∏—Ç—å"');
            const text = document.getElementById('text').value.trim();
            if (!text) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏!');
                return;
            }
            console.log('üìù –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏:', text);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫–∏ –∏–∑ currentDictation
        const language_original = currentDictation.language_original;
        const language_translation = currentDictation.language_translation;
        const dictationId = currentDictation.id;


        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞, –ª–µ–π–±–ª –∏ –∫–Ω–æ–ø–∫—É (–≤—Å—é –æ–±—ë—Ä—Ç–∫—É formGroupRaw)
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        // const formGroupRaw = document.getElementById('formGroupRaw');
        // if (formGroupRaw) {
        //     formGroupRaw.classList.add('hidden-block');
        // }

        // –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –∞—É–¥–∏–æ (–æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞)
        const response = await fetch('/generate_path_audio', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language_original: currentDictation.language_original,
                language_translation: currentDictation.language_translation
            })
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        const respJson = await response.json();
        const audio_dir_url_original = "/" + respJson.audio_dir_original + "/";
        const audio_dir_url_translation = "/" + respJson.audio_dir_translation + "/";

        //const sentences = text.split(/[.!?\n]+/)
        const sentences = text.split('\n')
            .map(s => s.trim())
            .filter(s => s.length > 0);

        const title_value = document.getElementById('title').value;
        const title_translation_value = document.getElementById('title_translation').value;
        // üìÑ 1. –°–æ–∑–¥–∞–Ω–∏–µ info.json
        // const info_dictation = {
        //     id: currentDictation.id,
        //     language_original: language_original,
        //     title: title_value,
        //     level: "A1"
        // };
        // await saveJSONToServer(`static/data/dictations/${currentDictation.id}/info.json`, info_dictation);

        sentences_original = [];
        sentence_translation = [];
        const tbody = document.querySelector('#sentences-table tbody');
        console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, tbody:', tbody);
        tbody.innerHTML = '';
        let key_i = 0;
        let haveAudio = false;
        const input = document.getElementById('audioFile');
        if (input && input.files && input.files.length > 0) {
            haveAudio = true;
        }

        const tipe_audio = "avto"
        wordPointer = 0; // –∏–Ω–¥–µ—Å –¥–ª—è –º—è–≥–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è
        console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', sentences.length);
        for (let i = 0; i < sentences.length; i++) {
            const key = key_i.toString().padStart(3, '0'); // –∫–ª—é—á –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
            const filename_audio_original = `${key}_${language_original}_avto.mp3`; // –∏–º—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            const filename_audio_translation = `${key}_${language_translation}_avto.mp3`; // –∏–º—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            const original = sentences[i];
            console.log(`üìù –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}/${sentences.length}, key: ${key}, original: "${original}"`);
            i_next = i + 1; // —ñ–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É —ç /* —Ç–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ —Ç–µ—Ä–µ–±–∞ 
            // –æ—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥
            let translation = "";
            if (i_next < sentences.length) {
                if (sentences[i_next].startsWith('/*')) {
                    // –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –±–µ—Ä–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ
                    translation = sentences[i_next].substring(2).trim(); // —É–¥–∞–ª–∏—Ç—å /*;
                    i++;
                }
                else {
                    translation = await autoTranslate(original, language_original, language_translation);
                }
            } else {
                translation = await autoTranslate(original, language_original, language_translation);
            }

            // –≥–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ —Å–∞–º—ñ ---------------------------------------
            const audio_url_original = audio_dir_url_original + 'avto/' + filename_audio_original;
            let saccess_audio_original = await handleAudioGeneration({
                filename_audio: filename_audio_original,
                tipe_audio: tipe_audio,
                text: original,
                language: language_original
            });
            if (saccess_audio_original) {
                putAudioInPlayer(filename_audio_original, audio_url_original);
            }

            // –∞—É–¥–∏—ñ–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞ –∑–∞–≤–∂–¥–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ —Å–∞–º—ñ ---------------------------------------
            const audio_url_translation = audio_dir_url_translation + 'avto/' + filename_audio_translation;
            let saccess_audio_translation = await handleAudioGeneration({
                filename_audio: filename_audio_translation,
                tipe_audio: tipe_audio,
                text: translation,
                language: language_translation
            });
            if (saccess_audio_translation) {
                putAudioInPlayer(filename_audio_translation, audio_url_translation);
            }

            // –¥–æ–¥–æ—î–º–æ —Ä—è–¥–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—é -------------------------------------------------------
            console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É: ${key}`);
            await createSentenceRow({
                tbody: tbody,
                key: key,
                index: key_i,
                original: original,
                translation: translation,
                filename_audio_original: filename_audio_original,
                filename_audio_translation: filename_audio_translation,
                audio_url_original: audio_url_original,
                audio_url_translation: audio_url_translation
            });
            console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${key} –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${tbody.children.length}`);

            // –¥–æ–¥–∞—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –¥–æ sentense.json (–¥–≤–∞ —Ñ–∞–π–ª–∏, –∫–æ–∂–µ–Ω –≤ –ø–∞–ø—Ü—ñ —Å–≤–æ—î—ó –º–æ–≤–∏) ---------
            sentences_original.push(newSentances(key, original, filename_audio_original));
            sentence_translation.push(newSentances(key, translation, filename_audio_translation));

            key_i++; // –Ω–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è

        }
        console.log(`üèÅ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${tbody.children.length}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (window.lucide) {
            window.lucide.createIcons();
        }
        // –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ tbody
        console.log('üéØ –í—ã–∑—ã–≤–∞–µ–º selectFirstRowIfAny()');
        selectFirstRowIfAny();

        // // üìÑ 2. –°–æ–∑–¥–∞–Ω–∏–µ sentences.json –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        // saveJSON_sentences(dictationId, language_original, title_value, sentences_original)
        // // saveJSON_sentences(dictationId, language_original, title_value, '.text-original')

        // // üìÑ 3. –°–æ–∑–¥–∞–Ω–∏–µ sentences.json –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        // saveJSON_sentences(dictationId, language_translation, title_translation_value, sentence_translation)
        // // saveJSON_sentences(dictationId, language_translation, title_translation_value, '.text-translation')

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "—Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ñ—Ä–∞–∑—ã –∏ –æ–∑–≤—É—á–∏—Ç—å":', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å Audio-avto"
    document.getElementById('save-avto-btn').addEventListener('click', async function () {
        await saveAvtoToDisk();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
    document.addEventListener('click', function (e) {
        const playBtn = e.target.closest('.play-audio, .play-audio-tr');
        if (!playBtn || playBtn.disabled) return;

        const audioKey = playBtn.dataset["filename"];

        if (audioPlayers[audioKey]) {
            audioPlayers[audioKey].currentTime = 0;
            audioPlayers[audioKey].play();
        }
    });

    // üéß –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –≤–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const titleInput = document.getElementById('title');
    const titleTranslationInput = document.getElementById('title_translation');

    if (titleInput && titleTranslationInput) {
        titleInput.addEventListener('input', async () => {
            const originalTitle = titleInput.value.trim();

            if (typeof currentDictation !== 'undefined' &&
                currentDictation.language_original &&
                currentDictation.language_translation) {

                const translatedTitle = await autoTranslate(
                    originalTitle,
                    currentDictation.language_original,
                    currentDictation.language_translation
                );
                titleTranslationInput.value = translatedTitle;
            } else {
                console.warn("‚ö†Ô∏è currentDictation –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–ª–∏ —è–∑—ã–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.");
            }
        });
    }

    // üñºÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cover
    setupCoverHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è MP3 —Ä–µ–∂–∏–º–∞
    setupMp3Handlers();
}
*/

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è MP3 —Ä–µ–∂–∏–º–∞ - —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞
/*
function setupMp3Handlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è start/end
    const waveModeRadios = document.querySelectorAll('input[name="waveMode"]');
    waveModeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            const mode = e.target.value;
            updateWaveMode(mode);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"
    const createTableBtn = document.getElementById('createTableBtn');
    if (createTableBtn) {
        createTableBtn.addEventListener('click', createMp3Table);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å MP3 –¥–∏–∫—Ç–∞–Ω—Ç"
    const saveMp3Btn = document.getElementById('save-mp3-btn');
    if (saveMp3Btn) {
        saveMp3Btn.addEventListener('click', saveMp3Dictation);
    }
}
*/

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ª–Ω—ã
function updateWaveMode(mode) {
    if (!waveformCanvas) return;
    
    if (mode === 'dictation') {
        // –†–µ–∂–∏–º 1: –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞
        if (currentDictation.dictationStartTime && currentDictation.dictationEndTime) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–∏–∫—Ç–∞–Ω—Ç–∞
            safeGetElementById('startTime').value = currentDictation.dictationStartTime.toFixed(2);
            safeGetElementById('endTime').value = currentDictation.dictationEndTime.toFixed(2);
            waveformCanvas.setRegion(currentDictation.dictationStartTime, currentDictation.dictationEndTime);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            const startTime = parseFloat(safeGetElementById('startTime').value) || 0;
            const endTime = parseFloat(safeGetElementById('endTime').value) || waveformCanvas.getDuration();
            waveformCanvas.setRegion(startTime, endTime);
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ä–µ–∂–∏–º –¥–∏–∫—Ç–∞–Ω—Ç–∞
        const textOriginalRow = document.getElementById('text-original-row');
        if (textOriginalRow) {
            textOriginalRow.textContent = '';
        }
        
    } else if (mode === 'sentence') {
        // –†–µ–∂–∏–º 2: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if (selectedKey) {
            const mp3Row = document.querySelector(`#sentences-table-mp3 tr[data-key="${selectedKey}"]`);
            if (mp3Row) {
                const startInput = mp3Row.querySelector('.start-time');
                const endInput = mp3Row.querySelector('.end-time');
                
                if (startInput && endInput) {
                    const start = parseFloat(startInput.value) || 0;
                    const end = parseFloat(endInput.value) || 0;
                    
                    safeGetElementById('startTime').value = start.toFixed(2);
                    safeGetElementById('endTime').value = end.toFixed(2);
                    
                    waveformCanvas.setRegion(start, end);
                }
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
            const firstRow = document.querySelector('#sentences-table-mp3 tr');
            if (firstRow) {
                selectMp3Row(firstRow);
            }
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è MP3 —Ä–µ–∂–∏–º–∞
async function createMp3Table() {
    if (!currentDictation.mp3File) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ MP3 —Ñ–∞–π–ª');
        return;
    }
    
    if (!waveformCanvas) {
        alert('–ê—É–¥–∏–æ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–ª–µ–µ—Ä');
        return;
    }
    
    // –û–±—ä—è–≤–ª—è–µ–º createBtn –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch –±–ª–æ–∫–µ
    const createBtn = document.getElementById('createTableBtn');
    
    const startTime = parseFloat(safeGetElementById('startTime').value) || 0;
    let endTime = parseFloat(safeGetElementById('endTime').value);
    
    // –ï—Å–ª–∏ endTime –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    if (!endTime || endTime <= 0) {
        const duration = waveformCanvas ? waveformCanvas.getDuration() : 0;
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        endTime = Math.floor(duration * 100) / 100;
        safeGetElementById('endTime').value = endTime.toFixed(2);
    }
    
    if (endTime <= startTime) {
        alert('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ /*)
    const text = document.getElementById('text').value.trim();
    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏');
        return;
    }
    
    const allLines = text.split('\n').map(s => s.trim()).filter(s => s.length > 0);
    const sentences = allLines.filter(line => !line.startsWith('/*'));
    
    const numParts = sentences.length;
    const duration = endTime - startTime;
    const partDuration = duration / numParts;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', {
            dictation_id: currentDictation.id,
            language: currentDictation.language_original,
            filename: currentDictation.mp3File?.filename,
            num_parts: numParts,
            start_time: startTime,
            end_time: endTime
        });
        
        if (!currentDictation.mp3File?.filename) {
            throw new Error('MP3 —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
        
        // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        if (createBtn) {
            createBtn.disabled = true;
            createBtn.textContent = '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...';
        }
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏
        const response = await fetch('/split_audio_into_parts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language: currentDictation.language_original,
                filename: currentDictation.mp3File.filename,
                num_parts: numParts,
                start_time: startTime,
                end_time: endTime
            })
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ');
        
        const result = await response.json();
        if (!result.success) throw new Error(result.error);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–∏–∫—Ç–∞–Ω—Ç–∞
        currentDictation.dictationStartTime = startTime;
        currentDictation.dictationEndTime = endTime;
        currentDictation.tableFilled = true;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        createMp3TableRows(sentences, result.parts);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = document.getElementById('save-mp3-btn');
        if (saveBtn) {
            saveBtn.style.display = 'inline-block';
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞" –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        const sentenceModeRadio = document.querySelector('input[name="waveMode"][value="sentence"]');
        if (sentenceModeRadio) {
            sentenceModeRadio.checked = true;
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateWaveMode –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–∏–∫—Ç–∞–Ω—Ç–∞
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–¥–∏–æ
            const firstRow = document.querySelector('#sentences-table-mp3 tbody tr.selected');
            if (firstRow) {
                const startInput = firstRow.querySelector('.start-time');
                const endInput = firstRow.querySelector('.end-time');
                if (startInput && endInput) {
                    const start = parseFloat(startInput.value) || 0;
                    const end = parseFloat(endInput.value) || 0;
                    const key = firstRow.dataset.key;
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–¥–∏–æ:', start, '-', end);
                    createRegion(start, end, key);
                }
            }
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingIndicator();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (createBtn) {
            createBtn.disabled = false;
            createBtn.textContent = '–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É';
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error);
        hideLoadingIndicator();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (createBtn) {
            createBtn.disabled = false;
            createBtn.textContent = '–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É';
        }
        
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info', duration = 3000) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close">&times;</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const autoHide = setTimeout(() => {
        hideNotification(notification);
    }, duration);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        clearTimeout(autoHide);
        hideNotification(notification);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Å–∞–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification.addEventListener('click', () => {
        clearTimeout(autoHide);
        hideNotification(notification);
    });
}

// –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function hideNotification(notification) {
    notification.classList.add('hide');
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 300);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    // –°–æ–∑–¥–∞–µ–º overlay
    let overlay = document.getElementById('loading-overlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">${message}</div>
            </div>
        `;
        document.body.appendChild(overlay);
    } else {
        overlay.querySelector('.loading-text').textContent = message;
    }
    overlay.style.display = 'flex';
}

function hideLoadingIndicator() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è MP3 —Ä–µ–∂–∏–º–∞
function createMp3TableRows(sentences, audioParts) {
    const tbody = document.querySelector('#sentences-table-mp3 tbody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (!window.mp3TableChanges) {
        window.mp3TableChanges = new Set();
    }
    
    sentences.forEach((sentence, index) => {
        const part = audioParts[index];
        if (!part) return;
        
        const row = document.createElement('tr');
        row.dataset.key = index.toString().padStart(3, '0');
        
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>
                <div class="text-original" contenteditable="true">${sentence}</div>
            </td>
            <td>
                <input type="number" class="start-time" value="${part.start_time.toFixed(2)}" step="0.01" min="0" data-row="${index}">
            </td>
            <td>
                <input type="number" class="end-time" value="${part.end_time.toFixed(2)}" step="0.01" min="0" data-row="${index}">
            </td>
            <td>
                <button class="chain-btn" data-linked="true" title="–†–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É" data-row="${index}">
                    <i data-lucide="link"></i>
                </button>
            </td>
            <td>
                <button class="play-part-btn" data-url="${part.url}">
                    <i data-lucide="play"></i>
                </button>
            </td>
            <td>
                <button class="regenerate-btn" data-row="${index}" style="display: none;" title="–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ">
                    <i data-lucide="refresh-cw"></i>
                </button>
            </td>
            <td>
                <span class="change-indicator" data-row="${index}" style="display: none;">‚óè</span>
            </td>
        `;
        
        tbody.appendChild(row);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    if (window.lucide) {
        window.lucide.createIcons();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏
    setupChainHandlers();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π start/end
    setupTimeInputHandlers();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    setupRegenerateHandlers();
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    const firstRow = tbody.querySelector('tr');
    if (firstRow) {
        selectMp3Row(firstRow);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π start/end
function setupTimeInputHandlers() {
    const tbody = document.querySelector('#sentences-table-mp3 tbody');
    if (!tbody) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–µ–π start-time
    tbody.addEventListener('input', (e) => {
        if (e.target.classList.contains('start-time')) {
            handleStartTimeChange(e.target);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–µ–π end-time
    tbody.addEventListener('input', (e) => {
        if (e.target.classList.contains('end-time')) {
            handleEndTimeChange(e.target);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è start-time
function handleStartTimeChange(input) {
    const rowIndex = parseInt(input.dataset.row);
    const newStartTime = parseFloat(input.value) || 0;
    
    // –û—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
    markRowAsChanged(rowIndex);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π start
    if (rowIndex === 0) {
        updateGlobalStartTime(newStartTime);
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º end –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
    const chainBtn = document.querySelector(`.chain-btn[data-row="${rowIndex}"]`);
    if (chainBtn && chainBtn.dataset.linked === 'true' && rowIndex > 0) {
        const prevEndInput = document.querySelector(`[data-row="${rowIndex - 1}"].end-time`);
        if (prevEndInput) {
            prevEndInput.value = newStartTime.toFixed(2);
            markRowAsChanged(rowIndex - 1);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è end-time
function handleEndTimeChange(input) {
    const rowIndex = parseInt(input.dataset.row);
    const newEndTime = parseFloat(input.value) || 0;
    
    // –û—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
    markRowAsChanged(rowIndex);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π end
    const totalRows = document.querySelectorAll('#sentences-table-mp3 tbody tr').length;
    if (rowIndex === totalRows - 1) {
        updateGlobalEndTime(newEndTime);
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º start —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    const chainBtn = document.querySelector(`.chain-btn[data-row="${rowIndex}"]`);
    console.log(`–¶–µ–ø–æ—á–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${rowIndex}:`, chainBtn ? chainBtn.dataset.linked : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    if (chainBtn && chainBtn.dataset.linked === 'true' && rowIndex < totalRows - 1) {
        const nextStartInput = document.querySelector(`[data-row="${rowIndex + 1}"].start-time`);
        if (nextStartInput) {
            nextStartInput.value = newEndTime.toFixed(2);
            markRowAsChanged(rowIndex + 1);
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω start —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 1}: ${newEndTime.toFixed(2)}`);
        }
    }
}

// –û—Ç–º–µ—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
function markRowAsChanged(rowIndex) {
    if (!window.mp3TableChanges) {
        window.mp3TableChanges = new Set();
    }
    
    window.mp3TableChanges.add(rowIndex);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const indicator = document.querySelector(`.change-indicator[data-row="${rowIndex}"]`);
    if (indicator) {
        indicator.style.display = 'inline';
        indicator.style.color = '#ff6b6b';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    const regenerateBtn = document.querySelector(`.regenerate-btn[data-row="${rowIndex}"]`);
    if (regenerateBtn) {
        regenerateBtn.style.display = 'inline-block';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    showApplyChangesButton();
}

// –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
function updateGlobalStartTime(newStartTime) {
    const globalStartInput = safeGetElementById('startTime');
    if (globalStartInput) {
        globalStartInput.value = newStartTime.toFixed(2);
    }
    currentDictation.dictationStartTime = newStartTime;
}

// –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
function updateGlobalEndTime(newEndTime) {
    const globalEndInput = safeGetElementById('endTime');
    if (globalEndInput) {
        globalEndInput.value = newEndTime.toFixed(2);
    }
    currentDictation.dictationEndTime = newEndTime;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
function showApplyChangesButton() {
    let applyBtn = document.getElementById('apply-changes-btn');
    if (!applyBtn) {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const createBtn = document.getElementById('createTableBtn');
        if (createBtn) {
            applyBtn = document.createElement('button');
            applyBtn.id = 'apply-changes-btn';
            applyBtn.className = 'btn btn-primary';
            applyBtn.textContent = '–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            applyBtn.style.marginLeft = '10px';
            applyBtn.onclick = applyChanges;
            createBtn.parentNode.insertBefore(applyBtn, createBtn.nextSibling);
        }
    }
    
    if (applyBtn) {
        applyBtn.style.display = 'inline-block';
    }
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ)
async function applyChanges() {
    if (!window.mp3TableChanges || window.mp3TableChanges.size === 0) {
        showNotification('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', 'warning', 3000);
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        const changedRows = Array.from(window.mp3TableChanges);
        const regenerateData = [];
        
        for (const rowIndex of changedRows) {
            const startInput = document.querySelector(`[data-row="${rowIndex}"].start-time`);
            const endInput = document.querySelector(`[data-row="${rowIndex}"].end-time`);
            
            if (startInput && endInput) {
                regenerateData.push({
                    row: rowIndex,
                    start: parseFloat(startInput.value) || 0,
                    end: parseFloat(endInput.value) || 0
                });
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        const response = await fetch('/regenerate_audio_parts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language: currentDictation.language_original,
                filename: currentDictation.mp3File.filename,
                parts: regenerateData
            })
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ');
        
        const result = await response.json();
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º URL'—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
            result.parts.forEach(part => {
                const playBtn = document.querySelector(`[data-row="${part.row}"] + td .play-part-btn`);
                if (playBtn) {
                    playBtn.dataset.url = part.url;
                }
            });
            
            // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            clearChanges();
            
            showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!', 'success');
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ' + error.message, 'error', 5000);
    } finally {
        hideLoadingIndicator();
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
function clearChanges() {
    if (window.mp3TableChanges) {
        window.mp3TableChanges.clear();
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
    document.querySelectorAll('.change-indicator').forEach(indicator => {
        indicator.style.display = 'none';
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.regenerate-btn').forEach(btn => {
        btn.style.display = 'none';
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    const applyBtn = document.getElementById('apply-changes-btn');
    if (applyBtn) {
        applyBtn.style.display = 'none';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
function setupRegenerateHandlers() {
    const tbody = document.querySelector('#sentences-table-mp3 tbody');
    if (!tbody) return;
    
    tbody.addEventListener('click', (e) => {
        if (e.target.closest('.regenerate-btn')) {
            const btn = e.target.closest('.regenerate-btn');
            const rowIndex = parseInt(btn.dataset.row);
            regenerateSingleRow(rowIndex);
        }
    });
}

// –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
async function regenerateSingleRow(rowIndex) {
    try {
        const startInput = document.querySelector(`[data-row="${rowIndex}"].start-time`);
        const endInput = document.querySelector(`[data-row="${rowIndex}"].end-time`);
        
        if (!startInput || !endInput) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...');
        
        const response = await fetch('/regenerate_audio_parts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language: currentDictation.language_original,
                filename: currentDictation.mp3File.filename,
                parts: [{
                    row: rowIndex,
                    start: parseFloat(startInput.value) || 0,
                    end: parseFloat(endInput.value) || 0
                }]
            })
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ');
        
        const result = await response.json();
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            const part = result.parts[0];
            const playBtn = document.querySelector(`[data-row="${rowIndex}"] + td .play-part-btn`);
            if (playBtn) {
                playBtn.dataset.url = part.url;
            }
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            const indicator = document.querySelector(`.change-indicator[data-row="${rowIndex}"]`);
            if (indicator) {
                indicator.style.display = 'none';
            }
            
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
            const regenerateBtn = document.querySelector(`.regenerate-btn[data-row="${rowIndex}"]`);
            if (regenerateBtn) {
                regenerateBtn.style.display = 'none';
            }
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (window.mp3TableChanges) {
                window.mp3TableChanges.delete(rowIndex);
            }
            
            showNotification('–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏: ' + error.message, 'error', 5000);
    } finally {
        hideLoadingIndicator();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ü–µ–ø–æ—á–∫–∏
function setupChainHandlers() {
    const tbody = document.querySelector('#sentences-table-mp3 tbody');
    if (!tbody) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    tbody.addEventListener('input', (e) => {
        if (e.target.classList.contains('end-time')) {
            const row = e.target.closest('tr');
            const chainBtn = row.querySelector('.chain-btn');
            
            // –ï—Å–ª–∏ —Ü–µ–ø–æ—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if (chainBtn && chainBtn.dataset.linked === 'true') {
                updateNextRowStartTime(row);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ü–µ–ø–æ—á–∫–∏
    tbody.addEventListener('click', (e) => {
        if (e.target.closest('.chain-btn')) {
            const btn = e.target.closest('.chain-btn');
            const isLinked = btn.dataset.linked === 'true';
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            btn.dataset.linked = isLinked ? 'false' : 'true';
            
            // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
            const icon = btn.querySelector('i');
            if (isLinked) {
                icon.setAttribute('data-lucide', 'unlink');
                btn.title = '–°–æ–µ–¥–∏–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫—É';
            } else {
                icon.setAttribute('data-lucide', 'link');
                btn.title = '–†–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
            if (window.lucide) {
                window.lucide.createIcons();
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π –∞—É–¥–∏–æ
    tbody.addEventListener('click', (e) => {
        if (e.target.closest('.play-part-btn')) {
            const btn = e.target.closest('.play-part-btn');
            const audioUrl = btn.dataset.url;
            
            if (audioUrl) {
                playAudioPart(audioUrl);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    tbody.addEventListener('click', (e) => {
        const row = e.target.closest('tr');
        if (row && !e.target.closest('button')) { // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            selectMp3Row(row);
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
function updateNextRowStartTime(currentRow) {
    const currentEndTime = parseFloat(currentRow.querySelector('.end-time').value);
    if (isNaN(currentEndTime)) return;
    
    const nextRow = currentRow.nextElementSibling;
    if (nextRow && nextRow.classList.contains('sentence-row')) {
        const nextStartInput = nextRow.querySelector('.start-time');
        if (nextStartInput) {
            nextStartInput.value = currentEndTime.toFixed(2);
        }
    }
}

// –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –∞—É–¥–∏–æ
function playAudioPart(audioUrl, startTime = null, endTime = null, onEndCallback = null) {
    if (audioUrl) {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –∏–≥—Ä–∞–µ—Ç
        if (window.currentAudio) {
            window.currentAudio.pause();
            window.currentAudio = null;
        }
        
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
        const audio = new Audio(audioUrl);
        window.currentAudio = audio;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if (startTime !== null && startTime > 0) {
            audio.currentTime = startTime;
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audio.addEventListener('ended', () => {
            window.currentAudio = null;
            if (onEndCallback) {
                onEndCallback();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        audio.addEventListener('error', (e) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', e);
            window.currentAudio = null;
            if (onEndCallback) {
                onEndCallback();
            }
        });
        
        // –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        audio.play().catch(e => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', e);
            window.currentAudio = null;
            if (onEndCallback) {
                onEndCallback();
            }
        });
        
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        if (endTime !== null && endTime > 0) {
            const duration = endTime - (startTime || 0);
            setTimeout(() => {
                if (window.currentAudio === audio) {
                    audio.pause();
                    window.currentAudio = null;
                    if (onEndCallback) {
                        onEndCallback();
                    }
                }
            }, duration * 1000);
        }
    } else if (startTime !== null && endTime !== null && waveformCanvas) {
        // Fallback: –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ —á–µ—Ä–µ–∑ WaveformCanvas
        // WaveformCanvas –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º Audio API
        if (waveformCanvas && waveformCanvas.audioContext && waveformCanvas.audioContext.state === 'suspended') {
            waveformCanvas.audioContext.resume();
        }
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–∞
        const audio = new Audio();
        audio.src = lastAudioUrl;
        audio.currentTime = startTime;
        window.currentAudio = audio;
        
        audio.addEventListener('ended', () => {
            window.currentAudio = null;
            if (onEndCallback) {
                onEndCallback();
            }
        });
        
        audio.play();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        const stopAt = endTime - startTime;
        setTimeout(() => {
            if (window.currentAudio === audio) {
                audio.pause();
                window.currentAudio = null;
                if (onEndCallback) {
                    onEndCallback();
                }
            }
        }, stopAt * 1000);
    }
}

// –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ MP3 —Ç–∞–±–ª–∏—Ü–µ
function selectMp3Row(row) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    const tbody = document.querySelector('#sentences-table-mp3 tbody');
    tbody.querySelectorAll('tr').forEach(r => {
        r.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    row.classList.add('selected');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    const key = row.dataset.key;
    const textElement = row.querySelector('.text-original');
    const startInput = row.querySelector('.start-time');
    const endInput = row.querySelector('.end-time');
    
    if (textElement && startInput && endInput) {
        const text = textElement.textContent.trim();
        const start = parseFloat(startInput.value) || 0;
        const end = parseFloat(endInput.value) || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é selectedKey
        selectedKey = key;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const textOriginalRow = document.getElementById('text-original-row');
        if (textOriginalRow) {
            const rowNumber = parseInt(key) + 1;
            textOriginalRow.textContent = `(${rowNumber}) ${text}`;
        }
        
        const startTimeInput = safeGetElementById('startTime');
        const endTimeInput = safeGetElementById('endTime');
        if (startTimeInput && endTimeInput) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const duration = waveformCanvas ? waveformCanvas.getDuration() : 0;
            const isValid = start >= 0 && end > start && end <= duration;
            
            if (isValid) {
                startTimeInput.value = start.toFixed(2);
                endTimeInput.value = end.toFixed(2);
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: start=${start.toFixed(2)}, end=${end.toFixed(2)}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏', key, ':', start, '-', end, '(duration:', duration, ')');
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                startTimeInput.value = '0.00';
                endTimeInput.value = duration > 0 ? Math.floor(duration * 100) / 100 : '0.00';
            }
        } else {
            console.log('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è startTime/endTime –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω—É –µ—Å–ª–∏ —Ä–µ–∂–∏–º "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"
        const sentenceModeRadio = document.querySelector('input[name="waveMode"][value="sentence"]');
        if (sentenceModeRadio && sentenceModeRadio.checked) {
            createRegion(start, end, key);
        } else {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "–ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞", —Å–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–∏–∫—Ç–∞–Ω—Ç–∞
            if (currentDictation.tableFilled) {
                createRegion(currentDictation.dictationStartTime, currentDictation.dictationEndTime, 'dictation');
            }
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MP3 –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function saveMp3Dictation() {
    try {
        const tbody = document.querySelector('#sentences-table-mp3 tbody');
        if (!tbody) {
            alert('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        const rows = tbody.querySelectorAll('tr');
        if (rows.length === 0) {
            alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        const sentences = [];
        rows.forEach((row, index) => {
            const textElement = row.querySelector('.text-original');
            const startInput = row.querySelector('.start-time');
            const endInput = row.querySelector('.end-time');
            
            if (textElement && startInput && endInput) {
                sentences.push({
                    key: index.toString().padStart(3, '0'),
                    text: textElement.textContent.trim(),
                    audio: `${index.toString().padStart(3, '0')}_${currentDictation.language_original}_mp3_1.mp3`,
                    start: parseFloat(startInput.value) || 0,
                    end: parseFloat(endInput.value) || 0
                });
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞...');
        
        const response = await fetch('/save_mp3_dictation', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language: currentDictation.language_original,
                title: document.getElementById('title')?.value || '',
                name_of_shared_audio: currentDictation.mp3File?.filename || '',
                start_audio: currentDictation.dictationStartTime || 0,
                end_audio: currentDictation.dictationEndTime || 0,
                sentences: sentences
            })
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        
        const result = await response.json();
        if (result.success) {
            showNotification('MP3 –¥–∏–∫—Ç–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingIndicator();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        hideLoadingIndicator();
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ cover
function setupCoverHandlers() {
    const coverUploadBtn = document.getElementById('coverUploadBtn');
    const coverFile = document.getElementById('coverFile');
    const coverImage = document.getElementById('coverImage');

    if (coverUploadBtn && coverFile) {
        // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å" –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        coverUploadBtn.addEventListener('click', () => {
            coverFile.click();
        });

        // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        coverFile.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (!file.type.startsWith('image/')) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }

            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const reader = new FileReader();
                reader.onload = (e) => {
                    if (coverImage) {
                        coverImage.src = e.target.result;
                    }
                };
                reader.readAsDataURL(file);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                currentDictation.coverFile = file;
                
                console.log('Cover –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å:', file.name);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cover:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cover —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function loadCoverForExistingDictation(dictationId, originalLanguage) {
    const coverImage = document.getElementById('coverImage');
    if (!coverImage) return;

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å cover –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const dictationCoverUrl = `/static/data/dictations/${dictationId}/cover.webp`;
    
    try {
        const response = await fetch(dictationCoverUrl, { method: 'HEAD' });
        if (response.ok) {
            coverImage.src = dictationCoverUrl;
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω cover –¥–∏–∫—Ç–∞–Ω—Ç–∞:', dictationCoverUrl);
            return;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å cover –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
    }

    // –ï—Å–ª–∏ cover –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º cover –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultCoverUrl = `/static/data/covers/cover_${originalLanguage}.webp`;
    coverImage.src = defaultCoverUrl;
    console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cover –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultCoverUrl);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categories.json
async function loadCategoryInfoForDictation(dictationId) {
    try {
        const response = await fetch('/static/data/categories.json');
        if (!response.ok) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å categories.json');
            return;
        }
        
        const categories = await response.json();
        
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à –¥–∏–∫—Ç–∞–Ω—Ç
        function findCategoryWithDictation(node, targetDictationId) {
            if (node.data && node.data.dictations && node.data.dictations.includes(targetDictationId)) {
                return {
                    key: node.key,
                    title: node.title,
                    path: getCategoryPathFromNode(node)
                };
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–∞—Ö
            if (node.children) {
                for (const child of node.children) {
                    const result = findCategoryWithDictation(child, targetDictationId);
                    if (result) return result;
                }
            }
            
            return null;
        }
        
        // –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–∞—Ö
        for (const rootChild of categories.children || []) {
            const categoryInfo = findCategoryWithDictation(rootChild, dictationId);
            if (categoryInfo) {
                currentDictation.category_key = categoryInfo.key;
                currentDictation.category_title = categoryInfo.title;
                currentDictation.category_path = categoryInfo.path;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                updateCategoryPathDisplay(categoryInfo.path);
                console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞:', categoryInfo);
                return;
            }
        }
        
        console.warn('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
function getCategoryPathFromNode(node) {
    const path = [];
    let currentNode = node;
    
    while (currentNode && currentNode.title !== 'root') {
        path.unshift(currentNode.title);
        currentNode = currentNode.parent;
    }
    
    return path.join(' > ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function updateCategoryPathDisplay(categoryPath) {
    const dictationIdElement = document.getElementById('dictation-id');
    if (dictationIdElement && categoryPath) {
        const currentText = dictationIdElement.textContent;
        const newText = currentText + '\n' + categoryPath;
        dictationIdElement.innerHTML = currentText + '<br><small style="color: var(--color-button-text-yellow);">' + categoryPath + '</small>';
    }
}

function newSentances(key, text, key_audio, start = '', end = '') {
    return {
        key: key,
        text: text,
        audio: key_audio,
        start: start,
        end: end
    };

}

// ============================================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
function initNewDictation(safe_email, initData) {
    const timestamp = Date.now();
    const dictation_id = `dicta_${timestamp}`;
    const langDiv = document.getElementById("langPair");
    const language_original = langDiv.dataset.original;
    const language_translation = langDiv.dataset.translation;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ info.json —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ initData
    currentDictation = {
        id: dictation_id,
        isNew: true,
        safe_email: safe_email,
        language_original: language_original,
        language_translation: language_translation,
        category_key: categoryInfo.key || '',
        category_title: categoryInfo.title || '',
        category_path: categoryInfo.path || '',
        coverFile: null, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
        is_dialog: false,
        speakers: {},
        current_edit_mode: null,
        current_row_key: null
    };

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('title').value = '';
    document.getElementById('title_translation').value = '';
    document.getElementById('text').value = '';
    document.querySelector('#sentences-table tbody').innerHTML = '';
    document.getElementById('dictation-id').textContent = `–ù–æ–≤—ã–π –¥–∏–∫—Ç–∞–Ω—Ç: ` + dictation_id;
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞, —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    document.getElementById('textInputSection').style.display = 'block';
    document.getElementById('reenterTextSection').style.display = 'none';
    
    // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    setTimeout(() => {
        openStartModal();
    }, 100);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentDictation.category_path) {
        updateCategoryPathDisplay(currentDictation.category_path);
    }


    // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è input (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    const input = document.getElementById('audioFile');
    if (input) {
        input.value = '';
    }

}


// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function loadExistingDictation(initData) {

    const {
        dictation_id,
        original_language,
        translation_language,
        title,
        level,
        original_data,
        translation_data,
        audio_file,
        audio_words,
        safe_email
    } = initData;

    currentDictation = {
        id: dictation_id,
        isNew: false,
        safe_email: safe_email,
        language_original: original_language,
        language_translation: translation_language,
        audio_words: audio_words,
        category_key: '', // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ categories.json
        category_title: '',
        category_path: '',
        coverFile: null // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cover –≤ –ø–∞–º—è—Ç–∏
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    document.getElementById('dictation-id').textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º: ` + dictation_id;
    document.getElementById('title').value = title;
    document.getElementById('title_translation').value = translation_data?.title || "";

    // –ó–∞–≥—Ä—É–∂–∞–µ–º cover –µ—Å–ª–∏ –µ—Å—Ç—å
    await loadCoverForExistingDictation(dictation_id, original_language);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categories.json
    await loadCategoryInfoForDictation(dictation_id);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ MP3 –µ—Å–ª–∏ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ —Å MP3 —Ä–µ–∂–∏–º–æ–º)
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É MP3 –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ 404
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è MP3 –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù –î–∏–∫—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ avto, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É MP3 –¥–∞–Ω–Ω—ã—Ö');

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
        const response = await fetch('/copy_dictation_to_temp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: dictation_id,
                language_original: original_language,
                language_translation: translation_language
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ –î–∏–∫—Ç–∞–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ temp –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –≤ temp');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞ –≤ temp:', error);
    }

    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    applyPairedOutput(original_data, translation_data);

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ—Ä–∞–∑ (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å temp —Ñ–∞–π–ª–∞–º–∏)
    await renderSentenceTable(original_data?.sentences || [], translation_data?.sentences || []);
}

// –°–∫–ª–µ–∏–≤–∞–µ—Ç –ø–∞—Ä—ã —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç:
// English line, \n /*–†—É—Å—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞,
function formatPairedSentences(originalSentences, translationSentences) {
    // —Å–¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥—É –ø–æ key
    const tMap = new Map((translationSentences || []).map(s => [s.key, s.text || ""]));

    // –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –ø–æ—Ä—è–¥–∫–∞ key (000, 001, ...)
    const sorted = [...(originalSentences || [])]
        .sort((a, b) => a.key.localeCompare(b.key, undefined, { numeric: true }));

    const lines = [];
    for (const o of sorted) {
        const oText = (o && o.text) ? o.text : "";
        const tText = tMap.get(o?.key) ?? "";

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö
        lines.push(`${oText}`);
        if (tText) {
            lines.push(`/*${tText}`);
        }
    }
    return lines.join("\n");
}

function applyPairedOutput(original_data, translation_data) {
    const pairedText = formatPairedSentences(
        original_data?.sentences || [],
        translation_data?.sentences || []
    );

    // –∑–∞–ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ textarea —Å id="text" (—Ç–æ—Ç, —á—Ç–æ –≤ –ø–∞–Ω–µ–ª–∏ "–¢–µ–∫—Å—Ç –ø–æ —Ñ—Ä–∞–∑–∞–º")
    const textArea = document.getElementById('text');
    if (textArea) textArea.value = pairedText;

    // –µ—Å–ª–∏ —É –ø–µ—Ä–µ–≤–æ–¥–∞ –µ—Å—Ç—å title ‚Äî –ø–æ–ª–æ–∂–∏–º –µ–≥–æ –≤ input#title_translation
    const titleInput = document.getElementById('title_translation');
    if (titleInput && translation_data?.title) {
        titleInput.value = translation_data.title;
    }
}


async function renderSentenceTable(original_sentences = [], translation_sentences = []) {
    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –∞—É–¥–∏–æ
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º temp –ø–∞–ø–∫–∏, –¥–ª—è –Ω–æ–≤—ã—Ö - —Å–æ–∑–¥–∞–µ–º –∏—Ö
    let audio_dir_url_original, audio_dir_url_translation;
    
    if (currentDictation.isNew) {
        // –î–ª—è –Ω–æ–≤—ã—Ö –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ —á–µ—Ä–µ–∑ API
        const response = await fetch('/generate_path_audio', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                dictation_id: currentDictation.id,
                language_original: currentDictation.language_original,
                language_translation: currentDictation.language_translation
            })
        });
        const result = await response.json();
        audio_dir_url_original = "/" + result.audio_dir_original;
        audio_dir_url_translation = "/" + result.audio_dir_translation;
    } else {
        // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º temp –ø–∞–ø–∫–∏
        audio_dir_url_original = `/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/avto`;
        audio_dir_url_translation = `/static/data/temp/${currentDictation.id}/${currentDictation.language_translation}/avto`;
    }

    // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tbody = document.querySelector('#sentences-table tbody');
    if (!tbody) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #sentences-table tbody –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    tbody.innerHTML = '';
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    sentences_original = [];
    sentence_translation = [];

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ original_sentences - –º–∞—Å—Å–∏–≤
    if (!Array.isArray(original_sentences)) {
        console.error("original_sentences –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", original_sentences);
        return;
    }

    // 4. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    for (const [index, sentence] of original_sentences.entries()) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É sentence
        if (!sentence || typeof sentence !== 'object') {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", sentence);
            continue;
        }

        const key = sentence.key || index.toString().padStart(3, '0');
        const translationEntry = translation_sentences.find(t => t?.key === key);

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const originalText = sentence.text || '';
        const originalAudio = sentence.audio || '';
        //const audio_url_original = `${audio_dir_url_original}/${originalAudio}`;

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const translationText = translationEntry?.text || '';
        const translationAudio = translationEntry?.audio || '';
        //const audio_url_translation = `${audio_dir_url_translation}/${translationAudio}`;

        // 4. –í—ã–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏
        await createSentenceRow({
            tbody: tbody,
            key: key,
            index: index,
            original: originalText,
            translation: translationText,
            filename_audio_original: originalAudio,
            filename_audio_translation: translationAudio
        });
        
        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        sentences_original.push(newSentances(key, originalText, originalAudio));
        sentence_translation.push(newSentances(key, translationText, translationAudio));
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (window.lucide) {
        window.lucide.createIcons();
    }
    // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é
    selectFirstRowIfAny();
}


// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö MP3 –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞
async function loadMp3DataForExistingDictation(dictation_id, language) {
    try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º MP3 –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', dictation_id, language);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ mp3_1 –≤ temp
        const mp3Path = `/static/data/temp/${dictation_id}/${language}/mp3_1/sentences.json`;
        console.log('üìÅ –ü—É—Ç—å –∫ MP3 –¥–∞–Ω–Ω—ã–º:', mp3Path);
        
        const response = await fetch(mp3Path);
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.ok);
        
        if (response.ok) {
            const mp3Data = await response.json();
            console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ MP3 –¥–∞–Ω–Ω—ã–µ:', mp3Data);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ MP3 –≤ currentDictation
            currentDictation.mp3Data = mp3Data;
            currentDictation.mp3File = {
                filename: mp3Data.name_of_shared_audio || 'audio.mp3'
            };
            currentDictation.dictationStartTime = mp3Data.start_audio || 0;
            currentDictation.dictationEndTime = mp3Data.end_audio || 0;
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ currentDictation:', {
                mp3File: currentDictation.mp3File,
                dictationStartTime: currentDictation.dictationStartTime,
                dictationEndTime: currentDictation.dictationEndTime
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è start/end –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const startTimeInput = safeGetElementById('startTime');
            const endTimeInput = safeGetElementById('endTime');
            console.log('üéõÔ∏è –ü–æ–ª—è start/end –Ω–∞–π–¥–µ–Ω—ã:', !!startTimeInput, !!endTimeInput);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            let globalStart = mp3Data.start_audio || 0;
            let globalEnd = mp3Data.end_audio || 0;
            
            if (mp3Data.sentences && mp3Data.sentences.length > 0) {
                globalStart = mp3Data.sentences[0].start;
                globalEnd = mp3Data.sentences[mp3Data.sentences.length - 1].end;
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', globalStart, globalEnd);
            }
            
            if (startTimeInput && endTimeInput) {
                startTimeInput.value = globalStart.toFixed(2);
                endTimeInput.value = globalEnd.toFixed(2);
                console.log('‚úÖ –ü–æ–ª—è start/end –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', startTimeInput.value, endTimeInput.value);
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            if (mp3Data.name_of_shared_audio) {
                const audioUrl = `/static/data/temp/${dictation_id}/${language}/mp3_1/${mp3Data.name_of_shared_audio}`;
                console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª:', audioUrl);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                window.pendingAudioUrl = audioUrl;
                window.pendingAudioFilename = mp3Data.name_of_shared_audio;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
                const fileStatus = document.getElementById('mp3FileStatus');
                if (fileStatus) {
                    fileStatus.textContent = `–§–∞–π–ª: ${mp3Data.name_of_shared_audio}`;
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', mp3Data.name_of_shared_audio);
                }
                
                // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WaveformCanvas
                const mp3Page = document.getElementById('page-audio-mp3-1');
                if (mp3Page && mp3Page.classList.contains('active')) {
                    console.log('üîÑ –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WaveformCanvas...');
                    setTimeout(() => {
                        initWaveform(audioUrl);
                    }, 200);
                } else {
                    console.log('‚è≥ –ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ MP3, —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∂–µ...');
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (mp3Data.sentences && mp3Data.sentences.length > 0) {
                console.log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑', mp3Data.sentences.length, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
                await createMp3TableFromData(mp3Data.sentences);
            }
            
            console.log('‚úÖ MP3 –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', mp3Data);
        } else {
            console.log('üìù MP3 –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞');
        }
    } catch (error) {
        // –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –Ω–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –æ—à–∏–±–∫—É
        console.log('üìù MP3 –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∫—Ç–∞–Ω—Ç–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã MP3 –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function createMp3TableFromData(sentences) {
    try {
        console.log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', sentences);
        
        const tbody = document.querySelector('#sentences-table-mp3 tbody');
        if (!tbody) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ MP3 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        tbody.innerHTML = '';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (!window.mp3TableChanges) {
            window.mp3TableChanges = new Set();
        }
        
        sentences.forEach((sentence, index) => {
            const row = document.createElement('tr');
            row.dataset.key = sentence.key;
            
            row.innerHTML = `
                <td>${index + 1}</td>
                <td>
                    <div class="text-original" contenteditable="true">${sentence.text}</div>
                </td>
                <td>
                    <input type="number" class="start-time" value="${sentence.start.toFixed(2)}" step="0.01" min="0" data-row="${index}">
                </td>
                <td>
                    <input type="number" class="end-time" value="${sentence.end.toFixed(2)}" step="0.01" min="0" data-row="${index}">
                </td>
                <td>
                    <button class="chain-btn" data-linked="true" title="–†–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É" data-row="${index}">
                        <i data-lucide="link"></i>
                    </button>
                </td>
                <td>
                    <button class="play-part-btn" data-url="/static/data/temp/${currentDictation.id}/${currentDictation.language_original}/mp3_1/${sentence.audio}">
                        <i data-lucide="play"></i>
                    </button>
                </td>
                <td>
                    <button class="regenerate-btn" data-row="${index}" style="display: none;" title="–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ">
                        <i data-lucide="refresh-cw"></i>
                    </button>
                </td>
                <td>
                    <span class="change-indicator" data-row="${index}" style="display: none;">‚óè</span>
                </td>
            `;
            
            tbody.appendChild(row);
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
        if (window.lucide) {
            window.lucide.createIcons();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupChainHandlers();
        setupTimeInputHandlers();
        setupRegenerateHandlers();
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        const firstRow = tbody.querySelector('tr');
        if (firstRow) {
            selectMp3Row(firstRow);
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (sentences.length > 0) {
            const firstSentence = sentences[0];
            const globalStartInput = safeGetElementById('startTime');
            const globalEndInput = safeGetElementById('endTime');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            const dictationMode = document.querySelector('input[name="waveMode"][value="dictation"]');
            const sentenceMode = document.querySelector('input[name="waveMode"][value="sentence"]');
            
            if (globalStartInput && globalEndInput) {
                if (sentenceMode && sentenceMode.checked) {
                    // –†–µ–∂–∏–º "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞" - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                    globalStartInput.value = firstSentence.start.toFixed(2);
                    globalEndInput.value = firstSentence.end.toFixed(2);
                    console.log('üîÑ –†–µ–∂–∏–º "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞": —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:', 
                        globalStartInput.value, globalEndInput.value);
                } else {
                    // –†–µ–∂–∏–º "–ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞" - –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—è
                    console.log('‚ö†Ô∏è –†–µ–∂–∏–º "–ù–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –¥–∏–∫—Ç–∞–Ω—Ç–∞": —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π');
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = document.getElementById('save-mp3-btn');
        if (saveBtn) {
            saveBtn.style.display = 'inline-block';
        }
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ MP3 —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã MP3:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
async function loadPendingAudio() {
    console.log('üîç loadPendingAudio: pendingAudioUrl =', window.pendingAudioUrl);
    console.log('üîç loadPendingAudio: pendingWaveSurferUrl =', window.pendingWaveSurferUrl);
    
    if (!window.pendingAudioUrl) {
        console.log('‚ùå –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (pendingAudioUrl)');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pendingAudioUrl (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL)
    const audioUrl = window.pendingAudioUrl;
    console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª:', audioUrl);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
    const waveformContainer = document.getElementById('waveform');
    if (waveformContainer) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–≤–Ω—ã 0
        if (waveformContainer.offsetWidth === 0 || waveformContainer.offsetHeight === 0) {
            console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...');
            waveformContainer.style.width = '100%';
            waveformContainer.style.height = '100px';
            waveformContainer.style.minHeight = '100px';
        }
        console.log('üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', {
            width: waveformContainer.offsetWidth,
            height: waveformContainer.offsetHeight
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Peaks.js —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
    initWaveform(audioUrl);
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    window.pendingAudioUrl = null;
    window.pendingAudioFilename = null;
    window.pendingWaveSurferUrl = null;
    
    console.log('‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ MP3 –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
async function loadMp3AudioFile(audioUrl, filename) {
    try {
        console.log('üéµ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª:', audioUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const response = await fetch(audioUrl, { method: 'HEAD' });
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞—É–¥–∏–æ:', response.status, response.ok);
        
        if (response.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º–æ–π
            window.pendingAudioUrl = audioUrl;
            window.pendingAudioFilename = filename;
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', audioUrl);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
            const fileStatus = document.getElementById('mp3FileStatus');
            if (fileStatus) {
                fileStatus.textContent = `–§–∞–π–ª: ${filename}`;
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', filename);
            } else {
                console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç #mp3FileStatus –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            console.log('‚úÖ MP3 –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', filename);
        } else {
            console.log('‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', audioUrl);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MP3 –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// document.addEventListener('DOMContentLoaded', () => {
function initDictationGenerator() {
    // const path = window.location.pathname;


    // 1. –ü–æ–ª—É—á–∞–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const initRaw = document.getElementById("init-data")?.textContent;

    // 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
    const initData = JSON.parse(initRaw);

    // –ü–æ–ª—É—á–∞–µ–º safe_email –∏–∑ UserManager
    let safe_email = window.UM.getSafeEmail();
    if (safe_email === 'anonymous') {
        safe_email = initData.safe_email || 'anonymous';
    }

    // console.log("‚úÖ Safe email:", safe_email);

    // 4. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º "–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å"
    if (initData.editMode === true) {
        loadExistingDictation(initData);
    } else {
        initNewDictation(safe_email, initData);
    }


    // setupButtons(); // –£–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    // initializeUser(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JWT –≤–µ—Ä—Å–∏—è)
    // setupAuthHandlers(); // –î–û–ë–ê–í–ò–¢–¨ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    setupExitHandlers(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—Ö–æ–¥–∞
    setupStartModalHandlers(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

}


(function initSplitView() {
    const container = document.querySelector('.panels-wagons');
    if (!container) return;

    const left = container.querySelector('.left-panel');
    const right = container.querySelector('.right-panel');
    const resizer = container.querySelector('.resizer');
    if (!left || !right || !resizer) return;

    const LEFT_MIN = 240;  // —Ç–µ –∂–µ, —á—Ç–æ –≤ CSS min-width
    const RIGHT_MIN = 240;

    let dragging = false;

    const startDrag = (clientX) => {
        dragging = true;
        container.classList.add('resizing');
    };

    const applySplitAt = (clientX) => {
        const rect = container.getBoundingClientRect();
        // x ‚Äî –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let x = clientX - rect.left;

        // —É–≤–∞–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —à–∏—Ä–∏–Ω—ã
        x = Math.max(LEFT_MIN, Math.min(x, rect.width - RIGHT_MIN));

        const leftPercent = (x / rect.width) * 100;
        const rightPercent = 100 - leftPercent;

        // —Ñ–∏–∫—Å–∏—Ä—É–µ–º basis –¥–ª—è –æ–±–µ–∏—Ö –ø–∞–Ω–µ–ª–µ–π
        left.style.flex = `0 0 ${leftPercent}%`;
        right.style.flex = `0 0 ${rightPercent}%`;

        // –µ—Å–ª–∏ –µ—Å—Ç—å Peaks.js ‚Äî –ø–∏—Ö–Ω—ë–º –µ–≥–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
        if (waveformCanvas) {
            requestAnimationFrame(() => {
                waveformCanvas.render();
            });
        }
    };

    const onMouseDown = (e) => { e.preventDefault(); startDrag(e.clientX); };
    const onMouseMove = (e) => { if (dragging) applySplitAt(e.clientX); };
    const onMouseUp = () => { dragging = false; container.classList.remove('resizing'); };

    resizer.addEventListener('mousedown', onMouseDown);
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);

    // –¢–∞—á-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    resizer.addEventListener('touchstart', (e) => startDrag(e.touches[0].clientX), { passive: true });
    document.addEventListener('touchmove', (e) => dragging && applySplitAt(e.touches[0].clientX), { passive: true });
    document.addEventListener('touchend', onMouseUp);
})();

// ============================================================================
// –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –°–¢–ê–†–¢–û–í–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û
// ============================================================================

/**
 * –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function openStartModal() {
    const modal = document.getElementById('startModal');
    if (modal) {
        modal.style.display = 'flex';
        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        document.getElementById('isDialogCheckbox').checked = false;
        document.getElementById('translationDelimiter').value = '/*';
        document.getElementById('startTextInput').value = '';
        toggleSpeakersTable(false);
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function closeStartModal() {
    const modal = document.getElementById('startModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å–ø–∏–∫–µ—Ä–æ–≤
 */
function toggleSpeakersTable(show) {
    const speakersTable = document.getElementById('speakersTable');
    if (speakersTable) {
        speakersTable.style.display = show ? 'block' : 'none';
    }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞
 */
function addSpeaker() {
    const tbody = document.querySelector('#speakersTableContent tbody');
    if (!tbody) return;

    const speakerCount = tbody.children.length + 1;
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${speakerCount}</td>
        <td><input type="text" class="speaker-name" value="–°–ø–∏–∫–µ—Ä ${speakerCount}" placeholder="–ò–º—è —Å–ø–∏–∫–µ—Ä–∞"></td>
        <td><button type="button" class="remove-speaker">–£–¥–∞–ª–∏—Ç—å</button></td>
    `;
    tbody.appendChild(row);
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞
 */
function removeSpeaker(button) {
    const row = button.closest('tr');
    if (row) {
        row.remove();
        // –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞
        const tbody = document.querySelector('#speakersTableContent tbody');
        Array.from(tbody.children).forEach((row, index) => {
            row.cells[0].textContent = index + 1;
        });
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 */
function getSpeakersFromTable() {
    const speakers = {};
    const speakerInputs = document.querySelectorAll('.speaker-name');
    speakerInputs.forEach((input, index) => {
        const speakerId = (index + 1).toString();
        const speakerName = input.value.trim() || `–°–ø–∏–∫–µ—Ä ${speakerId}`;
        speakers[speakerId] = speakerName;
    });
    return speakers;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 */
function generateAudioFileName(key, language, tipe_audio = 'avto') {
    return `${key}_${language}_${tipe_audio}.mp3`;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
 */
async function parseInputText(text, delimiter, isDialog, speakers) {
    // –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    if (lines.length === 0) {
        return { original: [], translation: [] };
    }

    const original = [];
    const translation = [];
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ (–µ—Å—Ç—å –ª–∏ delimiter –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ)
    const hasTranslation = lines.length > 1 && lines[1].startsWith(delimiter);
    
    if (isDialog) {
        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞
        let currentSpeaker = '1';
        let speakerIndex = 0;
        const speakerIds = Object.keys(speakers);
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            
            if (line.startsWith(delimiter)) {
                // –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                const translationText = line.substring(delimiter.length).trim();
                if (translationText) {
                    translation.push({
                        key: original.length.toString().padStart(3, '0'),
                        speaker: currentSpeaker,
                        text: translationText,
                        audio: '',
                        shared_audio: '',
                        start: 0,
                        end: 0,
                        chain: false
                    });
                }
            } else {
                // –°—Ç—Ä–æ–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                let originalText = line;
                let speakerId = currentSpeaker;
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç "1: —Ç–µ–∫—Å—Ç"
                const dialogMatch = line.match(/^(\d+):\s*(.+)$/);
                if (dialogMatch) {
                    speakerId = dialogMatch[1];
                    originalText = dialogMatch[2];
                } else {
                    // –ß–µ—Ä–µ–¥–æ–≤–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    if (speakerIds.length > 1) {
                        currentSpeaker = speakerIds[speakerIndex % speakerIds.length];
                        speakerIndex++;
                    }
                }
                
                const key = original.length.toString().padStart(3, '0');
                const audioFileName = generateAudioFileName(key, currentDictation.language_original);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                await generateAudioForSentence({
                    key: key,
                    speaker: currentSpeaker,
                    text: originalText,
                    audio: audioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                }, currentDictation.language_original);
                
                original.push({
                    key: key,
                    speaker: currentSpeaker,
                    text: originalText,
                    audio: audioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                });
            }
        }
    } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (hasTranslation) {
            // –ï—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥
            for (let i = 0; i < lines.length; i += 2) {
                const originalText = lines[i];
                const translationText = lines[i + 1] ? lines[i + 1].substring(delimiter.length).trim() : '';
                
                const key = original.length.toString().padStart(3, '0');
                const originalAudioFileName = generateAudioFileName(key, currentDictation.language_original);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                await generateAudioForSentence({
                    key: key,
                    speaker: '1',
                    text: originalText,
                    audio: originalAudioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                }, currentDictation.language_original);
                
                original.push({
                    key: key,
                    speaker: '1',
                    text: originalText,
                    audio: originalAudioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                });
                
                if (translationText) {
                    const translationAudioFileName = generateAudioFileName(key, currentDictation.language_translation);
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                    await generateAudioForSentence({
                        key: key,
                        speaker: '1',
                        text: translationText,
                        audio: translationAudioFileName,
                        shared_audio: '',
                        start: 0,
                        end: 0,
                        chain: false
                    }, currentDictation.language_translation);
                    
                    translation.push({
                        key: key,
                        speaker: '1',
                        text: translationText,
                        audio: translationAudioFileName,
                        shared_audio: '',
                        start: 0,
                        end: 0,
                        chain: false
                    });
                }
            }
        } else {
            // –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
            for (let index = 0; index < lines.length; index++) {
                const line = lines[index];
                const key = index.toString().padStart(3, '0');
                const audioFileName = generateAudioFileName(key, currentDictation.language_original);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                await generateAudioForSentence({
                    key: key,
                    speaker: '1',
                    text: line,
                    audio: audioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                }, currentDictation.language_original);
                
                original.push({
                    key: key,
                    speaker: '1',
                    text: line,
                    audio: audioFileName,
                    shared_audio: '',
                    start: 0,
                    end: 0,
                    chain: false
                });
            }
        }
    }
    
    return { original, translation };
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞
 */
async function createDictationFromStart() {
    const text = document.getElementById('startTextInput').value.trim();
    const delimiter = document.getElementById('translationDelimiter').value.trim();
    const isDialog = document.getElementById('isDialogCheckbox').checked;
    
    if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∫—Ç–∞–Ω—Ç–∞');
        return;
    }
    
    const speakers = isDialog ? getSpeakersFromTable() : { '1': '–°–ø–∏–∫–µ—Ä 1' };
    
    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    const parsedData = await parseInputText(text, delimiter, isDialog, speakers);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    currentDictation.is_dialog = isDialog;
    currentDictation.speakers = speakers;
    
    workingData.original = {
        language: currentDictation.language_original,
        title: document.getElementById('title').value || '–î–∏–∫—Ç–∞–Ω—Ç',
        speakers: speakers,
        sentences: parsedData.original
    };
    
    workingData.translation = {
        language: currentDictation.language_translation,
        title: document.getElementById('title_translation').value || '–ü–µ—Ä–µ–≤–æ–¥',
        speakers: speakers,
        sentences: parsedData.translation
    };
    
    // –°–∫—Ä—ã—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    document.getElementById('textInputSection').style.display = 'none';
    document.getElementById('reenterTextSection').style.display = 'block';
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥
    if (isDialog) {
        showSpeakersInHeader(speakers);
    }
    
    // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
    createTable();
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeStartModal();
}

// –§—É–Ω–∫—Ü–∏—è generateAudioForAllSentences —É–¥–∞–ª–µ–Ω–∞ - –∞—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä—è–º–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
async function generateAudioForSentence(sentence, language) {
    if (!sentence.text.trim()) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ sentence.audio
    const filename = sentence.audio;
    
    try {
        const response = await fetch('/generate_audio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                text: sentence.text,
                language: language,
                filename: filename,
                filename_audio: filename,
                tipe_audio: 'avto',
                dictation_id: currentDictation.id,
                safe_email: currentDictation.safe_email
            })
        });
        
        if (response.ok) {
            console.log(`‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${filename}`);
        } else {
            const errorText = await response.text();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è ${filename}: ${response.status} ${errorText}`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ
 */
function showSpeakersInHeader(speakers) {
    const speakersDisplay = document.getElementById('speakersDisplay');
    const speakersList = document.getElementById('speakersList');
    
    if (speakersDisplay && speakersList) {
        speakersDisplay.style.display = 'block';
        speakersList.innerHTML = '';
        
        Object.entries(speakers).forEach(([id, name]) => {
            const span = document.createElement('span');
            span.className = 'speaker-badge';
            span.textContent = `${id}: ${name}`;
            span.style.backgroundColor = getSpeakerColor(id);
            speakersList.appendChild(span);
        });
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
 */
function getSpeakerColor(speakerId) {
    const colors = ['#ff9999', '#99ff99', '#9999ff', '#ffff99', '#ff99ff', '#99ffff'];
    const index = parseInt(speakerId) - 1;
    return colors[index % colors.length];
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function setupStartModalHandlers() {
    // –ß–µ–∫–±–æ–∫—Å –¥–∏–∞–ª–æ–≥–∞
    const isDialogCheckbox = document.getElementById('isDialogCheckbox');
    if (isDialogCheckbox) {
        isDialogCheckbox.addEventListener('change', (e) => {
            toggleSpeakersTable(e.target.checked);
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞
    const addSpeakerBtn = document.getElementById('addSpeakerBtn');
    if (addSpeakerBtn) {
        addSpeakerBtn.addEventListener('click', addSpeaker);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-speaker')) {
            removeSpeaker(e.target);
        }
    });

    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const cancelStartBtn = document.getElementById('cancelStartBtn');
    if (cancelStartBtn) {
        cancelStartBtn.addEventListener('click', closeStartModal);
    }

    const createDictationBtn = document.getElementById('createDictationBtn');
    if (createDictationBtn) {
        createDictationBtn.addEventListener('click', createDictationFromStart);
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ"
    const reenterTextBtn = document.getElementById('reenterTextBtn');
    if (reenterTextBtn) {
        reenterTextBtn.addEventListener('click', () => {
            if (confirm('–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                // TODO: —Ç–∞–±–ª–∏—Ü—É –Ω–∞–¥–æ —É–¥–∞–ª—è—Ç—å –∏–∑ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∞ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –Ω–µ—Ç
                const tbody = document.querySelector('#sentences-table tbody');
                if (tbody) {
                    tbody.innerHTML = '';
                }
                
                // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
                document.getElementById('reenterTextSection').style.display = 'none';
                document.getElementById('textInputSection').style.display = 'block';
                
                // –û—á–∏—Å—Ç–∏—Ç—å workingData
                workingData.original.sentences = [];
                workingData.translation.sentences = [];
                
                // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                openStartModal();
            }
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤—ã–π—Ç–∏"
    const saveAndExitBtn = document.getElementById('saveAndExitBtn');
    if (saveAndExitBtn) {
        saveAndExitBtn.addEventListener('click', () => {
            if (confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É?')) {
                saveDictationAndExit();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const startModal = document.getElementById('startModal');
    if (startModal) {
        startModal.addEventListener('click', (e) => {
            if (e.target === startModal) {
                closeStartModal();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    setupAudioSettingsModalHandlers();
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (17 –∫–æ–ª–æ–Ω–æ–∫)
 */
function createTable() {
    const tbody = document.querySelector('#sentences-table tbody');
    if (!tbody) return;

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å–ø–∏–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞
    const speakerCol = document.querySelector('.col-speaker');
    if (speakerCol) {
        speakerCol.style.display = currentDictation.is_dialog ? 'table-cell' : 'none';
    }

    // –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const originalSentences = workingData.original.sentences || [];
    const translationSentences = workingData.translation.sentences || [];

    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á–∞–º
    const allKeys = new Set();
    originalSentences.forEach(s => allKeys.add(s.key));
    translationSentences.forEach(s => allKeys.add(s.key));

    Array.from(allKeys).sort().forEach(key => {
        const originalSentence = originalSentences.find(s => s.key === key);
        const translationSentence = translationSentences.find(s => s.key === key);

        const row = createTableRow(key, originalSentence, translationSentence);
        tbody.appendChild(row);
    });
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
 */
function createTableRow(key, originalSentence, translationSentence) {
    const row = document.createElement('tr');
    row.dataset.key = key;
    row.className = 'sentence-row';

    // –ö–æ–ª–æ–Ω–∫–∞ 0: ‚Ññ
    const numberCell = document.createElement('td');
    numberCell.className = 'col-number';
    numberCell.textContent = parseInt(key) + 1;
    row.appendChild(numberCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 1: –°–ø–∏–∫–µ—Ä (–µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥)
    if (currentDictation.is_dialog) {
        const speakerCell = document.createElement('td');
        speakerCell.className = 'col-speaker';
        
        const speakerSelect = document.createElement('select');
        speakerSelect.className = 'speaker-select';
        
        Object.entries(currentDictation.speakers).forEach(([id, name]) => {
            const option = document.createElement('option');
            option.value = id;
            option.textContent = name;
            if (originalSentence && originalSentence.speaker === id) {
                option.selected = true;
            }
            speakerSelect.appendChild(option);
        });
        
        speakerCell.appendChild(speakerSelect);
        row.appendChild(speakerCell);
    }

    // –ö–æ–ª–æ–Ω–∫–∞ 2: –û—Ä–∏–≥–∏–Ω–∞–ª
    const originalCell = document.createElement('td');
    originalCell.className = 'col-original';
    const originalInput = document.createElement('div');
    originalInput.className = 'text-original';
    originalInput.contentEditable = true;
    originalInput.textContent = originalSentence ? originalSentence.text : '';
    originalCell.appendChild(originalInput);
    row.appendChild(originalCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 3: ‚ñ∂Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª
    const playOriginalCell = document.createElement('td');
    playOriginalCell.className = 'col-play-original';
    const playOriginalBtn = document.createElement('button');
    playOriginalBtn.className = 'play-audio';
    playOriginalBtn.innerHTML = '<i data-lucide="play"></i>';
    playOriginalBtn.dataset.key = key;
    playOriginalBtn.dataset.language = 'original';
    playOriginalBtn.dataset.file = originalSentence?.audio || '';
    playOriginalCell.appendChild(playOriginalBtn);
    row.appendChild(playOriginalCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 4: ‚öôÔ∏è –û—Ä–∏–≥–∏–Ω–∞–ª
    const settingsOriginalCell = document.createElement('td');
    settingsOriginalCell.className = 'col-settings-original';
    const settingsOriginalBtn = document.createElement('button');
    settingsOriginalBtn.className = 'settings-audio';
    settingsOriginalBtn.innerHTML = '<i data-lucide="settings"></i>';
    settingsOriginalBtn.dataset.key = key;
    settingsOriginalBtn.dataset.language = 'original';
    settingsOriginalCell.appendChild(settingsOriginalBtn);
    row.appendChild(settingsOriginalCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 5: –ü–µ—Ä–µ–≤–æ–¥
    const translationCell = document.createElement('td');
    translationCell.className = 'col-translation';
    const translationInput = document.createElement('div');
    translationInput.className = 'text-translation';
    translationInput.contentEditable = true;
    translationInput.textContent = translationSentence ? translationSentence.text : '';
    translationCell.appendChild(translationInput);
    row.appendChild(translationCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 6: ‚ñ∂Ô∏è –ü–µ—Ä–µ–≤–æ–¥
    const playTranslationCell = document.createElement('td');
    playTranslationCell.className = 'col-play-translation';
    const playTranslationBtn = document.createElement('button');
    playTranslationBtn.className = 'play-audio';
    playTranslationBtn.innerHTML = '<i data-lucide="play"></i>';
    playTranslationBtn.dataset.key = key;
    playTranslationBtn.dataset.language = 'translation';
    playTranslationBtn.dataset.file = translationSentence?.audio || '';
    playTranslationCell.appendChild(playTranslationBtn);
    row.appendChild(playTranslationCell);

    // –ö–æ–ª–æ–Ω–∫–∞ 7: ‚öôÔ∏è –ü–µ—Ä–µ–≤–æ–¥
    const settingsTranslationCell = document.createElement('td');
    settingsTranslationCell.className = 'col-settings-translation';
    const settingsTranslationBtn = document.createElement('button');
    settingsTranslationBtn.className = 'settings-audio';
    settingsTranslationBtn.innerHTML = '<i data-lucide="settings"></i>';
    settingsTranslationBtn.dataset.key = key;
    settingsTranslationBtn.dataset.language = 'translation';
    settingsTranslationCell.appendChild(settingsTranslationBtn);
    row.appendChild(settingsTranslationCell);

    // –ö–æ–ª–æ–Ω–∫–∏ 8-16: –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ (—Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const audioModeCells = [
        { class: 'col-generate-tts', content: '<button class="generate-tts"><i data-lucide="volume-2"></i></button>' },
        { class: 'col-checkbox', content: '<input type="checkbox" class="audio-checkbox">' },
        { class: 'col-audio-file', content: '<input type="text" class="audio-file-input" placeholder="audio.mp3">' },
        { class: 'col-start', content: '<input type="number" class="start-input" step="0.01" min="0">' },
        { class: 'col-end', content: '<input type="number" class="end-input" step="0.01" min="0">' },
        { class: 'col-chain', content: '<input type="checkbox" class="chain-checkbox">' },
        { class: 'col-create-audio', content: '<button class="create-audio"><i data-lucide="plus"></i></button>' },
        { class: 'col-play-audio', content: '<button class="play-audio-settings"><i data-lucide="play"></i></button>' },
        { class: 'col-apply', content: '<button class="apply-audio">–ü—Ä–∏–º–µ–Ω–∏—Ç—å ‚§µÔ∏è</button>' }
    ];

    audioModeCells.forEach(({ class: className, content }) => {
        const cell = document.createElement('td');
        cell.className = className;
        cell.style.display = 'none';
        cell.innerHTML = content;
        
        // –î–æ–±–∞–≤–∏—Ç—å data-–∞—Ç—Ä–∏–±—É—Ç—ã
        if (content.includes('input') || content.includes('button')) {
            const element = cell.querySelector('input, button');
            if (element) {
                element.dataset.key = key;
            }
        }
        
        row.appendChild(cell);
    });

    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ sentences
    if (originalSentence) {
        const audioFileInput = row.querySelector('.audio-file-input');
        const startInput = row.querySelector('.start-input');
        const endInput = row.querySelector('.end-input');
        const chainCheckbox = row.querySelector('.chain-checkbox');
        
        if (audioFileInput) audioFileInput.value = originalSentence.audio || '';
        if (startInput) startInput.value = originalSentence.start || 0;
        if (endInput) endInput.value = originalSentence.end || 0;
        if (chainCheckbox) chainCheckbox.checked = originalSentence.chain || false;
    }

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupRowEventHandlers(row, originalSentence, translationSentence);

    return row;
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function setupRowEventHandlers(row, originalSentence, translationSentence) {
    const key = row.dataset.key;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    const originalInput = row.querySelector('.text-original');
    if (originalInput) {
        originalInput.addEventListener('input', () => {
            const newText = originalInput.textContent.trim();
            const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === key);
            if (sentenceIndex !== -1) {
                workingData.original.sentences[sentenceIndex].text = newText;
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    const translationInput = row.querySelector('.text-translation');
    if (translationInput) {
        translationInput.addEventListener('input', () => {
            const newText = translationInput.textContent.trim();
            const sentenceIndex = workingData.translation.sentences.findIndex(s => s.key === key);
            if (sentenceIndex !== -1) {
                workingData.translation.sentences[sentenceIndex].text = newText;
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    const settingsBtns = row.querySelectorAll('.settings-audio');
    settingsBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const language = btn.dataset.language;
            toggleAudioSettingsMode(key, language);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const playBtns = row.querySelectorAll('.play-audio');
    playBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const language = btn.dataset.language;
            playAudioForRow(key, language);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞
    const speakerSelect = row.querySelector('.speaker-select');
    if (speakerSelect) {
        speakerSelect.addEventListener('change', () => {
            const newSpeaker = speakerSelect.value;
            const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === key);
            if (sentenceIndex !== -1) {
                workingData.original.sentences[sentenceIndex].speaker = newSpeaker;
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–µ–π start/end –¥–ª—è —Ü–µ–ø–æ—á–µ–∫
    const startInput = row.querySelector('.start-input');
    const endInput = row.querySelector('.end-input');
    
    if (startInput) {
        startInput.addEventListener('input', () => {
            updateChain(key, 'start', startInput.value);
        });
    }
    
    if (endInput) {
        endInput.addEventListener('input', () => {
            updateChain(key, 'end', endInput.value);
        });
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
 */
function toggleAudioSettingsMode(rowKey, language) {
    // –°–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    const table = document.querySelector('#sentences-table');
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
        const cells = row.cells;
        
        if (language === 'original') {
            // –°–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ (5-7), –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (8-16)
            for (let i = 5; i <= 7; i++) {
                if (cells[i]) cells[i].style.display = 'none';
            }
            for (let i = 8; i <= 16; i++) {
                if (cells[i]) cells[i].style.display = 'table-cell';
            }
        } else {
            // –°–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (2-4), –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (8-16)
            for (let i = 2; i <= 4; i++) {
                if (cells[i]) cells[i].style.display = 'none';
            }
            for (let i = 8; i <= 16; i++) {
                if (cells[i]) cells[i].style.display = 'table-cell';
            }
        }
    });
    
    currentDictation.current_edit_mode = language;
    currentDictation.current_row_key = rowKey;
    
    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
    openAudioSettingsModal(rowKey, language);
}

/**
 * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function openAudioSettingsModal(rowKey, language) {
    const modal = document.getElementById('audioSettingsModal');
    if (modal) {
        modal.style.display = 'block';
        
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        const row = document.querySelector(`tr[data-key="${rowKey}"]`);
        if (row) {
            const textElement = language === 'original' ? 
                row.querySelector('.text-original') : 
                row.querySelector('.text-translation');
            
            if (textElement) {
                document.getElementById('currentSentenceText').textContent = textElement.textContent;
            }
            
            // –ó–∞–ø–æ–ª–Ω–∏—Ç—å start/end –∏–∑ —Å—Ç—Ä–æ–∫–∏
            const startInput = row.querySelector('.start-input');
            const endInput = row.querySelector('.end-input');
            
            if (startInput && endInput) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è
                document.getElementById('audioStartTime').value = startInput.value;
                document.getElementById('audioEndTime').value = endInput.value;
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
                document.getElementById('startTime').value = startInput.value;
                document.getElementById('endTime').value = endInput.value;
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        loadAudioFilesList();
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
        setupTimeFieldSync();
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
 */
function loadAudioFilesList() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    const select = document.getElementById('audioFilesSelect');
    if (select) {
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</option>';
        // –î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
 */
function playAudioForRow(rowKey, language) {
    const row = document.querySelector(`tr[data-key="${rowKey}"]`);
    if (!row) return;
    
    // –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É play –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const playBtn = row.querySelector(`button.play-audio[data-language="${language}"]`);
    if (!playBtn) {
        console.log(`No play button found for row ${rowKey}, language ${language}`);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ —É–∂–µ –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if (playBtn.dataset.playing === 'true') {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        stopAudioForButton(playBtn);
        return;
    }
    
    const audioFile = playBtn.dataset.file;
    if (!audioFile) {
        console.log(`No audio file for row ${rowKey}, language ${language}`);
        return;
    }
    
    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å URL –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    const actualLanguage = language === 'original' ? currentDictation.language_original : currentDictation.language_translation;
    const audioUrl = `/static/data/temp/${currentDictation.id}/${actualLanguage}/${audioFile}`;
    console.log(`Playing ${audioUrl} for ${language} row ${rowKey}`);
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è start/end –≤—Ä–µ–º–µ–Ω–∏
    const sentence = getSentenceByKey(rowKey, language);
    const startTime = sentence?.start || 0;
    const endTime = sentence?.end || null;
    
    // –ò–∑–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É –Ω–∞ "–ø–∞—É–∑–∞" (–¥–≤–µ –ø–æ–ª–æ—Å–∫–∏)
    setButtonToPause(playBtn);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    playAudioPart(audioUrl, startTime, endTime, () => {
        // Callback –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞—É–¥–∏–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
        setButtonToPlay(playBtn);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
function getSentenceByKey(key, language) {
    if (language === 'original') {
        return workingData.original.sentences.find(s => s.key === key);
    } else {
        return workingData.translation.sentences.find(s => s.key === key);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ play/pause
function setButtonToPause(button) {
    button.dataset.playing = 'true';
    button.innerHTML = '<i data-lucide="pause"></i>';
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

function setButtonToPlay(button) {
    button.dataset.playing = 'false';
    button.innerHTML = '<i data-lucide="play"></i>';
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

function stopAudioForButton(button) {
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (window.currentAudio) {
        window.currentAudio.pause();
        window.currentAudio.currentTime = 0;
        window.currentAudio = null;
    }
    
    // –í–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ play
    setButtonToPlay(button);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç –∏ –≤—ã–π—Ç–∏
 */
async function saveDictationAndExit() {
    try {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveData = {
            id: currentDictation.id,
            language_original: currentDictation.language_original,
            language_translation: currentDictation.language_translation,
            title: document.getElementById('title').value,
            level: 'A1', // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            is_dialog: currentDictation.is_dialog,
            speakers: currentDictation.speakers,
            sentences: {
                [currentDictation.language_original]: workingData.original,
                [currentDictation.language_translation]: workingData.translation
            }
        };

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/save_dictation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(saveData)
        });

        const result = await response.json();
        
        if (result.success) {
            console.log('–î–∏–∫—Ç–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ temp –≤ dictations
            try {
                const copyResponse = await fetch('/copy_dictation_to_final', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        dictation_id: currentDictation.id
                    })
                });
                
                const copyResult = await copyResponse.json();
                if (copyResult.success) {
                    console.log('–î–∏–∫—Ç–∞–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É');
                }
            } catch (copyError) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É:', copyError);
            }
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            window.location.href = '/';
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∫—Ç–∞–Ω—Ç–∞: ' + error.message);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function setupAudioSettingsModalHandlers() {
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    const cancelAudioBtn = document.getElementById('cancelAudioBtn');
    if (cancelAudioBtn) {
        cancelAudioBtn.addEventListener('click', () => {
            closeAudioSettingsModal();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    const applyAudioBtn = document.getElementById('applyAudioBtn');
    if (applyAudioBtn) {
        applyAudioBtn.addEventListener('click', () => {
            applyAudioSettings();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
    const openFileBtn = document.getElementById('openFileBtn');
    if (openFileBtn) {
        openFileBtn.addEventListener('click', () => {
            openAudioFileDialog();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–ê—É–¥–∏–æ –≤ —Ç–∞–±–ª–∏—Ü—É"
    const audioToTableBtn = document.getElementById('audioToTableBtn');
    if (audioToTableBtn) {
        audioToTableBtn.addEventListener('click', () => {
            applyAudioToTable();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    const recordAudioBtn = document.getElementById('recordAudioBtn');
    if (recordAudioBtn) {
        recordAudioBtn.addEventListener('click', () => {
            startAudioRecording();
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const audioPlayBtn = document.getElementById('audioPlayBtn');
    if (audioPlayBtn) {
        audioPlayBtn.addEventListener('click', () => {
            toggleAudioPlayback();
        });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π start/end —Å —Ç–∞–±–ª–∏—Ü–µ–π
    const audioStartTime = document.getElementById('audioStartTime');
    const audioEndTime = document.getElementById('audioEndTime');
    
    if (audioStartTime) {
        audioStartTime.addEventListener('input', () => {
            syncTimeWithTable('start', audioStartTime.value);
        });
    }
    
    if (audioEndTime) {
        audioEndTime.addEventListener('input', () => {
            syncTimeWithTable('end', audioEndTime.value);
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const audioModal = document.getElementById('audioSettingsModal');
    if (audioModal) {
        audioModal.addEventListener('click', (e) => {
            if (e.target === audioModal) {
                closeAudioSettingsModal();
            }
        });
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ
 */
function closeAudioSettingsModal() {
    const modal = document.getElementById('audioSettingsModal');
    if (modal) {
        modal.style.display = 'none';
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    currentDictation.current_edit_mode = null;
    currentDictation.current_row_key = null;
    
    // –í–µ—Ä–Ω—É—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
    resetTableVisibility();
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
 */
function resetTableVisibility() {
    const table = document.querySelector('#sentences-table');
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
        const cells = row.cells;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (0-7)
        for (let i = 0; i <= 7; i++) {
            if (cells[i]) cells[i].style.display = 'table-cell';
        }
        
        // –°–∫—Ä—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ (8-16)
        for (let i = 8; i <= 16; i++) {
            if (cells[i]) cells[i].style.display = 'none';
        }
    });
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
 */
function applyAudioSettings() {
    const rowKey = currentDictation.current_row_key;
    if (!rowKey) return;
    
    const row = document.querySelector(`tr[data-key="${rowKey}"]`);
    if (!row) return;
    
    const audioFileInput = row.querySelector('.audio-file-input');
    const startInput = row.querySelector('.start-input');
    const endInput = row.querySelector('.end-input');
    const chainCheckbox = row.querySelector('.chain-checkbox');
    
    // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const audioStartTime = document.getElementById('audioStartTime');
    const audioEndTime = document.getElementById('audioEndTime');
    const audioFilesSelect = document.getElementById('audioFilesSelect');
    
    if (audioFilesSelect && audioFilesSelect.value) {
        if (audioFileInput) audioFileInput.value = audioFilesSelect.value;
    }
    
    if (audioStartTime && startInput) {
        startInput.value = audioStartTime.value;
    }
    
    if (audioEndTime && endInput) {
        endInput.value = audioEndTime.value;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ workingData
    const language = currentDictation.current_edit_mode;
    if (language === 'original') {
        const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            const sentence = workingData.original.sentences[sentenceIndex];
            sentence.audio = audioFileInput ? audioFileInput.value : '';
            sentence.start = parseFloat(startInput ? startInput.value : 0);
            sentence.end = parseFloat(endInput ? endInput.value : 0);
            sentence.chain = chainCheckbox ? chainCheckbox.checked : false;
        }
    } else if (language === 'translation') {
        const sentenceIndex = workingData.translation.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            const sentence = workingData.translation.sentences[sentenceIndex];
            sentence.audio = audioFileInput ? audioFileInput.value : '';
            sentence.start = parseFloat(startInput ? startInput.value : 0);
            sentence.end = parseFloat(endInput ? endInput.value : 0);
            sentence.chain = chainCheckbox ? chainCheckbox.checked : false;
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeAudioSettingsModal();
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
 */
function syncTimeWithTable(field, value) {
    const rowKey = currentDictation.current_row_key;
    if (!rowKey) return;
    
    const row = document.querySelector(`tr[data-key="${rowKey}"]`);
    if (!row) return;
    
    const input = row.querySelector(`.${field}-input`);
    if (input) {
        input.value = value;
    }
}

/**
 * –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 */
function openAudioFileDialog() {
    // –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'audio/*';
    input.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
            uploadAudioFile(file);
        }
    };
    input.click();
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
 */
function uploadAudioFile(file) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log('Uploading audio file:', file.name);
    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    loadAudioFilesList();
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ –∫ —Ç–∞–±–ª–∏—Ü–µ
 */
function applyAudioToTable() {
    const audioFilesSelect = document.getElementById('audioFilesSelect');
    if (!audioFilesSelect || !audioFilesSelect.value) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª');
        return;
    }
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    const checkedRows = document.querySelectorAll('.audio-checkbox:checked');
    if (checkedRows.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ');
        return;
    }
    
    // –†–∞–∑–¥–µ–ª–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    autoSplitAudio(audioFilesSelect.value, Array.from(checkedRows).map(row => {
        const input = row.closest('tr').querySelector('.audio-file-input');
        return input ? input.dataset.key : null;
    }).filter(key => key));
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏
 */
function autoSplitAudio(filename, rowKeys) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log(`Auto-splitting ${filename} for rows:`, rowKeys);
}

/**
 * –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
 */
function startAudioRecording() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω
    console.log('Starting audio recording...');
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
 */
function toggleAudioPlayback() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    console.log('Toggling audio playback...');
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ start/end
 */
function updateChain(rowKey, field, value) {
    const row = document.querySelector(`tr[data-key="${rowKey}"]`);
    if (!row) return;
    
    const chainCheckbox = row.querySelector('.chain-checkbox');
    if (!chainCheckbox || !chainCheckbox.checked) return;
    
    // –ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏
    const allRows = Array.from(document.querySelectorAll('#sentences-table tbody tr'));
    const currentIndex = allRows.indexOf(row);
    
    if (field === 'end' && currentIndex < allRows.length - 1) {
        // –ò–∑–º–µ–Ω—è–µ–º end —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º start —Å–ª–µ–¥—É—é—â–µ–π
        const nextRow = allRows[currentIndex + 1];
        const nextChainCheckbox = nextRow.querySelector('.chain-checkbox');
        
        if (nextChainCheckbox && nextChainCheckbox.checked) {
            const nextStartInput = nextRow.querySelector('.start-input');
            if (nextStartInput) {
                nextStartInput.value = value;
                
                // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ workingData
                const nextRowKey = nextRow.dataset.key;
                const language = currentDictation.current_edit_mode || 'original';
                updateSentenceData(nextRowKey, language, 'start', parseFloat(value));
            }
        }
    } else if (field === 'start' && currentIndex > 0) {
        // –ò–∑–º–µ–Ω—è–µ–º start —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º end –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        const prevRow = allRows[currentIndex - 1];
        const prevChainCheckbox = prevRow.querySelector('.chain-checkbox');
        
        if (prevChainCheckbox && prevChainCheckbox.checked) {
            const prevEndInput = prevRow.querySelector('.end-input');
            if (prevEndInput) {
                prevEndInput.value = value;
                
                // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ workingData
                const prevRowKey = prevRow.dataset.key;
                const language = currentDictation.current_edit_mode || 'original';
                updateSentenceData(prevRowKey, language, 'end', parseFloat(value));
            }
        }
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ workingData
 */
function updateSentenceData(rowKey, language, field, value) {
    if (language === 'original') {
        const sentenceIndex = workingData.original.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            workingData.original.sentences[sentenceIndex][field] = value;
        }
    } else if (language === 'translation') {
        const sentenceIndex = workingData.translation.sentences.findIndex(s => s.key === rowKey);
        if (sentenceIndex !== -1) {
            workingData.translation.sentences[sentenceIndex][field] = value;
        }
    }
}



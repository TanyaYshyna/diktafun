// –ë–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
const GRID = document.getElementById('dictationsGrid');
let language_original = "en";
let language_translation = "ru";
let selectedCategory = null;



console.log('‚úÖ script_index.js –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('UserManager:', window.UM);
console.log('LanguageManager:', window.LanguageManager);



async function saveLanguageSettings(values) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    //const userElement = document.getElementById('user-data');
    const isAuthenticated = userElement ? userElement.dataset.isAuthenticated === 'True' : false;

    if (!isAuthenticated) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
        localStorage.setItem('tempLanguageSettings', JSON.stringify(values));
        return;
    }

    try {
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', values);

        // –†–ï–ê–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï —á–µ—Ä–µ–∑ UserManager
        const updateData = {
            native_language: values.nativeLanguage,
            learning_languages: values.learningLanguages,
            current_learning: values.currentLearning
        };

        const updatedUser = await window.UM.updateProfile(updateData);
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', updatedUser);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        window.USER_LANGUAGE_DATA = {
            nativeLanguage: updatedUser.native_language,
            learningLanguages: updatedUser.learning_languages,
            currentLearning: updatedUser.current_learning,
            isAuthenticated: true
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

function reloadDictationsWithNewLanguages() {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    if (categoriesTree && categoriesTree.getActiveNode()) {
        const node = categoriesTree.getActiveNode();
        const ids = node.data.dictations || [];
        const filteredDictations = allDictations.filter(d => ids.includes(d.id));
        renderDictationsGrid(filteredDictations);
    }
}

// –ü—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞:
// 1) –µ—Å–ª–∏ –≤ JSON –µ—Å—Ç—å d.cover ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ,
// 2) –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –ø–æ id,
// 3) –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è ‚Äî –≤ onerror –ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
// –ü—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞:
async function coverPath(d) {
    //   if (d.cover) return d.cover;
    //   if (d.preview_image) return d.preview_image;

    if (d.id) {
        const coverUrl = `/static/data/dictations/${d.id}/cover.webp`;
        try {
            const response = await fetch(coverUrl, { method: 'HEAD' });
            if (response.ok) return coverUrl;
        } catch (e) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–ª–æ–∂–∫–∏ ${coverUrl}`, e);
        }
    }

    // –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–ø–∫–µ
    return '/static/images/cover_en.webp';
}


// –°–æ–±—Ä–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –¥–∏–∫—Ç–∞–Ω—Ç–∞ –∫–∞–∫ DOM-–¥–µ—Ä–µ–≤–æ
function createCardDOM(d) {
    // –°—Å—ã–ª–∫–∏ ¬´–æ—Ç–∫—Ä—ã—Ç—å¬ª –∏ ¬´—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª
    // const openUrl = d.openUrl || (d.link ? hrefFromHTML(d.link) : '#');
    // const editUrl = d.editUrl || (d.link_red ? hrefFromHTML(d.link_red) : openUrl);
    const openUrl = `/dictation/${d.id}/${language_original}/${language_translation}`;
    const editUrl = `/dictation_generator/${d.id}/${language_original}/${language_translation}`;

    // <article class="short-card">
    const card = document.createElement('article');
    card.className = 'short-card';

    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∏–∑ JSON: d.color, –Ω–∞–ø—Ä–∏–º–µ—Ä "var(--color-button-orange)" –∏–ª–∏ "#aabbcc"
    if (d.color) card.style.setProperty('--card-accent', d.color);

    // <a class="short-thumb" href="..."><img .../></a>
    const thumb = document.createElement('a');
    thumb.className = 'short-thumb';
    thumb.href = openUrl;
    thumb.setAttribute('aria-label', `–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç: ${d.title || ''}`);

    const img = document.createElement('img');
    img.src = d.cover_url;
    img.alt = d.title || '–û–±–ª–æ–∂–∫–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞';
    img.loading = 'lazy';
    img.decoding = 'async';
    img.onerror = () => { img.src = 'data/covers/cover_en.webp'; };

    thumb.appendChild(img);
    card.appendChild(thumb);

    // <h3 class="short-title"><a href="...">–ù–∞–∑–≤–∞–Ω–∏–µ</a></h3>
    const h3 = document.createElement('h3');
    h3.className = 'short-title';
    const titleLink = document.createElement('a');
    titleLink.href = openUrl;
    titleLink.textContent = d.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    h3.appendChild(titleLink);
    card.appendChild(h3);

    // <div class="short-meta">–Ø–∑—ã–∫ ... ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å ...</div>
    const meta = document.createElement('div');
    meta.className = 'short-meta';
    const langLeft = d.langIcon || d.language_original || '';
    const langRight = d.translations || d.language_translation || '';
    meta.textContent = `–Ø–∑—ã–∫: ${langLeft} ‚áí ${langRight} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${d.level || '‚Äî'}`;
    card.appendChild(meta);

    // –ö–Ω–æ–ø–∫–∞-–∏–∫–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Å—ã–ª–∫–∞)
    const edit = document.createElement('a');
    edit.className = 'short-edit';
    edit.href = editUrl;
    edit.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    edit.setAttribute('aria-label', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    // lucide-–∏–∫–æ–Ω–∫–∞
    edit.innerHTML = `<i data-lucide="pencil-ruler"></i>`;
    card.appendChild(edit);

    return card;
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å—é —Å–µ—Ç–∫—É
function renderDictationsGrid(dictations) {
    if (!GRID) {
        console.warn('#dictationsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
        return;
    }
    GRID.innerHTML = '';

    dictations.forEach(d => {
        const card = createCardDOM(d);
        GRID.appendChild(card);
    });

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide (–µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    if (window.lucide && typeof window.lucide.createIcons === 'function') {
        window.lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async function initializeUserData() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ UserManager (JWT)
        const isAuthenticated = window.UM.isAuthenticated();
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT:', isAuthenticated);

        if (!isAuthenticated) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            window.USER_LANGUAGE_DATA = {
                nativeLanguage: 'ru',
                learningLanguages: ['en'],
                currentLearning: 'en',
                isAuthenticated: false
            };
            return;
        }

        // –î–õ–Ø –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JWT
        const user = window.UM.currentUser;
        console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ JWT:', user);

        if (!user) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JWT');
        }

        window.USER_LANGUAGE_DATA = {
            nativeLanguage: user.native_language || 'ru',
            learningLanguages: user.learning_languages || ['en'],
            currentLearning: user.current_learning || user.learning_languages?.[0] || 'en',
            isAuthenticated: true
        };

        console.log('USER_LANGUAGE_DATA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', window.USER_LANGUAGE_DATA);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // Fallback –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        window.USER_LANGUAGE_DATA = {
            nativeLanguage: 'ru',
            learningLanguages: ['en'],
            currentLearning: 'en',
            isAuthenticated: false
        };
    }
}

// –æ—Å—Ç–∞–≤–ª—è–µ–º
function initializeLanguageSelector() {
    try {
        const userSettings = window.USER_LANGUAGE_DATA || {
            nativeLanguage: 'ru',
            learningLanguages: ['en'],
            currentLearning: 'en',
            isAuthenticated: false
        };

        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', userSettings);
        console.log('üìåüìåüìåüìåüìåüìå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä header-language-selector:', document.getElementById('header-language-selector'));

        if (typeof initLanguageSelector === 'function') {
            const options = {
                mode: 'header-selector',
                nativeLanguage: userSettings.nativeLanguage,
                learningLanguages: userSettings.learningLanguages,
                currentLearning: userSettings.currentLearning,
                languageData: window.LanguageManager.getLanguageData(),
                onLanguageChange: function (values) {
                    console.log('üîÑ –Ø–∑—ã–∫–æ–≤–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤', values);
                    try {
                        updateLanguages(values);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if (userSettings.isAuthenticated) {
                            saveLanguageSettings(values);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:', error);
                    }
                }
            };

            console.log('üéØ –°–æ–∑–¥–∞–µ–º LanguageSelector —Å options:', options);
            const selector = initLanguageSelector('header-language-selector', options);

            if (selector) {
                console.log('‚úÖ LanguageSelector —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.warn('‚ùå LanguageSelector –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
                createSimpleLanguageDisplay();
            }

        } else {
            console.warn('‚ùå –§—É–Ω–∫—Ü–∏—è initLanguageSelector –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            createSimpleLanguageDisplay();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', error);
        createSimpleLanguageDisplay();
    }
}

// –ü—Ä–æ—Å—Ç–æ–π fallback
function createSimpleLanguageDisplay() {
    const selectorContainer = document.getElementById('header-language-selector');
    if (!selectorContainer) return;

    console.warn('‚ùå‚ùå‚ùå‚ùå —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫');

    const userSettings = window.USER_LANGUAGE_DATA || {
        nativeLanguage: 'ru',
        learningLanguages: ['en'],
        currentLearning: 'en'
    };

    selectorContainer.innerHTML = `
        <div class="simple-language-display">
            <span>${userSettings.currentLearning.toUpperCase()} ‚Üí ${userSettings.nativeLanguage.toUpperCase()}</span>
        </div>
    `;
}



// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.getElementById('newDictationBtn').addEventListener('click', function () {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const userElement = document.getElementById('user-data');
    const isAuthenticated = userElement ? userElement.dataset.isAuthenticated === 'True' : false;

    if (!isAuthenticated) {
        alert("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
        window.location.href = '/login'; // –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return;
    }

    if (!selectedCategory || !selectedCategory.data.languages) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–æ–π!");
        return;
    }

    const langOrig = selectedCategory.data.languages.original;
    const langTrans = selectedCategory.data.languages.translation;

    window.location.href = `/dictation_generator/${langOrig}/${langTrans}`;
});


// ================ –≤—Å–µ –¥–∏–∫—Ç–∞–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ ========================
let allDictations = [];

function loadDictations() {
    // console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∫—Ç–∞–Ω—Ç—ã...");

    return fetch('/dictations-list')
        .then(res => {
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤");
            return res.json();
        })
        .then(data => {
            // console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤: ${data.length}`);
            allDictations = data;
        })
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤:", err));
}




// ================ –¥–µ—Ä–µ–≤–æ FancyTree ========================
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ä–µ–≤–æ
let categoriesTree = null;
let allCategoriesData = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ HTML
function loadCategoriesData() {
    const categoriesDataElement = document.getElementById('categories-data');
    if (categoriesDataElement) {
        try {
            allCategoriesData = JSON.parse(categoriesDataElement.textContent);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ HTML:',
                allCategoriesData.children ? allCategoriesData.children.length : 0, '—è–∑—ã–∫–æ–≤—ã—Ö –≥—Ä—É–ø–ø');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            return false;
        }
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç categories-data –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML');
        return false;
    }
}

function initFancyTree() {
    console.log("üå≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FancyTree...");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ HTML
    if (!loadCategoriesData()) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language_original = window.USER_LANGUAGE_DATA.currentLearning;
    language_translation = window.USER_LANGUAGE_DATA.nativeLanguage;

    console.log("üó£Ô∏è –Ø–∑—ã–∫–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞:", language_original, "‚Üí", language_translation);

    try {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const filteredData = filterTreeData(allCategoriesData, currentLanguageFilter);
        // console.log("üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", filteredData.children ? filteredData.children.length : 0, '–≥—Ä—É–ø–ø');

        $('#treeContainer').fancytree({
            extensions: ["dnd5", "edit"],
            source: filteredData,
            lazy: false,
            init: function (event, data) {
                categoriesTree = data.tree;
                console.log("‚úÖ FancyTree –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —É–∑–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                categoriesTree.visit(function (node) {
                    node.setExpanded(true);
                });
            },
            activate: function (event, data) {
                const node = data.node;
                selectedCategory = node; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                const ids = node.data.dictations || [];

                // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ
                language_original = window.USER_LANGUAGE_DATA.currentLearning;
                language_translation = window.USER_LANGUAGE_DATA.nativeLanguage;

                const filteredDictations = allDictations.filter(d => ids.includes(d.id));
                renderDictationsGrid(filteredDictations);
                updateUIForSelectedNode(node);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —É–∑–ª—É
                let pathParts = [];
                let current = node;
                while (current) {
                    if (current.title.toLowerCase() !== "root") {
                        pathParts.unshift(current.title);
                    }
                    current = current.parent;
                }

                const path = pathParts.join(" / ");
                document.getElementById("text_tree_branch").textContent = path;
            }
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FancyTree:", error);
    }
}


function setupTreeButtons() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    $('#btnAddNode').click(function () {
        if (!categoriesTree) {
            console.warn("–î–µ—Ä–µ–≤–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
            return;
        }

        const activeNode = categoriesTree.getActiveNode() || categoriesTree.getRootNode();
        const newNode = activeNode.addChildren({
            title: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            key: "node_" + Date.now(),
            folder: true
        });

        activeNode.setExpanded(true);
        newNode.setActive(true);
        newNode.editStart();
    });

    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    $('#btnDeleteNode').click(function () {
        if (!categoriesTree) return;

        const node = categoriesTree.getActiveNode();
        if (!node || node.isRoot()) {
            alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç");
            return;
        }

        if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${node.title}"?`)) {
            node.remove();
        }
    });
}

function setupPanelResizer() {
    const resizer = $("#resizer");
    const leftPanel = $("#leftPanel");
    const rightPanel = $("#rightPanel");
    let startX, startWidth;

    resizer.on("mousedown", function (e) {
        startX = e.pageX;
        startWidth = leftPanel.outerWidth();
        $(document).on("mousemove", resize);
        $(document).on("mouseup", stopResize);
        return false;
    });

    function resize(e) {
        const newWidth = startWidth + e.pageX - startX;
        const minWidth = 200;
        const maxWidth = $(window).width() * 0.7;

        leftPanel.width(Math.min(maxWidth, Math.max(minWidth, newWidth)) + "px");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ä–µ–≤–∞
        if (categoriesTree) {
            categoriesTree.resize();
        }
    }

    function stopResize() {
        $(document).off("mousemove", resize);
        $(document).off("mouseup", stopResize);
    }
}

function updateUIForSelectedNode(node) {
    $("#current-category").text(node.title);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
}


function getFlagImg(lang) {
    if (!lang) return ''; // –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–µ —Ä–∏—Å—É–µ–º –Ω–∏—á–µ–≥–æ

    const path = `/static/flags/${lang}.svg`;
    return `<img src="${path}" alt="${lang}" title="${lang.toUpperCase()}" width="20" style="vertical-align:middle;">`;
}






// ================ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –Ø–ó–´–ö–ê–ú ========================

// ================ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –Ø–ó–´–ö–ê–ú ========================

let currentLanguageFilter = 'learning_to_native';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö JSON –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ –¥–µ—Ä–µ–≤–æ
function filterTreeData(treeData, filter) {
    const learningLang = language_original; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const nativeLang = language_translation;

    console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞:', filter, learningLang, '‚Üí', nativeLang);

    if (filter === 'all') {
        return treeData;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const filteredData = JSON.parse(JSON.stringify(treeData));

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–µ–π –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—É—Ä–æ–≤–µ–Ω—å 1)
    if (filteredData.children) {
        filteredData.children = filteredData.children.filter(rootChild => {
            const rootLang = rootChild.data?.language_original;

            if (filter === 'learning_only') {
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
                return rootLang === learningLang;
            }
            else if (filter === 'learning_to_native') {
                // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –µ–≥–æ –¥–µ—Ç–µ–π
                if (rootLang === learningLang) {
                    if (rootChild.children) {
                        rootChild.children = rootChild.children.filter(secondLevelChild => {
                            const secondLang = secondLevelChild.data?.language_translation;
                            return secondLang === nativeLang;
                        });
                    }
                    return rootChild.children && rootChild.children.length > 0;
                }
                return false;
            }
            return true;
        });
    }

    return filteredData;
}

// –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function reloadTreeWithFilter() {
    if (!categoriesTree || !allCategoriesData) {
        console.log('‚ö†Ô∏è –î–µ—Ä–µ–≤–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }

    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:', currentLanguageFilter);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const filteredData = filterTreeData(allCategoriesData, currentLanguageFilter);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ
    categoriesTree.reload(filteredData).then(() => {
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        categoriesTree.visit(node => {
            node.setExpanded(true);
        });
        console.log('‚úÖ –î–µ—Ä–µ–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º');
    });
}

function updateLanguages(newLanguages) {
    try {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤:', newLanguages);

        if (!newLanguages || !newLanguages.currentLearning || !newLanguages.nativeLanguage) {
            console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤:', newLanguages);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        language_original = newLanguages.currentLearning;
        language_translation = newLanguages.nativeLanguage;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (window.USER_LANGUAGE_DATA) {
            window.USER_LANGUAGE_DATA.currentLearning = newLanguages.currentLearning;
            window.USER_LANGUAGE_DATA.nativeLanguage = newLanguages.nativeLanguage;
        }

        console.log('–Ø–∑—ã–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', language_original, '‚Üí', language_translation);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å –Ω–æ–≤—ã–º–∏ —è–∑—ã–∫–∞–º–∏
        if (categoriesTree) {
            setTimeout(() => {
                try {
                    reloadTreeWithFilter();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ä–µ–≤–∞:', error);
                }
            }, 100);
        }
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ updateLanguages:', error);
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
function applyTreeFilter(filter) {
    if (!categoriesTree) {
        console.log('–î–µ—Ä–µ–≤–æ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
        return;
    }

    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –¥–µ—Ä–µ–≤—É:', filter);
    reloadTreeWithFilter();
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
function initializeLanguageFilter() {
    const filterSelect = document.getElementById('languageFilter');
    if (!filterSelect) return;

    filterSelect.value = currentLanguageFilter;

    filterSelect.addEventListener('change', function (e) {
        currentLanguageFilter = e.target.value;
        console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–∏–ª—å—Ç—Ä:', currentLanguageFilter);

        // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –†–£–ß–ù–û–ú –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        reloadTreeWithFilter();
    });

    // ‚ùå –ù–ï–¢ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
}

function fitFancyTreeHeight() {
    const wrap = document.getElementById('treeContainer');
    const tree = wrap && (wrap.querySelector('ul.fancytree-container') || wrap.querySelector('.fancytree-container'));
    if (wrap && tree) {
        tree.style.height = wrap.clientHeight + 'px';
        tree.style.overflowY = 'auto';
        tree.style.overflowX = 'hidden';
    }
}

function setupNewDictationButton() {
    const newDictationBtn = document.getElementById('newDictationBtn');
    if (!newDictationBtn) {
        console.warn('–ö–Ω–æ–ø–∫–∞ newDictationBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    newDictationBtn.addEventListener('click', function () {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ UserManager
        const isAuthenticated = window.UM.isAuthenticated();

        if (!isAuthenticated) {
            alert("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∫—Ç–∞–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
            const loginUrl = '/login?next=' + encodeURIComponent(window.location.pathname);
            window.location.href = loginUrl;
            return;
        }

        if (!selectedCategory || !selectedCategory.data.languages) {
            alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–æ–π!");
            return;
        }

        const langOrig = selectedCategory.data.languages.original;
        const langTrans = selectedCategory.data.languages.translation;
        window.location.href = `/dictation_generator/${langOrig}/${langTrans}`;
    });
}



document.addEventListener('DOMContentLoaded', function () {

    try {
        // –ñ–¥–µ–º –ø–æ–∫–∞ UserManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
        const waitForUserManager = setInterval(() => {
            if (window.UM && window.UM.isInitialized !== undefined) {
                clearInterval(waitForUserManager);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                initializeUserData().then(() => {
                    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', window.USER_LANGUAGE_DATA);

                    if (!window.USER_LANGUAGE_DATA.isAuthenticated) {
                        showAuthBanner();
                    }

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    initializeLanguageSelector();
                    initializeLanguageFilter();
                    fitFancyTreeHeight();
                    setupNewDictationButton();

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∫—Ç–∞–Ω—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ
                    return loadDictations().then(() => {
                        initFancyTree();
                        setupPanelResizer();
                        setupTreeButtons();
                    });
                }).catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                });

            }
        }, 100);

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ UserManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        // setTimeout(() => {
        //     clearInterval(waitForUserManager);
        //     if (!window.UM) {
        //         console.error('UserManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
        //         initializeUserData().then(() => {
        //             initializeLanguageSelector();
        //             initializeLanguageFilter();
        //             fitFancyTreeHeight();
        //             setupNewDictationButton();
        //             loadDictations().then(() => initFancyTree());
        //         });
        //     }
        // }, 5000);

    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthBanner() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –±–∞–Ω–Ω–µ—Ä
    if (document.querySelector('.auth-banner')) return;

    const banner = document.createElement('div');
    banner.className = 'auth-banner';
    banner.innerHTML = `
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 12px; margin: 10px 0; border-radius: 5px; font-size: 14px;">
            <strong>üí° –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</strong> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
            <a href="/login?next=${encodeURIComponent(window.location.pathname)}" 
               style="margin-left: 10px; color: #007bff; text-decoration: underline;">
               –í–æ–π—Ç–∏
            </a>
        </div>
    `;

    const main = document.querySelector('main');
    const header = document.querySelector('header');
    if (main) {
        main.insertBefore(banner, main.firstChild);
    } else if (header) {
        header.parentNode.insertBefore(banner, header.nextSibling);
    }
}

// –ë–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
const GRID = document.getElementById('dictationsGrid');

// –ò–∑–≤–ª–µ—á—å href –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º <a ...>...</a>
// (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É —Ç–µ–±—è link/link_red –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ HTML)
function hrefFromHTML(html) {
  const m = /href="([^"]+)"/.exec(html || '');
  return m ? m[1] : '#';
}


// ================ —à–∞–ø–∫–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ========================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
document.querySelectorAll('.language-dropdown a').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const lang = link.getAttribute('data-lang');
        localStorage.setItem('appLanguage', lang);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        const toggle = document.getElementById('language-toggle');
        toggle.innerHTML = `
                    <img src="${link.querySelector('img').src}" 
                         alt="${link.querySelector('img').alt}" 
                         width="20">
                    <span>${lang.toUpperCase()}</span>
                `;

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        alert(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${lang}. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥!`);
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    const savedLang = localStorage.getItem('appLanguage') || 'ru';
    const langLink = document.querySelector(`.language-dropdown a[data-lang="${savedLang}"]`);
    if (langLink) {
        document.getElementById('language-toggle').innerHTML = `
                    <img src="${langLink.querySelector('img').src}" 
                         alt="${langLink.querySelector('img').alt}" 
                         width="20">
                    <span>${savedLang.toUpperCase()}</span>
                `;
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.getElementById('newDictationBtn').addEventListener('click', function () {
    if (!selectedCategory || !selectedCategory.data.languages) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–æ–π!");
        return;
    }
    const langOrig = selectedCategory.data.languages.original;
    const langTrans = selectedCategory.data.languages.translation;

    window.location.href = `/dictation_generator/${langOrig}/${langTrans}`;
});


// ================ –≤—Å–µ –¥–∏–∫—Ç–∞–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ ========================
let allDictations = [];

function loadDictations() {
    console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∫—Ç–∞–Ω—Ç—ã...");

    return fetch('/dictations-list')
        .then(res => {
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤");
            return res.json();
        })
        .then(data => {
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤: ${data.length}`);
            allDictations = data;
        })
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤:", err));
}




// ================ –¥–µ—Ä–µ–≤–æ FancyTree ========================
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ä–µ–≤–æ
let categoriesTree = null;

$(document).ready(function () {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
    loadDictations().then(() => {
        initFancyTree();
    });

    // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å–∞–π–∑–µ—Ä–∞
    setupPanelResizer();

    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
    setupTreeButtons();
});

function initFancyTree() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FancyTree...");

    try {
        $('#treeContainer').fancytree({
            extensions: ["dnd5", "edit"],
            source: {
                url: "/static/data/categories.json",
                cache: false
            },
            lazy: false, // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
            init: function (event, data) {
                categoriesTree = data.tree;
                console.log("FancyTree –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —É–∑–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                categoriesTree.visit(function (node) {
                    node.setExpanded(true);
                });
            },
            activate: function (event, data) {
                const node = data.node;

                // ‚ö† –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∏–∑ —É–∑–ª–∞
                const ids = node.data.dictations || [];
                const language_original = node.data.language_original || "en";
                const language_translation = node.data.language_translation || "ru";

 
                // üîç –ù–∞—Ö–æ–¥–∏–º –¥–∏–∫—Ç–∞–Ω—Ç—ã —Å —Ç–∞–∫–∏–º–∏ ID
                const filteredDictations = allDictations.filter(d => ids.includes(d.id));

                // renderDictationList(filtered, language_original, language_translation);
                renderDictationsGrid(filteredDictations);
                updateUIForSelectedNode(node);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —É–∑–ª—É
                let pathParts = [];
                let current = node;
                while (current) {
                    if (current.title.toLowerCase() !== "root") {
                        pathParts.unshift(current.title);
                    }
                    current = current.parent;
                }

                const path = pathParts.join(" / ");
                document.getElementById("text_tree_branch").textContent = path;
            },
            renderNode: function (event, data) {
                // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
                const node = data.node;
                const $span = $(node.span);

                if (node.isFolder()) {
                    $span.find(".fancytree-title").addClass("folder-item");
                }
            },
            dnd: {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ drag and drop
                dragStart: function (node, data) {
                    return true;
                },
                dragEnter: function (node, data) {
                    return true;
                }
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FancyTree:", error);
    }
}

function setupTreeButtons() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    $('#btnAddNode').click(function () {
        if (!categoriesTree) {
            console.warn("–î–µ—Ä–µ–≤–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
            return;
        }

        const activeNode = categoriesTree.getActiveNode() || categoriesTree.getRootNode();
        const newNode = activeNode.addChildren({
            title: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            key: "node_" + Date.now(),
            folder: true
        });

        activeNode.setExpanded(true);
        newNode.setActive(true);
        newNode.editStart();
    });

    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    $('#btnDeleteNode').click(function () {
        if (!categoriesTree) return;

        const node = categoriesTree.getActiveNode();
        if (!node || node.isRoot()) {
            alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç");
            return;
        }

        if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${node.title}"?`)) {
            node.remove();
        }
    });
}

function setupPanelResizer() {
    const resizer = $("#resizer");
    const leftPanel = $("#leftPanel");
    const rightPanel = $("#rightPanel");
    let startX, startWidth;

    resizer.on("mousedown", function (e) {
        startX = e.pageX;
        startWidth = leftPanel.outerWidth();
        $(document).on("mousemove", resize);
        $(document).on("mouseup", stopResize);
        return false;
    });

    function resize(e) {
        const newWidth = startWidth + e.pageX - startX;
        const minWidth = 200;
        const maxWidth = $(window).width() * 0.7;

        leftPanel.width(Math.min(maxWidth, Math.max(minWidth, newWidth)) + "px");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ä–µ–≤–∞
        if (categoriesTree) {
            categoriesTree.resize();
        }
    }

    function stopResize() {
        $(document).off("mousemove", resize);
        $(document).off("mouseup", stopResize);
    }
}

function updateUIForSelectedNode(node) {
    $("#current-category").text(node.title);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
}


function getFlagImg(lang) {
    if (!lang) return ''; // –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–µ —Ä–∏—Å—É–µ–º –Ω–∏—á–µ–≥–æ

    const path = `/static/flags/${lang}.svg`;
    return `<img src="${path}" alt="${lang}" title="${lang.toUpperCase()}" width="20" style="vertical-align:middle;">`;
}


// function renderDictationList(dictations, language_original, language_translation) {
//     const container = document.getElementById("dictationList");
//     container.innerHTML = "";

//     if (dictations.length === 0) {
//         container.innerHTML = "<p>–ù–µ—Ç –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>";
//         return;
//     }

//     dictations.forEach(d => {
//         const div = document.createElement("div");
//         div.classList.add("dictation-item");

//         console.group(`üìÑ –î–∏–∫—Ç–∞–Ω—Ç: ${d.title || "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}`);
//         console.log("üü® ID:", d.id);
//         console.log("üü© parent_key:", d.parent_key);
//         console.log("üåê language:", d.language);
//         console.log("üåê languages:", d.languages);
//         console.log("üìò level:", d.level);
//         console.groupEnd();

//         // --- –Ø–∑—ã–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–∞–≥) ---
//         const langIcon = getFlagImg(language_original);

//         // --- –ü–µ—Ä–µ–≤–æ–¥—ã (–º–∞—Å—Å–∏–≤ —è–∑—ã–∫–æ–≤) ---
//         const translations = getFlagImg(language_translation);

//         // --- –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∫—Ç–∞–Ω—Ç ---
//         const link = `<a href="/dictation/${d.id}/${language_original}/${language_translation}">–û—Ç–∫—Ä—ã—Ç—å</a>`;
//         const link_red = `<a href="/dictation_generator/${d.id}/${language_original}/${language_translation}">–û—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</a>`;

//         div.innerHTML = `
//             <div class="diktation_panel">
//                 <div><strong>${d.title}</strong></div>
//                 <div>–Ø–∑—ã–∫: ${langIcon} ‚áí ${translations}</div>
//                 <div>–£—Ä–æ–≤–µ–Ω—å: ${d.level || '‚Äî'}</div>
//                 <div>${link}</div>
//                 <div>${link_red}</div>
//             </div>
//         `;

//         container.appendChild(div);
//     });
// }

// –ü–æ–¥—Ö–≤–∞—Ç–∏–º —Ç–≤–æ–∏ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å href


// -------- –°–ø–∏—Å–æ–∫ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –Ω–∞ –≤–µ—Ç–∫–µ ----------------------------------
// --------------- DOM-–í–ï–†–°–ò–Ø –†–ï–ù–î–ï–†–ê –ö–ê–†–¢–û–ß–ï–ö ------------------

// –ò–∑–≤–ª–µ—á—å href –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º <a ...>...</a>
// (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É —Ç–µ–±—è link/link_red –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ HTML)
function hrefFromHTML(html) {
  const m = /href="([^"]+)"/.exec(html || '');
  return m ? m[1] : '#';
}

// –ü—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –¥–∏–∫—Ç–∞–Ω—Ç–∞:
// 1) –µ—Å–ª–∏ –≤ JSON –µ—Å—Ç—å d.cover ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ,
// 2) –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –ø–æ id,
// 3) –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è ‚Äî –≤ onerror –ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
function coverPath(d) {
  if (d.cover) return d.cover;
  if (d.preview_image) return d.preview_image; // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è
  if (d.id) return `dictations/${d.id}/cover.webp`;
  return 'images/placeholder-cover.svg';
}

// –°–æ–±—Ä–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –¥–∏–∫—Ç–∞–Ω—Ç–∞ –∫–∞–∫ DOM-–¥–µ—Ä–µ–≤–æ
function createCardDOM(d) {
  // –°—Å—ã–ª–∫–∏ ¬´–æ—Ç–∫—Ä—ã—Ç—å¬ª –∏ ¬´—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª
  const openUrl = d.openUrl || (d.link ? hrefFromHTML(d.link) : '#');
  const editUrl = d.editUrl || (d.link_red ? hrefFromHTML(d.link_red) : openUrl);

  // <article class="short-card">
  const card = document.createElement('article');
  card.className = 'short-card';

  // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –∏–∑ JSON: d.color, –Ω–∞–ø—Ä–∏–º–µ—Ä "var(--color-button-orange)" –∏–ª–∏ "#aabbcc"
  if (d.color) card.style.setProperty('--card-accent', d.color);

  // <a class="short-thumb" href="..."><img .../></a>
  const thumb = document.createElement('a');
  thumb.className = 'short-thumb';
  thumb.href = openUrl;
  thumb.setAttribute('aria-label', `–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç: ${d.title || ''}`);

  const img = document.createElement('img');
  img.src = coverPath(d);
  img.alt = d.title || '–û–±–ª–æ–∂–∫–∞ –¥–∏–∫—Ç–∞–Ω—Ç–∞';
  img.loading = 'lazy';
  img.decoding = 'async';
  img.onerror = () => { img.src = 'images/placeholder-cover.svg'; };

  thumb.appendChild(img);
  card.appendChild(thumb);

  // <h3 class="short-title"><a href="...">–ù–∞–∑–≤–∞–Ω–∏–µ</a></h3>
  const h3 = document.createElement('h3');
  h3.className = 'short-title';
  const titleLink = document.createElement('a');
  titleLink.href = openUrl;
  titleLink.textContent = d.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  h3.appendChild(titleLink);
  card.appendChild(h3);

  // <div class="short-meta">–Ø–∑—ã–∫ ... ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å ...</div>
  const meta = document.createElement('div');
  meta.className = 'short-meta';
  const langLeft  = d.langIcon || d.language_original || '';
  const langRight = d.translations || d.language_translation || '';
  meta.textContent = `–Ø–∑—ã–∫: ${langLeft} ‚áí ${langRight} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${d.level || '‚Äî'}`;
  card.appendChild(meta);

  // –ö–Ω–æ–ø–∫–∞-–∏–∫–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Å—ã–ª–∫–∞)
  const edit = document.createElement('a');
  edit.className = 'short-edit';
  edit.href = editUrl;
  edit.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
  edit.setAttribute('aria-label', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
  // lucide-–∏–∫–æ–Ω–∫–∞
  edit.innerHTML = `<i data-lucide="pencil-ruler"></i>`;
  card.appendChild(edit);

  return card;
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å—é —Å–µ—Ç–∫—É
function renderDictationsGrid(dictations) {
  if (!GRID) {
    console.warn('#dictationsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
    return;
  }
  GRID.innerHTML = '';

  dictations.forEach(d => {
    const card = createCardDOM(d);
    GRID.appendChild(card);
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏ Lucide (–µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  if (window.lucide && typeof window.lucide.createIcons === 'function') {
    window.lucide.createIcons();
  }
}
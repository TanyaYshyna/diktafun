
// ================ —à–∞–ø–∫–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ========================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
document.querySelectorAll('.language-dropdown a').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const lang = link.getAttribute('data-lang');
        localStorage.setItem('appLanguage', lang);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        const toggle = document.getElementById('language-toggle');
        toggle.innerHTML = `
                    <img src="${link.querySelector('img').src}" 
                         alt="${link.querySelector('img').alt}" 
                         width="20">
                    <span>${lang.toUpperCase()}</span>
                `;

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        alert(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${lang}. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥!`);
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    const savedLang = localStorage.getItem('appLanguage') || 'ru';
    const langLink = document.querySelector(`.language-dropdown a[data-lang="${savedLang}"]`);
    if (langLink) {
        document.getElementById('language-toggle').innerHTML = `
                    <img src="${langLink.querySelector('img').src}" 
                         alt="${langLink.querySelector('img').alt}" 
                         width="20">
                    <span>${savedLang.toUpperCase()}</span>
                `;
    }
});


// ================ –≤—Å–µ –¥–∏–∫—Ç–∞–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ ========================
let allDictations = [];

function loadDictations() {
    console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∫—Ç–∞–Ω—Ç—ã...");

    return fetch('/dictations-list')
        .then(res => {
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤");
            return res.json();
        })
        .then(data => {
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤: ${data.length}`);
            allDictations = data;
        })
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤:", err));
}




// ================ –¥–µ—Ä–µ–≤–æ FancyTree ========================
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ä–µ–≤–æ
let categoriesTree = null;

$(document).ready(function () {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
    loadDictations().then(() => {
        initFancyTree();
    });

    // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å–∞–π–∑–µ—Ä–∞
    setupPanelResizer();

    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
    setupTreeButtons();
});

function initFancyTree() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FancyTree...");

    try {
        $('#treeContainer').fancytree({
            extensions: ["dnd5", "edit"],
            source: {
                url: "/static/data/categories.json",
                cache: false
            },
            lazy: false, // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
            init: function (event, data) {
                categoriesTree = data.tree;
                console.log("FancyTree –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —É–∑–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                categoriesTree.visit(function (node) {
                    node.setExpanded(true);
                });
            },
            activate: function (event, data) {
                const node = data.node;
                console.log("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:", node.title);

                // ‚ö† –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∏–∑ —É–∑–ª–∞
                const ids = node.data.dictations || [];

                // üîç –ù–∞—Ö–æ–¥–∏–º –¥–∏–∫—Ç–∞–Ω—Ç—ã —Å —Ç–∞–∫–∏–º–∏ ID
                const filtered = allDictations.filter(d => ids.includes(d.id));
                console.log("üîë –ò—â–µ–º ID:", ids);
                console.log("üì¶ allDictations:", allDictations.map(d => d.id));
                console.log("üì• –ù–∞–π–¥–µ–Ω—ã –¥–∏–∫—Ç–∞–Ω—Ç—ã:", filtered.map(d => d.id));

                renderDictationList(filtered);
                updateUIForSelectedNode(node);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —É–∑–ª—É
                let pathParts = [];
                let current = node;
                while (current) {
                    if (current.title.toLowerCase() !== "root") {
                        pathParts.unshift(current.title);
                    }
                    current = current.parent;
                }

                const path = pathParts.join(" / ");
                document.getElementById("text_tree_branch").textContent = path;
            },
            renderNode: function (event, data) {
                // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
                const node = data.node;
                const $span = $(node.span);

                if (node.isFolder()) {
                    $span.find(".fancytree-title").addClass("folder-item");
                }
            },
            dnd: {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ drag and drop
                dragStart: function (node, data) {
                    return true;
                },
                dragEnter: function (node, data) {
                    return true;
                }
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FancyTree:", error);
    }
}

function setupTreeButtons() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    $('#btnAddNode').click(function () {
        if (!categoriesTree) {
            console.warn("–î–µ—Ä–µ–≤–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
            return;
        }

        const activeNode = categoriesTree.getActiveNode() || categoriesTree.getRootNode();
        const newNode = activeNode.addChildren({
            title: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            key: "node_" + Date.now(),
            folder: true
        });

        activeNode.setExpanded(true);
        newNode.setActive(true);
        newNode.editStart();
    });

    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    $('#btnDeleteNode').click(function () {
        if (!categoriesTree) return;

        const node = categoriesTree.getActiveNode();
        if (!node || node.isRoot()) {
            alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç");
            return;
        }

        if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${node.title}"?`)) {
            node.remove();
        }
    });
}

function setupPanelResizer() {
    const resizer = $("#resizer");
    const leftPanel = $("#leftPanel");
    const rightPanel = $("#rightPanel");
    let startX, startWidth;

    resizer.on("mousedown", function (e) {
        startX = e.pageX;
        startWidth = leftPanel.outerWidth();
        $(document).on("mousemove", resize);
        $(document).on("mouseup", stopResize);
        return false;
    });

    function resize(e) {
        const newWidth = startWidth + e.pageX - startX;
        const minWidth = 200;
        const maxWidth = $(window).width() * 0.7;

        leftPanel.width(Math.min(maxWidth, Math.max(minWidth, newWidth)) + "px");

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ä–µ–≤–∞
        if (categoriesTree) {
            categoriesTree.resize();
        }
    }

    function stopResize() {
        $(document).off("mousemove", resize);
        $(document).off("mouseup", stopResize);
    }
}

function updateUIForSelectedNode(node) {
    $("#current-category").text(node.title);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
}


function getFlagImg(lang) {
    if (!lang) return ''; // –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–µ —Ä–∏—Å—É–µ–º –Ω–∏—á–µ–≥–æ

    const path = `/static/flags/${lang}.svg`;
    return `<img src="${path}" alt="${lang}" title="${lang.toUpperCase()}" width="20" style="vertical-align:middle;">`;
}


function renderDictationList(dictations) {
    const container = document.getElementById("dictationList");
    container.innerHTML = "";

    if (dictations.length === 0) {
        container.innerHTML = "<p>–ù–µ—Ç –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>";
        return;
    }

    dictations.forEach(d => {
        const div = document.createElement("div");
        div.classList.add("dictation-item");

        console.group(`üìÑ –î–∏–∫—Ç–∞–Ω—Ç: ${d.title || "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}`);
        console.log("üü® ID:", d.id);
        console.log("üü© parent_key:", d.parent_key);
        console.log("üåê language:", d.language);
        console.log("üåê languages:", d.languages);
        console.log("üìò level:", d.level);
        console.groupEnd();

        // --- –Ø–∑—ã–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–∞–≥) ---
        const langIcon = getFlagImg(d.language);

        // --- –ü–µ—Ä–µ–≤–æ–¥—ã (–º–∞—Å—Å–∏–≤ —è–∑—ã–∫–æ–≤) ---
        const translations = (d.languages || [])
            .map(lang => getFlagImg(lang))
            .join(' ');

        // --- –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∫—Ç–∞–Ω—Ç ---
        const link = `<a href="/dictation/${d.id}/0">–û—Ç–∫—Ä—ã—Ç—å</a>`;

        div.innerHTML = `
            <div><strong>${d.title}</strong></div>
            <div>–Ø–∑—ã–∫: ${langIcon} ‚áí ${translations}</div>
            <div>–£—Ä–æ–≤–µ–Ω—å: ${d.level || '‚Äî'}</div>
            <div>${link}</div>
        `;

        container.appendChild(div);
    });
}


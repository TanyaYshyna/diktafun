
import os
import json

from flask import Flask, session, render_template, url_for, abort, redirect, flash
from flask import render_template, redirect, url_for, flash
from forms import RegistrationForm  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ forms.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
from flask import send_from_directory
from flask_sqlalchemy import SQLAlchemy

from routes.index import index_bp
from routes.dictation_generator import generator_bp
from routes.dictation import dictation_bp

app = Flask(__name__)
app.register_blueprint(index_bp)
app.register_blueprint(generator_bp)
app.register_blueprint(dictation_bp)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.abspath('instance/users.db')
app.config['SECRET_KEY'] = '–≤–∞—à-–Ω–æ–≤—ã–π-—Å–µ–∫—Ä–µ—Ç–Ω—ã–π-–∫–ª—é—á-12345'  # –∏–∑ app0.py

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# db = SQLAlchemy(app)
    
# from models import User
# from flask_login import LoginManager, login_required
# from flask_login import login_user, current_user

# login_manager = LoginManager(app)
# login_manager.login_view = 'login'
from config import USE_DATABASE
from flask_login import LoginManager, login_required, current_user

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏
if USE_DATABASE:
    # –†–ï–ñ–ò–ú –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
    from models import User
    from flask_login import login_user
    
    db = SQLAlchemy(app)
    login_manager = LoginManager(app)
    login_manager.login_view = 'login'
    
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))

else:
    # –†–ï–ñ–ò–ú –ë–ï–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ó–ê–ì–õ–£–®–ö–ê)
    from user_stub import User
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è login_manager
    login_manager = LoginManager(app)
    login_manager.login_view = 'login'
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è user_loader
    @login_manager.user_loader
    def load_user(user_id):
        return User.get(user_id)
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è login_user (–ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    def login_user(user, remember=False):
        return user

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º current_user –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
from flask_login import current_user

from forms import LoginForm  # –î–æ–±–∞–≤—å—Ç–µ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
@app.route('/data/<path:filename>')
def serve_data(filename):
    return send_from_directory('data', filename)


@app.route('/data/dictations/<path:filename>')
def serve_dictation_audio(filename):
    return send_from_directory('data/dictations', filename)




@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if not USE_DATABASE:
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ —Å test@example.com / test')
        return redirect(url_for('login'))
    
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(
            name=form.name.data,
            email=form.email.data,
            native_lang=form.native_lang.data,
            learning_langs=','.join(form.learning_langs.data)
        )
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)


# @login_manager.user_loader
# def load_user(user_id):
#     return User.query.get(int(user_id))


@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    form = LoginForm()
    
    if form.validate_on_submit():
        if USE_DATABASE:
            # –†–µ–∂–∏–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            user = User.query.filter_by(email=form.email.data).first()
            if user and user.check_password(form.password.data):
                login_user(user)
                flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!')
                return redirect(url_for('index'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        else:
            # –†–µ–∂–∏–º —Å –∑–∞–≥–ª—É—à–∫–æ–π - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            user = User.query_filter_by(email=form.email.data).first()
            if user and user.check_password(form.password.data):
                login_user(user)
                flash('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)!')
                return redirect(url_for('index'))
            else:
                flash('–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ email: test@example.com, –ø–∞—Ä–æ–ª—å: test')
    
    return render_template('login.html', form=form)


# –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
@app.route('/test_db')
def test_db():
    if not USE_DATABASE:
        return "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    try:
        db.session.execute('SELECT 1')
        return "‚úÖ –ë–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}"

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if USE_DATABASE:
        with app.app_context():
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏)")
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)")
    
    app.run(debug=True, port=5000)

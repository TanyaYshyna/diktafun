# routes/user_routes.py
import os
import json
from datetime import datetime
import uuid
from flask import Blueprint, request, jsonify, render_template
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ helpers
from helpers.user_helpers import load_user_info, save_user_info
# from helpers.user_helpers import load_user_info, save_user_info, email_to_folder, get_user_folder
# import jwt

user_bp = Blueprint('user', __name__, url_prefix='/user')


# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ID ====================

def generate_user_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"user_{uuid.uuid4().hex}"

def generate_simple_user_id():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
    return f"user_{datetime.now().strftime('%Y%m%d%H%M%S')}_{os.urandom(4).hex()}"

# ==================== –ù–û–í–´–ï API –≠–ù–î–ü–û–ô–ù–¢–´ (JWT) ====================

@user_bp.route('/api/register', methods=['POST'])
def api_register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API"""
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    username = data.get('username')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if load_user_info(email):
        return jsonify({'error': 'User already exists'}), 400
        
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'id': generate_user_id(),
        'username': username,
        'email': email,
        'password': password,  # üö® –í –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ —Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å!
        'native_language': data.get('native_language', 'ru'),
        'learning_language': data.get('learning_language', 'en'),
        'learning_languages': data.get('learning_languages', ['en']),
        'streak_days': 0,
        'created_at': datetime.now().isoformat()
    }
    
    save_user_info(email, user_data)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(identity=email)
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    user_response = user_data.copy()
    user_response.pop('password', None)
    
    return jsonify({
        'message': 'User created successfully',
        'access_token': access_token,
        'user': user_response
    })

@user_bp.route('/api/login', methods=['POST'])
def api_login():
    """–õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ API"""
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    
    user_data = load_user_info(email)
    if not user_data or user_data.get('password') != password:
        return jsonify({'error': 'Invalid credentials'}), 401
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(identity=email)
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    user_response = user_data.copy()
    user_response.pop('password', None)
    
    return jsonify({
        'message': 'Login successful',
        'access_token': access_token,
        'user': user_response
    })

@user_bp.route('/api/me', methods=['GET'])
@jwt_required()
def api_get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    current_email = get_jwt_identity()
    user_data = load_user_info(current_email)
    
    if not user_data:
        return jsonify({'error': 'User not found'}), 404
        
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å
    user_response = user_data.copy()
    user_response.pop('password', None)
    return jsonify(user_response)

@user_bp.route('/api/logout', methods=['POST'])
@jwt_required()
def api_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω)"""
    return jsonify({'message': 'Logout successful'})

# ==================== –°–¢–†–ê–ù–ò–¶–´ ====================

@user_bp.route('/login')
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ JWT"""
    return render_template('user_login_jwt.html')

# @user_bp.route('/register')
# def register_page():
#     """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT"""
#     return render_template('user_register_jwt.html')

# @user_bp.route('/profile')
# def profile_page():
#     """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
#     return render_template('user_profile_jwt.html')
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

@user_bp.route('/register')
def register():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT (–∑–∞–≥–ª—É—à–∫–∞)"""
    return """
    <!DOCTYPE html>
    <html>
    <body>
        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        <p>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</p>
        <a href="/user/login">–ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É</a>
    </body>
    </html>
    """

@user_bp.route('/profile')
def profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ JWT (–∑–∞–≥–ª—É—à–∫–∞)"""
    return """
    <!DOCTYPE html>
    <html>
    <body>
        <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
        <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</p>
        <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </body>
    </html>
    """
@user_bp.route('/logout')
def logout():  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç endpoint
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É –≤—ã—Ö–æ–¥–∞
    from flask import redirect, url_for
    return redirect(url_for('index.index'))
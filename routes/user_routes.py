# routes/user_routes.py
from PIL import Image
import io
import base64
import os
import json
from datetime import datetime
import uuid
from flask import Blueprint, request, jsonify, render_template, send_file
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ helpers
from helpers.user_helpers import load_user_info, save_user_info

user_bp = Blueprint('user', __name__, url_prefix='/user')

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ID ====================

def generate_user_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"user_{uuid.uuid4().hex}"

def generate_simple_user_id():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
    return f"user_{datetime.now().strftime('%Y%m%d%H%M%S')}_{os.urandom(4).hex()}"

# ==================== –ù–û–í–´–ï API –≠–ù–î–ü–û–ô–ù–¢–´ (JWT) ====================

@user_bp.route('/api/register', methods=['POST'])
def api_register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API"""
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    username = data.get('username')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if load_user_info(email):
        return jsonify({'error': 'User already exists'}), 400
        
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'id': generate_user_id(),
        'username': username,
        'email': email,
        'password': password,  # üö® –í –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ —Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å!
        'native_language': data.get('native_language', 'ru'),
        'learning_language': data.get('learning_language', 'en'),
        'learning_languages': data.get('learning_languages', ['en']),
        'streak_days': 0,
        'created_at': datetime.now().isoformat()
    }
    
    save_user_info(email, user_data)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(identity=email)
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    user_response = user_data.copy()
    user_response.pop('password', None)
    
    return jsonify({
        'message': 'User created successfully',
        'access_token': access_token,
        'user': user_response
    })

# @user_bp.route('/api/login', methods=['POST'])
# def api_login():
#     """–õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ API"""
#     data = request.get_json()
#     email = data.get('email')
#     password = data.get('password')
    
#     user_data = load_user_info(email)
#     if not user_data or user_data.get('password') != password:
#         return jsonify({'error': 'Invalid credentials'}), 401
    
#     # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
#     access_token = create_access_token(identity=email)
    
#     # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
#     user_response = user_data.copy()
#     user_response.pop('password', None)
    
#     # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
#     response = jsonify({
#         'message': 'Login successful',
#         'access_token': access_token,
#         'user': user_response
#     })
    
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookie –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
#     response.set_cookie('access_token_cookie', access_token, httponly=True, max_age=24*60*60)
    
#     return response
@user_bp.route('/api/login', methods=['POST'])
def api_login():
    """–õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ API"""
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        
        print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: email={email}")  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        
        if not email or not password:
            return jsonify({'error': 'Email and password are required'}), 400
        
        user_data = load_user_info(email)
        
        if not user_data:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            users_path = 'data/users'
            if os.path.exists(users_path):
                existing_users = os.listdir(users_path)
                print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {existing_users}")
            return jsonify({'error': 'Invalid credentials'}), 401
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_data.get('username')}")
        
        if user_data.get('password') != password:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return jsonify({'error': 'Invalid credentials'}), 401
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token = create_access_token(identity=email)
        
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        user_response = user_data.copy()
        user_response.pop('password', None)
        
        print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
        
        return jsonify({
            'message': 'Login successful',
            'access_token': access_token,
            'user': user_response
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")
        return jsonify({'error': 'Internal server error'}), 500


@user_bp.route('/api/me', methods=['GET'])
@jwt_required()
def api_get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    current_email = get_jwt_identity()
    user_data = load_user_info(current_email)
    
    if not user_data:
        return jsonify({'error': 'User not found'}), 404
        
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å
    user_response = user_data.copy()
    user_response.pop('password', None)
    return jsonify(user_response)

@user_bp.route('/api/logout', methods=['POST'])
@jwt_required()
def api_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω)"""
    response = jsonify({'message': 'Logout successful'})
    response.set_cookie('access_token_cookie', '', expires=0)
    return response

# ==================== –°–¢–†–ê–ù–ò–¶–´ ====================

@user_bp.route('/login')
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ JWT"""
    return render_template('user_login_jwt.html')

@user_bp.route('/register')
def register():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT (–∑–∞–≥–ª—É—à–∫–∞)"""
    return """
    <!DOCTYPE html>
    <html>
    <body>
        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        <p>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</p>
        <a href="/user/login">–ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É</a>
    </body>
    </html>
    """

@user_bp.route('/profile')
def profile_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return render_template('user_profile_jwt.html')

@user_bp.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    from flask import redirect, url_for
    response = redirect(url_for('index.index'))
    response.set_cookie('access_token_cookie', '', expires=0)
    return response

# ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (JWT) ====================

from PIL import Image
import io
import base64
import os
from helpers.user_helpers import get_user_folder, email_to_folder

@user_bp.route('/api/profile', methods=['PUT'])
@jwt_required()
def api_update_profile():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_email = get_jwt_identity()
        user_data = load_user_info(current_email)
        
        if not user_data:
            return jsonify({'error': 'User not found'}), 404
        
        updates = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if 'username' in updates:
            user_data['username'] = updates['username']
        
        if 'password' in updates and updates['password']:
            user_data['password'] = updates['password']  # üö® –í –±—É–¥—É—â–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å!
        
        if 'native_language' in updates:
            user_data['native_language'] = updates['native_language']
        
        if 'learning_languages' in updates:
            user_data['learning_languages'] = updates['learning_languages']
        
        if 'current_learning' in updates:
            user_data['current_learning'] = updates['current_learning']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_info(current_email, user_data)
        
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        user_response = user_data.copy()
        user_response.pop('password', None)
        
        return jsonify({
            'message': 'Profile updated successfully',
            'user': user_response
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@user_bp.route('/api/avatar', methods=['POST'])
@jwt_required()
def api_upload_avatar():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_email = get_jwt_identity()
        user_data = load_user_info(current_email)
        
        if not user_data:
            return jsonify({'error': 'User not found'}), 404
        
        if 'avatar' not in request.files:
            return jsonify({'error': 'No avatar file provided'}), 400
        
        avatar_file = request.files['avatar']
        
        if avatar_file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not avatar_file.content_type.startswith('image/'):
            return jsonify({'error': 'File must be an image'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_folder = get_user_folder(current_email)
        os.makedirs(user_folder, exist_ok=True)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(avatar_file.stream)
        
        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        LARGE_SIZE = (100, 100)
        SMALL_SIZE = (40, 40)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é (100x100)
        avatar_large = image.copy()
        avatar_large.thumbnail(LARGE_SIZE, Image.Resampling.LANCZOS)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –≤–µ—Ä—Å–∏—é (40x40)
        avatar_small = image.copy()
        avatar_small.thumbnail(SMALL_SIZE, Image.Resampling.LANCZOS)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã
        avatar_large_path = os.path.join(user_folder, 'avatar.webp')
        avatar_small_path = os.path.join(user_folder, 'avatar_min.webp')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ WEBP (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä)
        avatar_large.save(avatar_large_path, 'WEBP', quality=85)
        avatar_small.save(avatar_small_path, 'WEBP', quality=85)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        avatar_large_url = f'/user/api/avatar?email={current_email}&size=large'
        avatar_small_url = f'/user/api/avatar?email={current_email}&size=small'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['avatar'] = {
            'large': avatar_large_url,
            'small': avatar_small_url,
            'uploaded': datetime.now().isoformat()
        }
        
        save_user_info(current_email, user_data)

        return jsonify({
            'message': 'Avatar uploaded successfully',
            'avatar_urls': {
                'large': avatar_large_url,
                'small': avatar_small_url
            }
        })
        
    except Exception as e:
        print(f"Error uploading avatar: {e}")
        return jsonify({'error': str(e)}), 500

@user_bp.route('/api/avatar')
def api_get_avatar():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        email = request.args.get('email')
        size = request.args.get('size', 'large')
        
        if not email:
            return jsonify({'error': 'Email parameter required'}), 400
        
        user_folder = get_user_folder(email)
        avatar_filename = 'avatar.webp' if size == 'large' else 'avatar_min.webp'
        avatar_path = os.path.join(user_folder, avatar_filename)
        
        print(f"üîç –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ –ø—É—Ç–∏: {avatar_path}")
        
        if not os.path.exists(avatar_path):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_path = os.path.join('static', 'icons', f'default-avatar-{size}.svg')
            print(f"üîç –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º: {default_path}")
            
            if not os.path.exists(default_path):
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                default_path = os.path.join('static', 'icons', 'logo.svg')
                if not os.path.exists(default_path):
                    return jsonify({'error': 'Avatar not found'}), 404
            
            avatar_path = default_path
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if avatar_path.endswith('.webp'):
            mimetype = 'image/webp'
        elif avatar_path.endswith('.png'):
            mimetype = 'image/png'
        elif avatar_path.endswith('.svg'):
            mimetype = 'image/svg+xml'
        else:
            mimetype = 'image/jpeg'
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞
        return send_file(avatar_path, mimetype=mimetype)
        
    except Exception as e:
        print(f"Error getting avatar: {e}")
        return jsonify({'error': str(e)}), 500